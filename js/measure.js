// Generated by CoffeeScript 2.4.1
// Denna fil användes istället för sketch.coffee när man ska kalibrera en ny karta
// Klicka på tydliga referenspunkter i de fyra hörnen
// T ex vägskäl, hus, broar, kraftledningar, osv
// Avläs koordinaterna med tangent F12
var draw, img, index, litteras, mousePressed, nextIndex, points, preload, setup;

img = null;

index = -1;

preload = function() {
  return img = loadImage('Solvik.PNG');
};

litteras = '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'.split(' ');

points = {
  1: [604, 6069],
  2: [1415, 6153],
  3: [918, 5525],
  4: [2157, 5841],
  5: [1872, 5261],
  6: [1430, 4485],
  7: [2460, 4629],
  8: [1828, 4044],
  9: [1130, 3042],
  10: [1371, 2479],
  11: [1088, 1656],
  12: [1669, 1684],
  13: [2461, 2092],
  14: [3503, 1675],
  15: [3965, 2167],
  16: [4064, 2716],
  17: [3539, 3097],
  18: [2724, 3108],
  19: [3282, 3697],
  20: [2676, 4189]
};

setup = function() {
  createCanvas(img.width, img.height);
  image(img, 0, 0, width, height);
  print(img);
  fc();
  textSize(100);
  textAlign(CENTER, CENTER);
  return nextIndex();
};

draw = function() {
  image(img, 0, 0, width, height);
  fc();
  circle(mouseX, mouseY, 100);
  if (index in litteras) {
    fc(0);
    return text(litteras[index], mouseX, mouseY);
  }
};

nextIndex = function() {
  //while index==-1 or (index<litteras.length and points[litteras[index]])
  return index++;
};

mousePressed = function() {
  var arr, key, value, x, y;
  x = round(mouseX);
  y = round(mouseY);
  console.log(x, y, index, litteras[index]);
  //if x < width and y < height
  points[litteras[index]] = [x, y];
  arr = (function() {
    var results;
    results = [];
    for (key in points) {
      value = points[key];
      results.push(`\t${key}: [${value}]`);
    }
    return results;
  })();
  print("\n" + arr.join("\n"));
  return nextIndex();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVhc3VyZS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxtZWFzdXJlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7QUFBQSxJQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUE7O0FBS0EsR0FBQSxHQUFNOztBQUNOLEtBQUEsR0FBUSxDQUFDOztBQUVULE9BQUEsR0FBVSxRQUFBLENBQUEsQ0FBQTtTQUFHLEdBQUEsR0FBTSxTQUFBLENBQVUsWUFBVjtBQUFUOztBQUNWLFFBQUEsR0FBVyxvREFBb0QsQ0FBQyxLQUFyRCxDQUEyRCxHQUEzRDs7QUFDWCxNQUFBLEdBQ0M7RUFBQSxDQUFBLEVBQUcsQ0FBQyxHQUFELEVBQUssSUFBTCxDQUFIO0VBQ0EsQ0FBQSxFQUFHLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FESDtFQUVBLENBQUEsRUFBRyxDQUFDLEdBQUQsRUFBSyxJQUFMLENBRkg7RUFHQSxDQUFBLEVBQUcsQ0FBQyxJQUFELEVBQU0sSUFBTixDQUhIO0VBSUEsQ0FBQSxFQUFHLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FKSDtFQUtBLENBQUEsRUFBRyxDQUFDLElBQUQsRUFBTSxJQUFOLENBTEg7RUFNQSxDQUFBLEVBQUcsQ0FBQyxJQUFELEVBQU0sSUFBTixDQU5IO0VBT0EsQ0FBQSxFQUFHLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FQSDtFQVFBLENBQUEsRUFBRyxDQUFDLElBQUQsRUFBTSxJQUFOLENBUkg7RUFTQSxFQUFBLEVBQUksQ0FBQyxJQUFELEVBQU0sSUFBTixDQVRKO0VBVUEsRUFBQSxFQUFJLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FWSjtFQVdBLEVBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxJQUFOLENBWEo7RUFZQSxFQUFBLEVBQUksQ0FBQyxJQUFELEVBQU0sSUFBTixDQVpKO0VBYUEsRUFBQSxFQUFJLENBQUMsSUFBRCxFQUFNLElBQU4sQ0FiSjtFQWNBLEVBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxJQUFOLENBZEo7RUFlQSxFQUFBLEVBQUksQ0FBQyxJQUFELEVBQU0sSUFBTixDQWZKO0VBZ0JBLEVBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxJQUFOLENBaEJKO0VBaUJBLEVBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxJQUFOLENBakJKO0VBa0JBLEVBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxJQUFOLENBbEJKO0VBbUJBLEVBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxJQUFOO0FBbkJKOztBQXFCRCxLQUFBLEdBQVEsUUFBQSxDQUFBLENBQUE7RUFDUCxZQUFBLENBQWEsR0FBRyxDQUFDLEtBQWpCLEVBQXdCLEdBQUcsQ0FBQyxNQUE1QjtFQUNBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZ0IsS0FBaEIsRUFBc0IsTUFBdEI7RUFDQSxLQUFBLENBQU0sR0FBTjtFQUNBLEVBQUEsQ0FBQTtFQUNBLFFBQUEsQ0FBUyxHQUFUO0VBQ0EsU0FBQSxDQUFVLE1BQVYsRUFBaUIsTUFBakI7U0FDQSxTQUFBLENBQUE7QUFQTzs7QUFTUixJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7RUFDTixLQUFBLENBQU0sR0FBTixFQUFXLENBQVgsRUFBYSxDQUFiLEVBQWdCLEtBQWhCLEVBQXNCLE1BQXRCO0VBQ0EsRUFBQSxDQUFBO0VBQ0EsTUFBQSxDQUFPLE1BQVAsRUFBYyxNQUFkLEVBQXFCLEdBQXJCO0VBQ0EsSUFBRyxLQUFBLElBQVMsUUFBWjtJQUNDLEVBQUEsQ0FBRyxDQUFIO1dBQ0EsSUFBQSxDQUFLLFFBQVMsQ0FBQSxLQUFBLENBQWQsRUFBcUIsTUFBckIsRUFBNEIsTUFBNUIsRUFGRDs7QUFKTTs7QUFRUCxTQUFBLEdBQVksUUFBQSxDQUFBLENBQUEsRUFBQTs7U0FFWCxLQUFBO0FBRlc7O0FBSVosWUFBQSxHQUFlLFFBQUEsQ0FBQSxDQUFBO0FBQ2QsTUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQSxDQUFBLEdBQUksS0FBQSxDQUFNLE1BQU47RUFDSixDQUFBLEdBQUksS0FBQSxDQUFNLE1BQU47RUFDSixPQUFPLENBQUMsR0FBUixDQUFZLENBQVosRUFBYyxDQUFkLEVBQWdCLEtBQWhCLEVBQXNCLFFBQVMsQ0FBQSxLQUFBLENBQS9CLEVBRkE7O0VBSUEsTUFBTyxDQUFBLFFBQVMsQ0FBQSxLQUFBLENBQVQsQ0FBUCxHQUEwQixDQUFDLENBQUQsRUFBSSxDQUFKO0VBQzFCLEdBQUE7O0FBQThCO0lBQUEsS0FBQSxhQUFBOzttQkFBdkIsQ0FBQSxFQUFBLENBQUEsQ0FBSyxHQUFMLENBQVMsR0FBVCxDQUFBLENBQWMsS0FBZCxDQUFvQixDQUFwQjtJQUF1QixDQUFBOzs7RUFDOUIsS0FBQSxDQUFNLElBQUEsR0FBTyxHQUFHLENBQUMsSUFBSixDQUFTLElBQVQsQ0FBYjtTQUNBLFNBQUEsQ0FBQTtBQVJjIiwic291cmNlc0NvbnRlbnQiOlsiIyBEZW5uYSBmaWwgYW52w6RuZGVzIGlzdMOkbGxldCBmw7ZyIHNrZXRjaC5jb2ZmZWUgbsOkciBtYW4gc2thIGthbGlicmVyYSBlbiBueSBrYXJ0YVxyXG4jIEtsaWNrYSBww6UgdHlkbGlnYSByZWZlcmVuc3B1bmt0ZXIgaSBkZSBmeXJhIGjDtnJuZW5cclxuIyBUIGV4IHbDpGdza8OkbCwgaHVzLCBicm9hciwga3JhZnRsZWRuaW5nYXIsIG9zdlxyXG4jIEF2bMOkcyBrb29yZGluYXRlcm5hIG1lZCB0YW5nZW50IEYxMlxyXG5cclxuaW1nID0gbnVsbCBcclxuaW5kZXggPSAtMVxyXG5cclxucHJlbG9hZCA9IC0+IGltZyA9IGxvYWRJbWFnZSAnU29sdmlrLlBORydcclxubGl0dGVyYXMgPSAnMSAyIDMgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAnLnNwbGl0ICcgJ1xyXG5wb2ludHMgPSBcclxuXHQxOiBbNjA0LDYwNjldXHJcblx0MjogWzE0MTUsNjE1M11cclxuXHQzOiBbOTE4LDU1MjVdXHJcblx0NDogWzIxNTcsNTg0MV1cclxuXHQ1OiBbMTg3Miw1MjYxXVxyXG5cdDY6IFsxNDMwLDQ0ODVdXHJcblx0NzogWzI0NjAsNDYyOV1cclxuXHQ4OiBbMTgyOCw0MDQ0XVxyXG5cdDk6IFsxMTMwLDMwNDJdXHJcblx0MTA6IFsxMzcxLDI0NzldXHJcblx0MTE6IFsxMDg4LDE2NTZdXHJcblx0MTI6IFsxNjY5LDE2ODRdXHJcblx0MTM6IFsyNDYxLDIwOTJdXHJcblx0MTQ6IFszNTAzLDE2NzVdXHJcblx0MTU6IFszOTY1LDIxNjddXHJcblx0MTY6IFs0MDY0LDI3MTZdXHJcblx0MTc6IFszNTM5LDMwOTddXHJcblx0MTg6IFsyNzI0LDMxMDhdXHJcblx0MTk6IFszMjgyLDM2OTddXHJcblx0MjA6IFsyNjc2LDQxODldXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0Y3JlYXRlQ2FudmFzIGltZy53aWR0aCwgaW1nLmhlaWdodFxyXG5cdGltYWdlIGltZywgMCwwLCB3aWR0aCxoZWlnaHRcclxuXHRwcmludCBpbWdcclxuXHRmYygpXHJcblx0dGV4dFNpemUgMTAwXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRuZXh0SW5kZXgoKVxyXG5cclxuZHJhdyA9IC0+XHRcclxuXHRpbWFnZSBpbWcsIDAsMCwgd2lkdGgsaGVpZ2h0XHJcblx0ZmMoKVxyXG5cdGNpcmNsZSBtb3VzZVgsbW91c2VZLDEwMFxyXG5cdGlmIGluZGV4IG9mIGxpdHRlcmFzXHJcblx0XHRmYyAwXHJcblx0XHR0ZXh0IGxpdHRlcmFzW2luZGV4XSxtb3VzZVgsbW91c2VZXHJcblxyXG5uZXh0SW5kZXggPSAtPlxyXG5cdCN3aGlsZSBpbmRleD09LTEgb3IgKGluZGV4PGxpdHRlcmFzLmxlbmd0aCBhbmQgcG9pbnRzW2xpdHRlcmFzW2luZGV4XV0pXHJcblx0aW5kZXgrK1xyXG5cclxubW91c2VQcmVzc2VkID0gLT5cclxuXHR4ID0gcm91bmQgbW91c2VYXHJcblx0eSA9IHJvdW5kIG1vdXNlWVxyXG5cdGNvbnNvbGUubG9nIHgseSxpbmRleCxsaXR0ZXJhc1tpbmRleF1cclxuXHQjaWYgeCA8IHdpZHRoIGFuZCB5IDwgaGVpZ2h0XHJcblx0cG9pbnRzW2xpdHRlcmFzW2luZGV4XV0gPSBbeCwgeV1cclxuXHRhcnIgPSAoXCJcXHQje2tleX06IFsje3ZhbHVlfV1cIiBmb3Iga2V5LHZhbHVlIG9mIHBvaW50cylcclxuXHRwcmludCBcIlxcblwiICsgYXJyLmpvaW4gXCJcXG5cIlxyXG5cdG5leHRJbmRleCgpXHJcbiJdfQ==
//# sourceURL=c:\github\gpsKarta\coffee\measure.coffee