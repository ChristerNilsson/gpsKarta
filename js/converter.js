// Generated by CoffeeScript 2.4.1
var Converter, b2w, bmp, w2b, wgs;

Converter = class Converter {
  constructor(inp, outp) {
    this.arr = this.solve(inp, outp);
  }

  convert(x, y) {
    var a, b, c, d, e, f;
    [a, b, c, d, e, f] = this.arr;
    return [a * x + b * y + c, d * x + e * y + f];
  }

  solve(inp, outp) {
    var a, b, c, d, e, eqns, f;
    [a, b, c, d, e, f] = inp;
    eqns = [];
    eqns.push([a, b, 1, 0, 0, 0]);
    eqns.push([0, 0, 0, a, b, 1]);
    eqns.push([c, d, 1, 0, 0, 0]);
    eqns.push([0, 0, 0, c, d, 1]);
    eqns.push([e, f, 1, 0, 0, 0]);
    eqns.push([0, 0, 0, e, f, 1]);
    return this.csgauss(eqns, outp);
  }

  // https://github.com/itsravenous/gaussian-elimination/blob/master/gauss.js
  csgauss(A, x) {
    var c, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, maxEl, maxRow, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, res, s, t;
    n = A.length;
    ref = range(n);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      A[i].push(x[i]);
    }
    ref1 = range(n);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      i = ref1[m];
      maxEl = Math.abs(A[i][i]);
      maxRow = i;
      ref2 = range(i + 1, n);
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        k = ref2[o];
        if (maxEl < Math.abs(A[k][i])) {
          maxEl = Math.abs(A[k][i]);
          maxRow = k;
        }
      }
      ref3 = range(i, n + 1);
      for (p = 0, len3 = ref3.length; p < len3; p++) {
        k = ref3[p];
        [A[maxRow][k], A[i][k]] = [A[i][k], A[maxRow][k]];
      }
      ref4 = range(i + 1, n);
      for (q = 0, len4 = ref4.length; q < len4; q++) {
        k = ref4[q];
        c = -A[k][i] / A[i][i];
        ref5 = range(i, n + 1);
        for (r = 0, len5 = ref5.length; r < len5; r++) {
          j = ref5[r];
          A[k][j] = i === j ? 0 : A[k][j] + c * A[i][j];
        }
      }
    }
    res = range(n).map(function() {
      return 0;
    });
    ref6 = range(n - 1, -1, -1);
    for (s = 0, len6 = ref6.length; s < len6; s++) {
      i = ref6[s];
      res[i] = A[i][n] / A[i][i];
      ref7 = range(i - 1, -1, -1);
      for (t = 0, len7 = ref7.length; t < len7; t++) {
        k = ref7[t];
        A[k][n] -= A[k][i] * res[i];
      }
    }
    return res;
  }

};

// `
// var abs = Math.abs;

// function array_fill(i, n, v) {
//     var a = [];
//     for (; i < n; i++) {
//         a.push(v);
//     }
//     return a;
// }

// /**
//  * Gaussian elimination
//  * @param  array A matrix
//  * @param  array x vector
//  * @return array x solution vector
//  */
// function gauss(A, x) {

//     var i, k, j;

//     // Just make a single matrix
//     for (i=0; i < A.length; i++) { 
//         A[i].push(x[i]);
//     }
//     var n = A.length;

//     for (i=0; i < n; i++) { 
//         // Search for maximum in this column
//         var maxEl = abs(A[i][i]),
//             maxRow = i;
//         for (k=i+1; k < n; k++) { 
//             if (abs(A[k][i]) > maxEl) {
//                 maxEl = abs(A[k][i]);
//                 maxRow = k;
//             }
//         }

//         // Swap maximum row with current row (column by column)
//         for (k=i; k < n+1; k++) { 
//             var tmp = A[maxRow][k];
//             A[maxRow][k] = A[i][k];
//             A[i][k] = tmp;
//         }

//         // Make all rows below this one 0 in current column
//         for (k=i+1; k < n; k++) { 
//             var c = -A[k][i]/A[i][i];
//             for (j=i; j < n+1; j++) { 
//                 if (i===j) {
//                     A[k][j] = 0;
//                 } else {
//                     A[k][j] += c * A[i][j];
//                 }
//             }
//         }
//     }

//     // Solve equation Ax=b for an upper triangular matrix A
//     x = array_fill(0, n, 0);
//     for (i=n-1; i > -1; i--) { 
//         x[i] = A[i][n]/A[i][i];
//         for (k=i-1; k > -1; k--) { 
//             A[k][n] -= A[k][i] * x[i];
//         }
//     }

//     return x;
// }

// // module.exports = gauss;
// `
bmp = [
  338,
  1491,
  4299,
  1948,
  2963,
  5596 // x1,y1, x2,y2, x3,y3
];

wgs = [
  18.150709,
  59.285624,
  18.179902,
  59.283048,
  18.168739,
  59.269496 // lng1,lat1, lng2,lat2, lng3,lat3
];

b2w = new Converter(bmp, wgs);

assert([18.150709, 59.28562399999999], b2w.convert(bmp[0], bmp[1]));

assert([18.179902, 59.283048], b2w.convert(bmp[2], bmp[3]));

assert([18.168739, 59.269496], b2w.convert(bmp[4], bmp[5]));

w2b = new Converter(wgs, bmp);

assert([338.00000000023283, 1491], w2b.convert(wgs[0], wgs[1]));

assert([4299, 1948], w2b.convert(wgs[2], wgs[3]));

assert([2963, 5595.999999998137], w2b.convert(wgs[4], wgs[5]));

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\gpsKarta\coffee\converter.coffee