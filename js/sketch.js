// Generated by CoffeeScript 2.4.1
var A, B, C, D, DATA, DELAY, DIST, DISTLIST, FILENAME, HEIGHT, LIMIT, MAIL, SCALE, TRACKED, WIDTH, addZero, assert, clearControls, controls, corner, currentControl, cx, cy, drawControl, drawTrack, executeMail, getBike, getControls, gps, gpsCount, gpsLat, gpsLon, h, hortal, img, initControls, initSpeaker, jcnindex, locationUpdate, locationUpdateFail, makeCorners, makeTargets, menu1, menu2, menu3, menu4, menu5, menu6, messages, mousePressed, mouseReleased, myMousePressed, myround, pastSayings, platform, playSound, position, preload, released, saveControls, say, sayBearing, sayDistance, sendMail, setBike, setTarget, setup, showDialogue, soundDown, soundIndicator, soundQueue, soundUp, spara, speaker, stdDateTime, takes, targets, timeout, track, trail, trgLat, trgLon, update, vercal, w, xdraw,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

DELAY = 100; // ms, delay between sounds

DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike

LIMIT = 20; // meter. Under this, no bearing. Also distance voice every meter.

DISTLIST = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];

MAIL = 'janchrister.nilsson@gmail.com';

spara = function(lat, lon, x, y) {
  return {lat, lon, x, y};
};

// 2019-SommarN

// A = spara 59.2987921, 18.1284073, 472, 617 # kontroll  5
// B = spara 59.2985405, 18.1699098,4361, 503 # kontroll 10
// C = spara 59.2851374, 18.1336592,1090,3104 # kontroll 31
// D = spara 59.2844998, 18.1666946,4181,3069 # kontroll 17

// FILENAME = '2019-SommarN.jpg' 

// controls = # id: [x,y,littera,lat,lon]
// 	'1': [1830,333,'',0,0] 
// 	'2': [1506,521,'',0,0]
// 	'3': [907,711,'',0,0]
// 	'4': [1193,873,'',0,0]
// 	'5': [472,617,'',0,0]
// 	'6': [228,841,'',0,0]
// 	'7': [672,1013,'',0,0]
// 	'8': [1125,1196,'',0,0]
// 	'9': [1430,1290,'',0,0]
// 	'10': [4361,503,'',0,0]
// 	'11': [4118,1106,'',0,0]
// 	'12': [3830,640,'',0,0]
// 	'13': [3192,1133,'',0,0]
// 	'14': [2664,873,'',0,0]
// 	'15': [2322,1862,'',0,0]
// 	'16': [4120,2699,'',0,0]
// 	'17': [4181,3069,'',0,0]
// 	'19': [3340,2904,'',0,0]
// 	'20': [2691,2554,'',0,0]
// 	'24': [3366,3217,'',0,0]
// 	'26': [390,1935,'',0,0]
// 	'27': [547,2143,'',0,0]
// 	'28': [1462,2293,'',0,0]
// 	'29': [1055,2620,'',0,0]
// 	'30': [371,2502,'',0,0]
// 	'31': [1090,3104,'',0,0]
// 	'32': [2250,2750,'',0,0]

// 2019-SommarS

// A = spara 59.2801716, 18.152609,  2894,485  # 38 P
// B = spara 59.2810534, 18.1676281, 4303,255  # 21 B
// C = spara 59.2677013, 18.1548921, 3231,2757 # 50 K
// D = spara 59.2687144, 18.1660263, 4256,2514 # 48 M

// A = spara 59.279157, 18.149313, 2599,676 # Mellanbron
// B = spara 59.275129, 18.169590, 4531,1328 # Ulvsjön Vändplan Huset
// C = spara 59.270072, 18.150229, 2763,2334 # Brotorpsbron
// D = spara 59.267894, 18.167087, 4339,2645 # Älta huset
FILENAME = '2020-Vinter.jpg';

A = spara(59.285624, 18.150709, 338, 1491); // Övre bron Ö

B = spara(59.283048, 18.179902, 4299, 1948); // Stora fårhuset

C = spara(59.270077, 18.150339, 488, 5566); // Brotorpsbron Ö

D = spara(59.269496, 18.168739, 2963, 5596); // Bergsätrav/Klisätrav

controls = {
  
  //'Brotorp':     59.2705658 18.1480179 2019-05-20 18:32:15 43 B (794)
  //'Skarpnäck T': 59.2662226 18.1331561 2019-05-20 18:37:25 bike S (973)
  1: [604, 6069, '', 0, 0],
  2: [1415, 6153, '', 0, 0],
  3: [918, 5525, '', 0, 0],
  4: [2157, 5841, '', 0, 0],
  5: [1872, 5261, '', 0, 0],
  6: [1430, 4485, '', 0, 0],
  7: [2460, 4629, '', 0, 0],
  8: [1828, 4044, '', 0, 0],
  9: [1130, 3042, '', 0, 0],
  10: [1371, 2479, '', 0, 0],
  11: [1088, 1656, '', 0, 0],
  12: [1669, 1684, '', 0, 0],
  13: [2461, 2092, '', 0, 0],
  14: [3503, 1675, '', 0, 0],
  15: [3965, 2167, '', 0, 0],
  16: [4064, 2716, '', 0, 0],
  17: [3539, 3097, '', 0, 0],
  18: [2724, 3108, '', 0, 0],
  19: [3282, 3697, '', 0, 0],
  20: [2676, 4189, '', 0, 0]
};

//################
targets = []; // [id, littera, distance]

platform = null;

saveControls = function() {
  return localStorage.gpsKarta = JSON.stringify(controls);
};

getControls = function() {
  try {
    return controls = JSON.parse(localStorage.gpsKarta);
  } catch (error1) {
    return initControls();
  }
};

clearControls = function() {
  var control, key;
  for (key in controls) {
    control = controls[key];
    control[2] = '';
  }
  return saveControls();
};

initControls = function() {
  var control, key, lat, littera, lon, results, x, y;
  results = [];
  for (key in controls) {
    control = controls[key];
    [x, y, littera] = control;
    [lat, lon] = gps.bmp2gps(x, y);
    control[3] = lat;
    results.push(control[4] = lon);
  }
  return results;
};

makeTargets = function() {
  var b, c, control, key, lat, littera, lon, x, y;
  targets = [];
  c = LatLon(gpsLat, gpsLon);
  for (key in controls) {
    control = controls[key];
    [x, y, littera, lat, lon] = control;
    b = LatLon(lat, lon);
    targets.push([key, littera, round(b.distanceTo(c))]);
  }
  return targets;
};

DATA = "gpsKarta";

WIDTH = null;

HEIGHT = null;

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = 1;

gps = null;

TRACKED = 5; // circles shows the player's position

position = null; // gps position (pixels)

track = []; // five latest GPS positions (pixels)

trail = []; // all gps points

takes = []; // all littera takes

speaker = null;

img = null;

soundUp = null;

soundDown = null;

soundQueue = 0; // neg=minskat avstånd pos=ökat avstånd

jcnindex = 0;

messages = [0, 1, 2, 3, 4, 5];

gpsCount = 0;

[gpsLat, gpsLon] = [0, 0];

[trgLat, trgLon] = [0, 0];

currentControl = "1";

timeout = null;

pastSayings = {}; // for preventing sayings every second.

//lastBearing = ''
//lastDistance = ''
w = null;

h = null;

released = true;

sendMail = function(subject, body) {
  mail.href = encodeURI(`mailto:${MAIL}?subject=${subject}&body=${body}`);
  return mail.click();
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  return speechSynthesis.speak(speaker);
};

preload = function() {
  return img = loadImage(FILENAME);
};

myround = function(x, dec = 6) {
  x *= 10 ** dec;
  x = Math.round(x);
  return x / 10 ** dec;
};

//show = (prompt,p) -> print prompt,"http://maps.google.com/maps?q=#{p.lat},#{p.lon}"	
vercal = function(a, b, y) {
  var lat, lon, x;
  x = map(y, a.y, b.y, a.x, b.x);
  lat = map(y, a.y, b.y, a.lat, b.lat);
  lon = map(y, a.y, b.y, a.lon, b.lon);
  return {lat, lon, x, y};
};

hortal = function(a, b, x) {
  var lat, lon, y;
  y = map(x, a.x, b.x, a.y, b.y);
  lat = map(x, a.x, b.x, a.lat, b.lat);
  lon = map(x, a.x, b.x, a.lon, b.lon);
  return {lat, lon, x, y};
};

corner = function(a, b, c, d, x, y) {
  var lat, lon;
  lat = map(y, c.y, d.y, c.lat, d.lat);
  lon = map(x, a.x, b.x, a.lon, b.lon);
  return {lat, lon, x, y};
};

makeCorners = function() {
  var ab0, ab1, ac0, ac1, bd0, bd1, cd0, cd1, ne, nw, se, sw;
  ac0 = vercal(A, C, 0); // beräkna x
  ac1 = vercal(A, C, HEIGHT);
  bd0 = vercal(B, D, 0);
  bd1 = vercal(B, D, HEIGHT);
  ab0 = hortal(A, B, 0); // beräkna y
  ab1 = hortal(A, B, WIDTH);
  cd0 = hortal(C, D, 0);
  cd1 = hortal(C, D, WIDTH);
  nw = corner(ac0, bd0, ab0, cd0, 0, 0); // beräkna hörnen
  ne = corner(ac0, bd0, ab1, cd1, WIDTH, 0);
  se = corner(ac1, bd1, ab1, cd1, WIDTH, HEIGHT);
  sw = corner(ac1, bd1, ab0, cd0, 0, HEIGHT);
  return gps = new GPS(nw, ne, se, sw, WIDTH, HEIGHT);
};

// coarse = (x) ->
// 	n = Math.round(x).toString().length
// 	myround(x,1-n).toString()
// assert '4000', coarse 3917.5	
// assert '400', coarse 421.2	
// assert '40', coarse 36.8
// assert '5', coarse 5.4
// assert '5', coarse 4.6
sayDistance = function(a, b) { // a is newer
  var d, distance, j, len, now;
// anropa say om någon gräns passeras
// if a border is crossed, play a sound
  for (j = 0, len = DISTLIST.length; j < len; j++) {
    d = DISTLIST[j];
    if ((a - d) * (b - d) < 0) {
      distance = a >= LIMIT ? 'distans ' + d : d;
      now = Date.now();
      if (!(distance in pastSayings)) {
        pastSayings[distance] = 0;
      }
      if (now > pastSayings[distance] + 2000) { // ms
        pastSayings[distance] = now;
        say(distance);
      }
      return;
    }
  }
};

// eventuellt kräva tio sekunder sedan föregående bäring sades
sayBearing = function(a, b) { // a is newer
  var bearing, c, d, now, tr;
  // if a border is crossed, tell the new bearing
  a = Math.round(a / 10);
  b = Math.round(b / 10);
  if (a !== b) { // 0..35
    if (a === 0) {
      a = 36;
    }
    tr = 'nolla ett tvåa trea fyra femma sexa sju åtta nia'.split(' ');
    c = tr[Math.floor(a / 10)];
    d = tr[modulo(a, 10)];
    bearing = 'bäring ' + c + ' ' + d;
    now = Date.now();
    if (!(bearing in pastSayings)) {
      pastSayings[bearing] = 0;
    }
    if (now > pastSayings[bearing] + 2000) { // ms
      pastSayings[bearing] = now;
      return say(bearing);
    }
  }
};

soundIndicator = function(p) {
  var a, b, bearinga, bearingb, c, dista, distance, distb;
  trail.push(`${p.coords.latitude} ${p.coords.longitude} ${stdDateTime(new Date())}`);
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  dista = a.distanceTo(c);
  distb = b.distanceTo(c);
  distance = Math.round((dista - distb) / DIST);
  sayDistance(dista, distb);
  bearinga = a.bearingTo(c);
  bearingb = b.bearingTo(c);
  if (dista >= LIMIT) {
    sayBearing(bearinga, bearingb);
  }
  if (abs(DIST * distance) < 10) {
    messages[3] = `${DIST * distance
// abs dista-distb
} m/s`;
  } else {
    messages[3] = '';
  }
  if (distance !== 0) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = p.coords.latitude;
    gpsLon = p.coords.longitude;
  }
  if (abs(distance) < 10) {
    return soundQueue = distance; // ett antal DIST
  }
};

playSound = function() {
  if (soundQueue === 0) {
    return;
  }
  if (soundQueue < 0 && soundDown !== null) {
    soundQueue++;
    soundDown.play();
  } else if (soundQueue > 0 && soundUp !== null) {
    soundQueue--;
    soundUp.play();
  }
  messages[4] = soundQueue;
  if (soundQueue === 0) {
    return xdraw();
  }
};

locationUpdate = function(p) {
  gpsCount++;
  messages[5] = gpsCount;
  soundIndicator(p);
  position = gps.gps2bmp(gpsLat, gpsLon);
  track.push(position);
  if (track.length > TRACKED) {
    track.shift();
  }
  xdraw();
  return position;
};

locationUpdateFail = function(error) {
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['Check location permissions'];
  }
};

initSpeaker = function(index) {
  var voices;
  soundUp = loadSound('soundUp.wav');
  soundDown = loadSound('soundDown.wav');
  soundUp.setVolume(0.1);
  soundDown.setVolume(0.1);
  clearInterval(timeout);
  timeout = setInterval(playSound, DELAY);
  soundQueue = 0;
  speaker = new SpeechSynthesisUtterance();
  voices = speechSynthesis.getVoices();
  speaker.voice = voices[jcnindex];
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 0.8;
  speaker.pitch = 0.8;
  speaker.text = '';
  speaker.lang = 'sv-SE';
  dialogues.clear();
  say(`speaker ${jcnindex}`);
  return jcnindex++;
};

setup = function() {
  var canvas, x, x1, x2, y, y1, y2;
  canvas = createCanvas(innerWidth - 0.5, innerHeight - 0.5);
  canvas.position(0, 0); // hides text field used for clipboard copy.
  platform = window.navigator.platform;
  w = width / 8;
  h = height / 4;
  angleMode(DEGREES);
  WIDTH = img.width;
  HEIGHT = img.height;
  SCALE = 1;
  [cx, cy] = [width, height];
  makeCorners();
  setTarget(_.keys(controls)[0]);
  x = width / 2;
  y = height / 2;
  x1 = 100;
  x2 = width - 100;
  y1 = 100;
  y2 = height - 100;
  // initControls()
  getControls();
  position = [WIDTH / 2, HEIGHT / 2];
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  xdraw();
  return addEventListener('touchstart', function(evt) {
    var mx, my, touch, touches;
    touches = evt.changedTouches;
    touch = touches[touches.length - 1];
    mx = touch.pageX;
    my = touch.pageY;
    return myMousePressed(mx, my);
  });
};

drawTrack = function() {
  var i, j, len, x, y;
  push();
  fc();
  sw(4);
  sc(0); // BLACK
  translate(width / 2, height / 2);
  scale(SCALE);
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    [x, y] = track[i];
    circle(x - cx, y - cy, 10 * (track.length - i));
  }
  return pop();
};

drawControl = function() {
  var bearing, control, latLon1, latLon2, x, y;
  latLon2 = LatLon(trgLat, trgLon);
  latLon1 = LatLon(gpsLat, gpsLon);
  bearing = latLon1.bearingTo(latLon2);
  messages[0] = `${int(bearing)}º`;
  messages[1] = currentControl;
  messages[2] = `${Math.round(latLon1.distanceTo(latLon2))} m`;
  control = controls[currentControl];
  console.log(currentControl, control);
  x = control[0];
  y = control[1];
  push();
  sc();
  fc(0, 0, 0, 0.25);
  translate(width / 2, height / 2);
  scale(SCALE);
  circle(x - cx, y - cy, 75);
  return pop();
};

xdraw = function() {
  var i, j, len, margin, message;
  bg(0, 1, 0);
  fc();
  image(img, 0, 0, width, height, cx - width / SCALE / 2, cy - height / SCALE / 2, width / SCALE, height / SCALE);
  drawTrack();
  drawControl();
  textSize(100);
  fc(0);
  sc(1, 1, 0);
  sw(3);
  margin = 25;
  for (i = j = 0, len = messages.length; j < len; i = ++j) {
    message = messages[i];
    textAlign([LEFT, CENTER, RIGHT][i % 3], [TOP, BOTTOM][Math.floor(i / 3)]);
    text(message, [margin, width / 2, width - margin][i % 3], [margin, height][Math.floor(i / 3)]);
  }
  return showDialogue();
};

setTarget = function(key) {
  var control, x, y;
  if (!(key in controls)) {
    return;
  }
  if (controls[currentControl] === null) {
    return;
  }
  soundQueue = 0;
  currentControl = key;
  console.log(currentControl, controls);
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  [trgLat, trgLon] = gps.bmp2gps(x, y);
  return dialogues.clear();
};

executeMail = function() { // Sends the trail and all the takes
  var s;
  s = takes.join("\n");
  s += "\n\n";
  s += trail.join("\n");
  sendMail(`Takes:${takes.length} Trail:${trail.length}`, s);
  takes = [];
  return trail = [];
};

//#########################
Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

getBike = function() {
  return setTarget('bike');
};

setBike = function() {
  var x, y;
  [x, y] = gps.gps2bmp(gpsLat, gpsLon);
  controls.bike = [x, y, '', gpsLat, gpsLon];
  return dialogues.clear();
};

menu1 = function() { // Main Menu
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Pan Zoom', function() {
    return menu2();
  });
  dialogue.add('Goto Bike', function() {
    return setTarget('bike');
  });
  dialogue.add('Take', function() {
    return menu4();
  });
  dialogue.add('More', function() {
    return menu6();
  });
  dialogue.add('Center', function() {
    [cx, cy] = position;
    dialogues.clear();
    return xdraw();
  });
  dialogue.add('Speaker', function() {
    return initSpeaker(5);
  });
  dialogue.add('Target', function() {
    return menu3();
  });
  dialogue.add('Store Bike', function() {
    return setBike();
  });
  dialogue.clock(' ', true);
  return dialogue.textSize *= 1.5;
};

menu2 = function() { // Pan Zoom
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Up', function() {
    return cy -= 0.33 * height / SCALE;
  });
  dialogue.add(' ', function() {}); // Not Used
  dialogue.add('Right', function() {
    return cx += 0.33 * width / SCALE;
  });
  dialogue.add('Out', function() {
    if (SCALE > 0.5) {
      return SCALE /= 1.5;
    }
  });
  dialogue.add('Down', function() {
    return cy += 0.33 * height / SCALE;
  });
  dialogue.add('In', function() {
    return SCALE *= 1.5;
  });
  dialogue.add('Left', function() {
    return cx -= 0.33 * width / SCALE;
  });
  dialogue.add(' ', function() {}); // Not used
  return dialogue.clock();
};

menu3 = function() { // Target
  var dialogue, lst;
  dialogue = new Dialogue(0, 0);
  targets = makeTargets();
  lst = targets.slice();
  lst = lst.sort(function(a, b) {
    return a[2] - b[2];
  });
  return dialogue.list(lst, 8, false, function(arr) {
    if (arr.length > 0) {
      setTarget(arr[0]);
    }
    return dialogues.clear();
  });
};

menu4 = function() { // Take
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('ABCDE', function() {
    return menu5('ABCDE');
  });
  dialogue.add('FGHIJ', function() {
    return menu5('FGHIJ');
  });
  dialogue.add('KLMNO', function() {
    return menu5('KLMNO');
  });
  dialogue.add('PQRST', function() {
    return menu5('PQRST');
  });
  dialogue.add('UVWXYZ', function() {
    return menu5('UVWXYZ');
  });
  return dialogue.clock();
};

menu6 = function() { // More
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Mail', function() {
    return executeMail();
  });
  dialogue.add('Clear', function() {
    clearControls();
    return dialogues.clear();
  });
  return dialogue.clock();
};

addZero = function(n) {
  if (n <= 9) {
    return "0" + n;
  } else {
    return n;
  }
};

stdDateTime = function(date) {
  var M, d, m, s, y;
  y = date.getFullYear();
  m = addZero(date.getMonth() + 1);
  d = addZero(date.getDate());
  h = addZero(date.getHours());
  M = addZero(date.getMinutes());
  s = addZero(date.getSeconds());
  return `${y}-${m}-${d} ${h}:${M}:${s}`;
};

update = function(littera, index = 2) {
  var a, b, control, x, y;
  control = controls[currentControl];
  a = LatLon(control[3], control[4]);
  b = LatLon(gpsLat, gpsLon);
  [x, y] = gps.gps2bmp(gpsLat, gpsLon);
  print(x, y);
  takes.push(`[${x}, ${y},'', ${gpsLat}, ${gpsLon}] ${stdDateTime(new Date())} ${currentControl} ${littera} (${Math.round(a.distanceTo(b))})`);
  controls[currentControl][index] = littera;
  saveControls();
  dialogues.clear();
  return getBike();
};

menu5 = function(letters) { // ABCDE
  var dialogue, j, len, letter;
  dialogue = new Dialogue();
  for (j = 0, len = letters.length; j < len; j++) {
    letter = letters[j];
    dialogue.add(letter, function() {
      return update(this.title);
    });
  }
  return dialogue.clock();
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

mouseReleased = function() {
  released = true;
  return false;
};

myMousePressed = function(mx, my) {
  var dialogue;
  if (!released) {
    return false;
  }
  released = false;
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mx, my)) {
    if (dialogues.length === 0) {
      menu1();
    } else {
      dialogues.pop();
    }
    xdraw();
    return false;
  }
  xdraw();
  return false;
};

mousePressed = function() {
  if (platform === 'Win32') {
    myMousePressed(mouseX, mouseY);
  }
  return false;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxjQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLEdBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxZQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxjQUFBLEVBQUEsa0JBQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLGNBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxZQUFBLEVBQUEsU0FBQSxFQUFBLGNBQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFB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QUMsT0FBVCxDQUFpQixFQUFqQixFQUFvQixFQUFwQixDQUFoQztJQUNDLElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBdkI7TUFBOEIsS0FBQSxDQUFBLEVBQTlCO0tBQUEsTUFBQTtNQUEyQyxTQUFTLENBQUMsR0FBVixDQUFBLEVBQTNDOztJQUNBLEtBQUEsQ0FBQTtBQUNBLFdBQU8sTUFIUjs7RUFLQSxLQUFBLENBQUE7U0FDQTtBQWJnQjs7QUFlakIsWUFBQSxHQUFlLFFBQUEsQ0FBQSxDQUFBO0VBQ2QsSUFBRyxRQUFBLEtBQVksT0FBZjtJQUE0QixjQUFBLENBQWUsTUFBZixFQUFzQixNQUF0QixFQUE1Qjs7U0FDQTtBQUZjIiwic291cmNlc0NvbnRlbnQiOlsiREVMQVkgPSAxMDAgIyBtcywgZGVsYXkgYmV0d2VlbiBzb3VuZHNcclxuRElTVCA9IDEgIyBtZXRlci4gTW92ZW1lbnQgbGVzcyB0aGFuIERJU1QgbWFrZXMgbm8gc291bmQgMT13YWxrLiA1PWJpa2VcclxuTElNSVQgPSAyMCAjIG1ldGVyLiBVbmRlciB0aGlzLCBubyBiZWFyaW5nLiBBbHNvIGRpc3RhbmNlIHZvaWNlIGV2ZXJ5IG1ldGVyLlxyXG5cclxuRElTVExJU1QgPSBbMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMzAsNDAsNTAsNjAsNzAsODAsOTAsMTAwLDEyMCwxNDAsMTYwLDE4MCwyMDAsMjUwLDMwMCw0MDAsNTAwLDYwMCw3MDAsODAwLDkwMCwxMDAwLDIwMDAsMzAwMCw0MDAwLDUwMDAsNjAwMCw3MDAwLDgwMDAsOTAwMCwxMDAwMF1cclxuTUFJTCA9ICdqYW5jaHJpc3Rlci5uaWxzc29uQGdtYWlsLmNvbSdcclxuXHJcbnNwYXJhID0gKGxhdCxsb24sIHgseSkgLT4ge2xhdCxsb24sIHgseX1cclxuXHJcbiMgMjAxOS1Tb21tYXJOXHJcblxyXG4jIEEgPSBzcGFyYSA1OS4yOTg3OTIxLCAxOC4xMjg0MDczLCA0NzIsIDYxNyAjIGtvbnRyb2xsICA1XHJcbiMgQiA9IHNwYXJhIDU5LjI5ODU0MDUsIDE4LjE2OTkwOTgsNDM2MSwgNTAzICMga29udHJvbGwgMTBcclxuIyBDID0gc3BhcmEgNTkuMjg1MTM3NCwgMTguMTMzNjU5MiwxMDkwLDMxMDQgIyBrb250cm9sbCAzMVxyXG4jIEQgPSBzcGFyYSA1OS4yODQ0OTk4LCAxOC4xNjY2OTQ2LDQxODEsMzA2OSAjIGtvbnRyb2xsIDE3XHJcblxyXG4jIEZJTEVOQU1FID0gJzIwMTktU29tbWFyTi5qcGcnIFxyXG5cclxuIyBjb250cm9scyA9ICMgaWQ6IFt4LHksbGl0dGVyYSxsYXQsbG9uXVxyXG4jIFx0JzEnOiBbMTgzMCwzMzMsJycsMCwwXSBcclxuIyBcdCcyJzogWzE1MDYsNTIxLCcnLDAsMF1cclxuIyBcdCczJzogWzkwNyw3MTEsJycsMCwwXVxyXG4jIFx0JzQnOiBbMTE5Myw4NzMsJycsMCwwXVxyXG4jIFx0JzUnOiBbNDcyLDYxNywnJywwLDBdXHJcbiMgXHQnNic6IFsyMjgsODQxLCcnLDAsMF1cclxuIyBcdCc3JzogWzY3MiwxMDEzLCcnLDAsMF1cclxuIyBcdCc4JzogWzExMjUsMTE5NiwnJywwLDBdXHJcbiMgXHQnOSc6IFsxNDMwLDEyOTAsJycsMCwwXVxyXG4jIFx0JzEwJzogWzQzNjEsNTAzLCcnLDAsMF1cclxuIyBcdCcxMSc6IFs0MTE4LDExMDYsJycsMCwwXVxyXG4jIFx0JzEyJzogWzM4MzAsNjQwLCcnLDAsMF1cclxuIyBcdCcxMyc6IFszMTkyLDExMzMsJycsMCwwXVxyXG4jIFx0JzE0JzogWzI2NjQsODczLCcnLDAsMF1cclxuIyBcdCcxNSc6IFsyMzIyLDE4NjIsJycsMCwwXVxyXG4jIFx0JzE2JzogWzQxMjAsMjY5OSwnJywwLDBdXHJcbiMgXHQnMTcnOiBbNDE4MSwzMDY5LCcnLDAsMF1cclxuIyBcdCcxOSc6IFszMzQwLDI5MDQsJycsMCwwXVxyXG4jIFx0JzIwJzogWzI2OTEsMjU1NCwnJywwLDBdXHJcbiMgXHQnMjQnOiBbMzM2NiwzMjE3LCcnLDAsMF1cclxuIyBcdCcyNic6IFszOTAsMTkzNSwnJywwLDBdXHJcbiMgXHQnMjcnOiBbNTQ3LDIxNDMsJycsMCwwXVxyXG4jIFx0JzI4JzogWzE0NjIsMjI5MywnJywwLDBdXHJcbiMgXHQnMjknOiBbMTA1NSwyNjIwLCcnLDAsMF1cclxuIyBcdCczMCc6IFszNzEsMjUwMiwnJywwLDBdXHJcbiMgXHQnMzEnOiBbMTA5MCwzMTA0LCcnLDAsMF1cclxuIyBcdCczMic6IFsyMjUwLDI3NTAsJycsMCwwXVxyXG5cclxuIyAyMDE5LVNvbW1hclNcclxuXHJcbiMgQSA9IHNwYXJhIDU5LjI4MDE3MTYsIDE4LjE1MjYwOSwgIDI4OTQsNDg1ICAjIDM4IFBcclxuIyBCID0gc3BhcmEgNTkuMjgxMDUzNCwgMTguMTY3NjI4MSwgNDMwMywyNTUgICMgMjEgQlxyXG4jIEMgPSBzcGFyYSA1OS4yNjc3MDEzLCAxOC4xNTQ4OTIxLCAzMjMxLDI3NTcgIyA1MCBLXHJcbiMgRCA9IHNwYXJhIDU5LjI2ODcxNDQsIDE4LjE2NjAyNjMsIDQyNTYsMjUxNCAjIDQ4IE1cclxuXHJcbiMgQSA9IHNwYXJhIDU5LjI3OTE1NywgMTguMTQ5MzEzLCAyNTk5LDY3NiAjIE1lbGxhbmJyb25cclxuIyBCID0gc3BhcmEgNTkuMjc1MTI5LCAxOC4xNjk1OTAsIDQ1MzEsMTMyOCAjIFVsdnNqw7ZuIFbDpG5kcGxhbiBIdXNldFxyXG4jIEMgPSBzcGFyYSA1OS4yNzAwNzIsIDE4LjE1MDIyOSwgMjc2MywyMzM0ICMgQnJvdG9ycHNicm9uXHJcbiMgRCA9IHNwYXJhIDU5LjI2Nzg5NCwgMTguMTY3MDg3LCA0MzM5LDI2NDUgIyDDhGx0YSBodXNldFxyXG5cclxuRklMRU5BTUUgPSAnMjAyMC1WaW50ZXIuanBnJyBcclxuXHJcbkEgPSBzcGFyYSA1OS4yODU2MjQsIDE4LjE1MDcwOSwgMzM4LDE0OTEgIyDDlnZyZSBicm9uIMOWXHJcbkIgPSBzcGFyYSA1OS4yODMwNDgsIDE4LjE3OTkwMiwgNDI5OSwxOTQ4ICMgU3RvcmEgZsOlcmh1c2V0XHJcbkMgPSBzcGFyYSA1OS4yNzAwNzcsIDE4LjE1MDMzOSwgNDg4LDU1NjYgIyBCcm90b3Jwc2Jyb24gw5ZcclxuRCA9IHNwYXJhIDU5LjI2OTQ5NiwgMTguMTY4NzM5LCAyOTYzLDU1OTYgIyBCZXJnc8OkdHJhdi9LbGlzw6R0cmF2XHJcblxyXG5jb250cm9scyA9IFxyXG5cdCMnQnJvdG9ycCc6ICAgICA1OS4yNzA1NjU4IDE4LjE0ODAxNzkgMjAxOS0wNS0yMCAxODozMjoxNSA0MyBCICg3OTQpXHJcblx0IydTa2FycG7DpGNrIFQnOiA1OS4yNjYyMjI2IDE4LjEzMzE1NjEgMjAxOS0wNS0yMCAxODozNzoyNSBiaWtlIFMgKDk3MylcclxuXHQxOiBbNjA0LDYwNjksJycsMCwwXVxyXG5cdDI6IFsxNDE1LDYxNTMsJycsMCwwXVxyXG5cdDM6IFs5MTgsNTUyNSwnJywwLDBdXHJcblx0NDogWzIxNTcsNTg0MSwnJywwLDBdXHJcblx0NTogWzE4NzIsNTI2MSwnJywwLDBdXHJcblx0NjogWzE0MzAsNDQ4NSwnJywwLDBdXHJcblx0NzogWzI0NjAsNDYyOSwnJywwLDBdXHJcblx0ODogWzE4MjgsNDA0NCwnJywwLDBdXHJcblx0OTogWzExMzAsMzA0MiwnJywwLDBdXHJcblx0MTA6IFsxMzcxLDI0NzksJycsMCwwXVxyXG5cdDExOiBbMTA4OCwxNjU2LCcnLDAsMF1cclxuXHQxMjogWzE2NjksMTY4NCwnJywwLDBdXHJcblx0MTM6IFsyNDYxLDIwOTIsJycsMCwwXVxyXG5cdDE0OiBbMzUwMywxNjc1LCcnLDAsMF1cclxuXHQxNTogWzM5NjUsMjE2NywnJywwLDBdXHJcblx0MTY6IFs0MDY0LDI3MTYsJycsMCwwXVxyXG5cdDE3OiBbMzUzOSwzMDk3LCcnLDAsMF1cclxuXHQxODogWzI3MjQsMzEwOCwnJywwLDBdXHJcblx0MTk6IFszMjgyLDM2OTcsJycsMCwwXVxyXG5cdDIwOiBbMjY3Niw0MTg5LCcnLDAsMF1cclxuIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbnRhcmdldHMgPSBbXSAjIFtpZCwgbGl0dGVyYSwgZGlzdGFuY2VdXHJcbnBsYXRmb3JtID0gbnVsbFxyXG5cclxuc2F2ZUNvbnRyb2xzID0gLT4gbG9jYWxTdG9yYWdlLmdwc0thcnRhID0gSlNPTi5zdHJpbmdpZnkgY29udHJvbHNcclxuZ2V0Q29udHJvbHMgPSAtPlxyXG5cdHRyeVxyXG5cdFx0Y29udHJvbHMgPSBKU09OLnBhcnNlIGxvY2FsU3RvcmFnZS5ncHNLYXJ0YVxyXG5cdGNhdGNoXHJcblx0XHRpbml0Q29udHJvbHMoKVxyXG5jbGVhckNvbnRyb2xzID0gLT5cclxuXHRmb3Iga2V5LGNvbnRyb2wgb2YgY29udHJvbHNcclxuXHRcdGNvbnRyb2xbMl0gPSAnJ1xyXG5cdHNhdmVDb250cm9scygpXHJcbmluaXRDb250cm9scyA9IC0+XHJcblx0Zm9yIGtleSxjb250cm9sIG9mIGNvbnRyb2xzXHJcblx0XHRbeCx5LGxpdHRlcmFdID0gY29udHJvbFxyXG5cdFx0W2xhdCxsb25dID0gZ3BzLmJtcDJncHMgeCx5XHJcblx0XHRjb250cm9sWzNdID0gbGF0XHJcblx0XHRjb250cm9sWzRdID0gbG9uXHJcblxyXG5tYWtlVGFyZ2V0cyA9IC0+XHJcblx0dGFyZ2V0cyA9IFtdXHJcblx0YyA9IExhdExvbiBncHNMYXQsIGdwc0xvbiBcclxuXHRmb3Iga2V5LGNvbnRyb2wgb2YgY29udHJvbHNcclxuXHRcdFt4LHksbGl0dGVyYSxsYXQsbG9uXSA9IGNvbnRyb2xcclxuXHRcdGIgPSBMYXRMb24gbGF0LCBsb25cclxuXHRcdHRhcmdldHMucHVzaCBba2V5LCBsaXR0ZXJhLCByb3VuZCBiLmRpc3RhbmNlVG8oYyldXHJcblx0dGFyZ2V0c1xyXG5cclxuREFUQSA9IFwiZ3BzS2FydGFcIlxyXG5XSURUSCA9IG51bGxcclxuSEVJR0hUID0gbnVsbFxyXG5bY3gsY3ldID0gWzAsMF0gIyBjZW50ZXIgKGltYWdlIGNvb3JkaW5hdGVzKVxyXG5TQ0FMRSA9IDFcclxuXHJcbmdwcyA9IG51bGxcclxuVFJBQ0tFRCA9IDUgIyBjaXJjbGVzIHNob3dzIHRoZSBwbGF5ZXIncyBwb3NpdGlvblxyXG5wb3NpdGlvbiA9IG51bGwgIyBncHMgcG9zaXRpb24gKHBpeGVscylcclxudHJhY2sgPSBbXSAjIGZpdmUgbGF0ZXN0IEdQUyBwb3NpdGlvbnMgKHBpeGVscylcclxudHJhaWwgPSBbXSAjIGFsbCBncHMgcG9pbnRzXHJcbnRha2VzID0gW10gIyBhbGwgbGl0dGVyYSB0YWtlc1xyXG5cclxuc3BlYWtlciA9IG51bGxcclxuXHJcbmltZyA9IG51bGwgXHJcbnNvdW5kVXAgPSBudWxsXHJcbnNvdW5kRG93biA9IG51bGxcclxuc291bmRRdWV1ZSA9IDAgIyBuZWc9bWluc2thdCBhdnN0w6VuZCBwb3M9w7ZrYXQgYXZzdMOlbmRcclxuamNuaW5kZXggPSAwXHJcblxyXG5tZXNzYWdlcyA9IFswLDEsMiwzLDQsNV1cclxuZ3BzQ291bnQgPSAwXHJcblxyXG5bZ3BzTGF0LGdwc0xvbl0gPSBbMCwwXVxyXG5bdHJnTGF0LHRyZ0xvbl0gPSBbMCwwXVxyXG5jdXJyZW50Q29udHJvbCA9IFwiMVwiXHJcblxyXG50aW1lb3V0ID0gbnVsbFxyXG5cclxucGFzdFNheWluZ3MgPSB7fSAjIGZvciBwcmV2ZW50aW5nIHNheWluZ3MgZXZlcnkgc2Vjb25kLlxyXG4jbGFzdEJlYXJpbmcgPSAnJ1xyXG4jbGFzdERpc3RhbmNlID0gJydcclxuXHJcbncgPSBudWxsXHJcbmggPSBudWxsXHJcbnJlbGVhc2VkID0gdHJ1ZSBcclxuXHJcbnNlbmRNYWlsID0gKHN1YmplY3QsYm9keSkgLT5cclxuXHRtYWlsLmhyZWYgPSBlbmNvZGVVUkkgXCJtYWlsdG86I3tNQUlMfT9zdWJqZWN0PSN7c3ViamVjdH0mYm9keT0je2JvZHl9XCJcclxuXHRtYWlsLmNsaWNrKClcclxuXHJcbnNheSA9IChtKSAtPlxyXG5cdGlmIHNwZWFrZXIgPT0gbnVsbCB0aGVuIHJldHVybiBcclxuXHRzcGVlY2hTeW50aGVzaXMuY2FuY2VsKClcclxuXHRzcGVha2VyLnRleHQgPSBtXHJcblx0c3BlZWNoU3ludGhlc2lzLnNwZWFrIHNwZWFrZXJcclxuXHJcbnByZWxvYWQgPSAtPiBpbWcgPSBsb2FkSW1hZ2UgRklMRU5BTUVcclxuXHJcbm15cm91bmQgPSAoeCxkZWM9NikgLT5cclxuXHR4ICo9IDEwKipkZWNcclxuXHR4ID0gTWF0aC5yb3VuZCB4XHJcblx0eC8xMCoqZGVjXHJcblxyXG4jc2hvdyA9IChwcm9tcHQscCkgLT4gcHJpbnQgcHJvbXB0LFwiaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3E9I3twLmxhdH0sI3twLmxvbn1cIlx0XHJcblxyXG52ZXJjYWwgPSAoYSxiLHkpIC0+XHJcblx0eCA9IG1hcCB5LCBhLnksYi55LCBhLngsYi54XHJcblx0bGF0ID0gbWFwIHksIGEueSxiLnksIGEubGF0LGIubGF0XHJcblx0bG9uID0gbWFwIHksIGEueSxiLnksIGEubG9uLGIubG9uICBcclxuXHR7bGF0LGxvbix4LHl9IFx0XHJcblxyXG5ob3J0YWwgPSAoYSxiLHgpIC0+XHJcblx0eSA9IG1hcCB4LCBhLngsYi54LCBhLnksYi55XHJcblx0bGF0ID0gbWFwIHgsIGEueCxiLngsIGEubGF0LGIubGF0XHJcblx0bG9uID0gbWFwIHgsIGEueCxiLngsIGEubG9uLGIubG9uICBcclxuXHR7bGF0LGxvbix4LHl9IFx0XHJcblxyXG5jb3JuZXIgPSAoYSxiLGMsZCx4LHkpLT5cclxuXHRsYXQgPSBtYXAgeSwgYy55LGQueSwgYy5sYXQsZC5sYXQgIFxyXG5cdGxvbiA9IG1hcCB4LCBhLngsYi54LCBhLmxvbixiLmxvblxyXG5cdHtsYXQsbG9uLHgseX1cclxuXHJcbm1ha2VDb3JuZXJzID0gLT5cclxuXHJcblx0YWMwID0gdmVyY2FsIEEsQywwICBcdCAgICAgICAgICAgICAgICAgICMgYmVyw6RrbmEgeFxyXG5cdGFjMSA9IHZlcmNhbCBBLEMsSEVJR0hUXHJcblx0YmQwID0gdmVyY2FsIEIsRCwwXHJcblx0YmQxID0gdmVyY2FsIEIsRCxIRUlHSFRcclxuXHJcblx0YWIwID0gaG9ydGFsIEEsQiwwICAgICAgICAgICAgICAgICAgICAgICMgYmVyw6RrbmEgeVxyXG5cdGFiMSA9IGhvcnRhbCBBLEIsV0lEVEhcclxuXHRjZDAgPSBob3J0YWwgQyxELDBcclxuXHRjZDEgPSBob3J0YWwgQyxELFdJRFRIXHJcblxyXG5cdG53ID0gY29ybmVyIGFjMCxiZDAsYWIwLGNkMCwgMCwgICAgMFx0XHQjIGJlcsOka25hIGjDtnJuZW5cclxuXHRuZSA9IGNvcm5lciBhYzAsYmQwLGFiMSxjZDEsIFdJRFRILDBcclxuXHRzZSA9IGNvcm5lciBhYzEsYmQxLGFiMSxjZDEsIFdJRFRILEhFSUdIVFxyXG5cdHN3ID0gY29ybmVyIGFjMSxiZDEsYWIwLGNkMCwgMCwgICAgSEVJR0hUXHJcblxyXG5cdGdwcyA9IG5ldyBHUFMgbncsbmUsc2Usc3csV0lEVEgsSEVJR0hUXHJcblxyXG4jIGNvYXJzZSA9ICh4KSAtPlxyXG4jIFx0biA9IE1hdGgucm91bmQoeCkudG9TdHJpbmcoKS5sZW5ndGhcclxuIyBcdG15cm91bmQoeCwxLW4pLnRvU3RyaW5nKClcclxuIyBhc3NlcnQgJzQwMDAnLCBjb2Fyc2UgMzkxNy41XHRcclxuIyBhc3NlcnQgJzQwMCcsIGNvYXJzZSA0MjEuMlx0XHJcbiMgYXNzZXJ0ICc0MCcsIGNvYXJzZSAzNi44XHJcbiMgYXNzZXJ0ICc1JywgY29hcnNlIDUuNFxyXG4jIGFzc2VydCAnNScsIGNvYXJzZSA0LjZcclxuXHJcbnNheURpc3RhbmNlID0gKGEsYikgLT4gIyBhIGlzIG5ld2VyXHJcblx0IyBhbnJvcGEgc2F5IG9tIG7DpWdvbiBncsOkbnMgcGFzc2VyYXNcclxuXHQjIGlmIGEgYm9yZGVyIGlzIGNyb3NzZWQsIHBsYXkgYSBzb3VuZFxyXG5cdGZvciBkIGluIERJU1RMSVNUXHJcblx0XHRpZiAoYS1kKSAqIChiLWQpIDwgMFxyXG5cdFx0XHRkaXN0YW5jZSA9IGlmIGEgPj0gTElNSVQgdGhlbiAnZGlzdGFucyAnICsgZCBlbHNlIGRcclxuXHRcdFx0bm93ID0gRGF0ZS5ub3coKVxyXG5cdFx0XHRpZiBkaXN0YW5jZSBub3Qgb2YgcGFzdFNheWluZ3MgdGhlbiBwYXN0U2F5aW5nc1tkaXN0YW5jZV0gPSAwXHJcblx0XHRcdGlmIG5vdyA+IHBhc3RTYXlpbmdzW2Rpc3RhbmNlXSArIDIwMDAgIyBtc1xyXG5cdFx0XHRcdHBhc3RTYXlpbmdzW2Rpc3RhbmNlXSA9IG5vd1xyXG5cdFx0XHRcdHNheSBkaXN0YW5jZVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcbiMgZXZlbnR1ZWxsdCBrcsOkdmEgdGlvIHNla3VuZGVyIHNlZGFuIGbDtnJlZ8OlZW5kZSBiw6RyaW5nIHNhZGVzXHJcbnNheUJlYXJpbmcgPSAoYSxiKSAtPiAjIGEgaXMgbmV3ZXJcclxuXHQjIGlmIGEgYm9yZGVyIGlzIGNyb3NzZWQsIHRlbGwgdGhlIG5ldyBiZWFyaW5nXHJcblx0YSA9IE1hdGgucm91bmQgYS8xMFxyXG5cdGIgPSBNYXRoLnJvdW5kIGIvMTBcclxuXHRpZiBhICE9IGIgIyAwLi4zNVxyXG5cdFx0aWYgYSA9PSAwIHRoZW4gYSA9IDM2XHJcblx0XHR0ciA9ICdub2xsYSBldHQgdHbDpWEgdHJlYSBmeXJhIGZlbW1hIHNleGEgc2p1IMOldHRhIG5pYScuc3BsaXQgJyAnXHJcblx0XHRjID0gdHJbYS8vMTBdXHJcblx0XHRkID0gdHJbYSUlMTBdXHJcblx0XHRiZWFyaW5nID0gJ2LDpHJpbmcgJyArIGMgKyAnICcgKyBkXHJcblx0XHRub3cgPSBEYXRlLm5vdygpXHJcblx0XHRpZiBiZWFyaW5nIG5vdCBvZiBwYXN0U2F5aW5ncyB0aGVuIHBhc3RTYXlpbmdzW2JlYXJpbmddID0gMFxyXG5cdFx0aWYgbm93ID4gcGFzdFNheWluZ3NbYmVhcmluZ10gKyAyMDAwICMgbXNcclxuXHRcdFx0cGFzdFNheWluZ3NbYmVhcmluZ10gPSBub3dcclxuXHRcdFx0c2F5IGJlYXJpbmdcclxuXHJcbnNvdW5kSW5kaWNhdG9yID0gKHApIC0+XHJcblxyXG5cdHRyYWlsLnB1c2ggXCIje3AuY29vcmRzLmxhdGl0dWRlfSAje3AuY29vcmRzLmxvbmdpdHVkZX0gI3tzdGREYXRlVGltZSBuZXcgRGF0ZSgpfVwiXHJcblxyXG5cdGEgPSBMYXRMb24gcC5jb29yZHMubGF0aXR1ZGUscC5jb29yZHMubG9uZ2l0dWRlICMgbmV3ZXN0XHJcblx0YiA9IExhdExvbiBncHNMYXQsIGdwc0xvblxyXG5cdGMgPSBMYXRMb24gdHJnTGF0LCB0cmdMb24gIyB0YXJnZXRcclxuXHJcblx0ZGlzdGEgPSBhLmRpc3RhbmNlVG8gY1xyXG5cdGRpc3RiID0gYi5kaXN0YW5jZVRvIGNcclxuXHRkaXN0YW5jZSA9IE1hdGgucm91bmQgKGRpc3RhIC0gZGlzdGIpL0RJU1RcclxuXHJcblx0c2F5RGlzdGFuY2UgZGlzdGEsZGlzdGJcclxuXHRiZWFyaW5nYSA9IGEuYmVhcmluZ1RvIGNcclxuXHRiZWFyaW5nYiA9IGIuYmVhcmluZ1RvIGNcclxuXHRpZiBkaXN0YSA+PSBMSU1JVCB0aGVuIHNheUJlYXJpbmcgYmVhcmluZ2EsYmVhcmluZ2JcclxuXHJcblx0aWYgYWJzKERJU1QgKiBkaXN0YW5jZSkgPCAxMCBcclxuXHRcdG1lc3NhZ2VzWzNdID0gXCIje0RJU1QgKiBkaXN0YW5jZX0gbS9zXCIgIyBhYnMgZGlzdGEtZGlzdGJcclxuXHRlbHNlXHJcblx0XHRtZXNzYWdlc1szXSA9ICcnXHJcblxyXG5cdGlmIGRpc3RhbmNlICE9IDAgIyB1cGRhdGUgb25seSBpZiBESVNUIGRldGVjdGVkLiBPdGhlcndpc2Ugc29tZSBiZWVwcyB3aWxsIGJlIGxvc3QuXHJcblx0XHRncHNMYXQgPSBwLmNvb3Jkcy5sYXRpdHVkZVxyXG5cdFx0Z3BzTG9uID0gcC5jb29yZHMubG9uZ2l0dWRlXHJcblxyXG5cdGlmIGFicyhkaXN0YW5jZSkgPCAxMCB0aGVuIHNvdW5kUXVldWUgPSBkaXN0YW5jZSAjIGV0dCBhbnRhbCBESVNUXHJcblxyXG5wbGF5U291bmQgPSAtPlxyXG5cdGlmIHNvdW5kUXVldWUgPT0gMCB0aGVuIHJldHVyblxyXG5cdGlmIHNvdW5kUXVldWUgPCAwIGFuZCBzb3VuZERvd24gIT0gbnVsbFxyXG5cdFx0c291bmRRdWV1ZSsrXHJcblx0XHRzb3VuZERvd24ucGxheSgpXHJcblx0ZWxzZSBpZiBzb3VuZFF1ZXVlID4gMCBhbmQgc291bmRVcCAhPSBudWxsXHJcblx0XHRzb3VuZFF1ZXVlLS1cclxuXHRcdHNvdW5kVXAucGxheSgpXHJcblx0bWVzc2FnZXNbNF1cdD0gc291bmRRdWV1ZVxyXG5cdGlmIHNvdW5kUXVldWU9PTAgdGhlbiB4ZHJhdygpXHJcblxyXG5sb2NhdGlvblVwZGF0ZSA9IChwKSAtPlxyXG5cdGdwc0NvdW50KytcclxuXHRtZXNzYWdlc1s1XSA9IGdwc0NvdW50XHJcblx0c291bmRJbmRpY2F0b3IgcFxyXG5cclxuXHRwb3NpdGlvbiA9IGdwcy5ncHMyYm1wIGdwc0xhdCxncHNMb25cclxuXHJcblx0dHJhY2sucHVzaCBwb3NpdGlvblxyXG5cdGlmIHRyYWNrLmxlbmd0aCA+IFRSQUNLRUQgdGhlbiB0cmFjay5zaGlmdCgpXHJcblx0eGRyYXcoKVxyXG5cdHBvc2l0aW9uXHJcblxyXG5sb2NhdGlvblVwZGF0ZUZhaWwgPSAoZXJyb3IpIC0+XHRpZiBlcnJvci5jb2RlID09IGVycm9yLlBFUk1JU1NJT05fREVOSUVEIHRoZW4gbWVzc2FnZXMgPSBbJ0NoZWNrIGxvY2F0aW9uIHBlcm1pc3Npb25zJ11cclxuXHJcbmluaXRTcGVha2VyID0gKGluZGV4KSAtPlxyXG5cdHNvdW5kVXAgPSBsb2FkU291bmQgJ3NvdW5kVXAud2F2J1xyXG5cdHNvdW5kRG93biA9IGxvYWRTb3VuZCAnc291bmREb3duLndhdidcclxuXHRzb3VuZFVwLnNldFZvbHVtZSAwLjFcclxuXHRzb3VuZERvd24uc2V0Vm9sdW1lIDAuMVxyXG5cdGNsZWFySW50ZXJ2YWwgdGltZW91dFxyXG5cdHRpbWVvdXQgPSBzZXRJbnRlcnZhbCBwbGF5U291bmQsIERFTEFZXHJcblx0c291bmRRdWV1ZSA9IDBcdFxyXG5cclxuXHRzcGVha2VyID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgpXHJcblx0dm9pY2VzID0gc3BlZWNoU3ludGhlc2lzLmdldFZvaWNlcygpXHJcblx0c3BlYWtlci52b2ljZSA9IHZvaWNlc1tqY25pbmRleF1cdFxyXG5cdHNwZWFrZXIudm9pY2VVUkkgPSBcIm5hdGl2ZVwiXHJcblx0c3BlYWtlci52b2x1bWUgPSAxXHJcblx0c3BlYWtlci5yYXRlID0gMC44XHJcblx0c3BlYWtlci5waXRjaCA9IDAuOFxyXG5cdHNwZWFrZXIudGV4dCA9ICcnXHJcblx0c3BlYWtlci5sYW5nID0gJ3N2LVNFJ1xyXG5cdGRpYWxvZ3Vlcy5jbGVhcigpXHJcblx0c2F5IFwic3BlYWtlciAje2pjbmluZGV4fVwiXHJcblx0amNuaW5kZXgrK1xyXG5cclxuc2V0dXAgPSAtPlxyXG5cclxuXHRjYW52YXMgPSBjcmVhdGVDYW52YXMgaW5uZXJXaWR0aC0wLjUsIGlubmVySGVpZ2h0LTAuNVxyXG5cdGNhbnZhcy5wb3NpdGlvbiAwLDAgIyBoaWRlcyB0ZXh0IGZpZWxkIHVzZWQgZm9yIGNsaXBib2FyZCBjb3B5LlxyXG5cclxuXHRwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm1cclxuXHJcblx0dyA9IHdpZHRoLzhcclxuXHRoID0gaGVpZ2h0LzQgXHJcblx0YW5nbGVNb2RlIERFR1JFRVNcclxuXHJcblx0V0lEVEggPSBpbWcud2lkdGhcclxuXHRIRUlHSFQgPSBpbWcuaGVpZ2h0XHJcblxyXG5cdFNDQUxFID0gMVxyXG5cdFtjeCxjeV0gPSBbd2lkdGgsaGVpZ2h0XVxyXG5cdFxyXG5cdG1ha2VDb3JuZXJzKClcclxuXHRzZXRUYXJnZXQgXy5rZXlzKGNvbnRyb2xzKVswXVxyXG5cclxuXHR4ID0gd2lkdGgvMlxyXG5cdHkgPSBoZWlnaHQvMlxyXG5cdHgxID0gMTAwXHJcblx0eDIgPSB3aWR0aC0xMDBcclxuXHR5MSA9IDEwMFxyXG5cdHkyID0gaGVpZ2h0LTEwMFxyXG5cclxuXHQjIGluaXRDb250cm9scygpXHJcblx0Z2V0Q29udHJvbHMoKVxyXG5cclxuXHRwb3NpdGlvbiA9IFtXSURUSC8yLEhFSUdIVC8yXVxyXG5cclxuXHRuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbiBsb2NhdGlvblVwZGF0ZSwgbG9jYXRpb25VcGRhdGVGYWlsLFxyXG5cdFx0ZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlXHJcblx0XHRtYXhpbXVtQWdlOiAzMDAwMFxyXG5cdFx0dGltZW91dDogMjcwMDBcclxuXHJcblx0eGRyYXcoKVxyXG5cclxuXHRhZGRFdmVudExpc3RlbmVyICd0b3VjaHN0YXJ0JywgKGV2dCkgLT5cclxuXHRcdHRvdWNoZXMgPSBldnQuY2hhbmdlZFRvdWNoZXNcclxuXHRcdHRvdWNoID0gdG91Y2hlc1t0b3VjaGVzLmxlbmd0aC0xXVxyXG5cdFx0bXggPSB0b3VjaC5wYWdlWFxyXG5cdFx0bXkgPSB0b3VjaC5wYWdlWVxyXG5cdFx0bXlNb3VzZVByZXNzZWQgbXgsbXlcclxuXHJcbmRyYXdUcmFjayA9IC0+XHJcblx0cHVzaCgpXHJcblx0ZmMoKVxyXG5cdHN3IDRcclxuXHRzYyAwICMgQkxBQ0tcclxuXHR0cmFuc2xhdGUgd2lkdGgvMiwgaGVpZ2h0LzJcclxuXHRzY2FsZSBTQ0FMRVxyXG5cdGZvciBbeCx5XSxpIGluIHRyYWNrXHJcblx0XHRjaXJjbGUgeC1jeCwgeS1jeSwgMTAgKiAodHJhY2subGVuZ3RoLWkpXHJcblx0cG9wKClcclxuXHJcbmRyYXdDb250cm9sID0gLT5cclxuXHJcblx0bGF0TG9uMiA9IExhdExvbiB0cmdMYXQsdHJnTG9uXHJcblx0bGF0TG9uMSA9IExhdExvbiBncHNMYXQsZ3BzTG9uXHJcblxyXG5cdGJlYXJpbmcgPSBsYXRMb24xLmJlYXJpbmdUbyBsYXRMb24yXHJcblx0bWVzc2FnZXNbMF0gPSBcIiN7aW50IGJlYXJpbmd9wrpcIlxyXG5cdG1lc3NhZ2VzWzFdID0gY3VycmVudENvbnRyb2xcclxuXHRtZXNzYWdlc1syXSA9IFwiI3tNYXRoLnJvdW5kKGxhdExvbjEuZGlzdGFuY2VUbyBsYXRMb24yKX0gbVwiXHJcblxyXG5cdGNvbnRyb2wgPSBjb250cm9sc1tjdXJyZW50Q29udHJvbF1cclxuXHRjb25zb2xlLmxvZyBjdXJyZW50Q29udHJvbCxjb250cm9sXHJcblx0eCA9IGNvbnRyb2xbMF1cclxuXHR5ID0gY29udHJvbFsxXVxyXG5cclxuXHRwdXNoKClcclxuXHRzYygpXHJcblx0ZmMgMCwwLDAsMC4yNVxyXG5cdHRyYW5zbGF0ZSB3aWR0aC8yLCBoZWlnaHQvMlxyXG5cdHNjYWxlIFNDQUxFXHJcblx0Y2lyY2xlIHgtY3gsIHktY3ksIDc1XHJcblx0cG9wKClcclxuXHJcbnhkcmF3ID0gLT5cclxuXHRiZyAwLDEsMFxyXG5cdGZjKClcclxuXHRpbWFnZSBpbWcsIDAsMCwgd2lkdGgsaGVpZ2h0LCBjeC13aWR0aC9TQ0FMRS8yLCBjeS1oZWlnaHQvU0NBTEUvMiwgd2lkdGgvU0NBTEUsIGhlaWdodC9TQ0FMRVxyXG5cdGRyYXdUcmFjaygpXHJcblx0ZHJhd0NvbnRyb2woKVxyXG5cdHRleHRTaXplIDEwMFxyXG5cdGZjIDBcclxuXHRzYyAxLDEsMFxyXG5cdHN3IDNcclxuXHRtYXJnaW4gPSAyNVxyXG5cdGZvciBtZXNzYWdlLGkgaW4gbWVzc2FnZXNcclxuXHRcdHRleHRBbGlnbiBbTEVGVCxDRU5URVIsUklHSFRdW2klM10sIFtUT1AsQk9UVE9NXVtpLy8zXVxyXG5cdFx0dGV4dCBtZXNzYWdlLCBbbWFyZ2luLHdpZHRoLzIsd2lkdGgtbWFyZ2luXVtpJTNdLCBbbWFyZ2luLGhlaWdodF1baS8vM10gXHJcblx0c2hvd0RpYWxvZ3VlKClcclxuXHJcbnNldFRhcmdldCA9IChrZXkpIC0+XHJcblx0aWYga2V5IG5vdCBvZiBjb250cm9scyB0aGVuIHJldHVyblxyXG5cdGlmIGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXSA9PSBudWxsIHRoZW4gcmV0dXJuXHJcblx0c291bmRRdWV1ZSA9IDBcclxuXHRjdXJyZW50Q29udHJvbCA9IGtleVxyXG5cdGNvbnNvbGUubG9nIGN1cnJlbnRDb250cm9sLGNvbnRyb2xzXHJcblx0Y29udHJvbCA9IGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVxyXG5cdHggPSBjb250cm9sWzBdXHJcblx0eSA9IGNvbnRyb2xbMV1cclxuXHRbdHJnTGF0LHRyZ0xvbl0gPSBncHMuYm1wMmdwcyB4LHlcclxuXHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cclxuZXhlY3V0ZU1haWwgPSAtPiAjIFNlbmRzIHRoZSB0cmFpbCBhbmQgYWxsIHRoZSB0YWtlc1xyXG5cdHMgPSB0YWtlcy5qb2luIFwiXFxuXCJcclxuXHRzICs9IFwiXFxuXFxuXCJcclxuXHRzICs9IHRyYWlsLmpvaW4gXCJcXG5cIlxyXG5cdHNlbmRNYWlsIFwiVGFrZXM6I3t0YWtlcy5sZW5ndGh9IFRyYWlsOiN7dHJhaWwubGVuZ3RofVwiLCBzXHJcblx0dGFrZXMgPSBbXVxyXG5cdHRyYWlsID0gW11cclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG5BcnJheS5wcm90b3R5cGUuY2xlYXIgPSAtPiBAbGVuZ3RoID0gMFxyXG5hc3NlcnQgPSAoYSwgYiwgbXNnPSdBc3NlcnQgZmFpbHVyZScpIC0+IGNoYWkuYXNzZXJ0LmRlZXBFcXVhbCBhLCBiLCBtc2dcclxuXHJcbmdldEJpa2UgPSAtPiBzZXRUYXJnZXQgJ2Jpa2UnXHJcblxyXG5zZXRCaWtlID0gLT5cclxuXHRbeCx5XSA9IGdwcy5ncHMyYm1wIGdwc0xhdCxncHNMb25cclxuXHRjb250cm9scy5iaWtlID0gW3gseSwnJyxncHNMYXQsZ3BzTG9uXVxyXG5cdGRpYWxvZ3Vlcy5jbGVhcigpXHJcblxyXG5tZW51MSA9IC0+ICMgTWFpbiBNZW51XHJcblx0ZGlhbG9ndWUgPSBuZXcgRGlhbG9ndWUoKSBcclxuXHRkaWFsb2d1ZS5hZGQgJ1BhbiBab29tJywgLT4gbWVudTIoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnR290byBCaWtlJywgLT4gc2V0VGFyZ2V0ICdiaWtlJ1xyXG5cdGRpYWxvZ3VlLmFkZCAnVGFrZScsIC0+IG1lbnU0KClcclxuXHRkaWFsb2d1ZS5hZGQgJ01vcmUnLCAtPiBtZW51NigpXHJcblx0ZGlhbG9ndWUuYWRkICdDZW50ZXInLCAtPiBcclxuXHRcdFtjeCxjeV0gPSBwb3NpdGlvblxyXG5cdFx0ZGlhbG9ndWVzLmNsZWFyKClcdFxyXG5cdFx0eGRyYXcoKVx0XHJcblx0ZGlhbG9ndWUuYWRkICdTcGVha2VyJywgLT4gaW5pdFNwZWFrZXIgNVxyXG5cdGRpYWxvZ3VlLmFkZCAnVGFyZ2V0JywgLT4gbWVudTMoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnU3RvcmUgQmlrZScsIC0+IHNldEJpa2UoKVxyXG5cclxuXHRkaWFsb2d1ZS5jbG9jayAnICcsdHJ1ZVxyXG5cdGRpYWxvZ3VlLnRleHRTaXplICo9IDEuNVxyXG5cclxubWVudTIgPSAtPiAjIFBhbiBab29tXHJcblx0ZGlhbG9ndWUgPSBuZXcgRGlhbG9ndWUoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnVXAnLCAtPiBjeSAtPSAwLjMzKmhlaWdodC9TQ0FMRSAgXHJcblx0ZGlhbG9ndWUuYWRkICcgJywgLT4gIyBOb3QgVXNlZFxyXG5cdGRpYWxvZ3VlLmFkZCAnUmlnaHQnLCAtPiBjeCArPSAwLjMzKndpZHRoL1NDQUxFXHJcblx0ZGlhbG9ndWUuYWRkICdPdXQnLCAtPiBpZiBTQ0FMRSA+IDAuNSB0aGVuIFNDQUxFIC89IDEuNVxyXG5cdGRpYWxvZ3VlLmFkZCAnRG93bicsIC0+IGN5ICs9IDAuMzMqaGVpZ2h0L1NDQUxFXHJcblx0ZGlhbG9ndWUuYWRkICdJbicsIC0+IFNDQUxFICo9IDEuNVxyXG5cdGRpYWxvZ3VlLmFkZCAnTGVmdCcsIC0+IGN4IC09IDAuMzMqd2lkdGgvU0NBTEVcclxuXHRkaWFsb2d1ZS5hZGQgJyAnLCAtPiAjIE5vdCB1c2VkXHJcblx0ZGlhbG9ndWUuY2xvY2soKVxyXG5cclxubWVudTMgPSAtPiAjIFRhcmdldFxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlIDAsMFxyXG5cdHRhcmdldHMgPSBtYWtlVGFyZ2V0cygpXHJcblx0bHN0ID0gdGFyZ2V0cy5zbGljZSgpXHJcblx0bHN0ID0gbHN0LnNvcnQgKGEsYikgLT4gYVsyXSAtIGJbMl1cclxuXHRkaWFsb2d1ZS5saXN0IGxzdCwgOCwgZmFsc2UsIChhcnIpIC0+XHJcblx0XHRpZiBhcnIubGVuZ3RoID4gMCB0aGVuIHNldFRhcmdldCBhcnJbMF1cclxuXHRcdGRpYWxvZ3Vlcy5jbGVhcigpXHJcblxyXG5tZW51NCA9IC0+ICMgVGFrZVxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlKClcclxuXHRkaWFsb2d1ZS5hZGQgJ0FCQ0RFJywgLT4gbWVudTUgJ0FCQ0RFJ1xyXG5cdGRpYWxvZ3VlLmFkZCAnRkdISUonLCAtPiBtZW51NSAnRkdISUonXHJcblx0ZGlhbG9ndWUuYWRkICdLTE1OTycsIC0+IG1lbnU1ICdLTE1OTydcclxuXHRkaWFsb2d1ZS5hZGQgJ1BRUlNUJywgLT4gbWVudTUgJ1BRUlNUJ1xyXG5cdGRpYWxvZ3VlLmFkZCAnVVZXWFlaJywgLT4gbWVudTUgJ1VWV1hZWidcclxuXHRkaWFsb2d1ZS5jbG9jaygpXHJcblxyXG5tZW51NiA9IC0+ICMgTW9yZVxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlKClcclxuXHRkaWFsb2d1ZS5hZGQgJ01haWwnLCAtPiBleGVjdXRlTWFpbCgpXHJcblx0ZGlhbG9ndWUuYWRkICdDbGVhcicsIC0+IFxyXG5cdFx0Y2xlYXJDb250cm9scygpXHJcblx0XHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cdGRpYWxvZ3VlLmNsb2NrKClcclxuXHJcbmFkZFplcm8gPSAobikgLT4gaWYgbiA8PSA5IHRoZW4gXCIwXCIgKyBuIGVsc2UgblxyXG5cclxuc3RkRGF0ZVRpbWUgPSAoZGF0ZSkgLT5cclxuXHR5ID0gZGF0ZS5nZXRGdWxsWWVhcigpXHJcblx0bSA9IGFkZFplcm8gZGF0ZS5nZXRNb250aCgpICsgMVxyXG5cdGQgPSBhZGRaZXJvIGRhdGUuZ2V0RGF0ZSgpXHJcblx0aCA9IGFkZFplcm8gZGF0ZS5nZXRIb3VycygpXHJcblx0TSA9IGFkZFplcm8gZGF0ZS5nZXRNaW51dGVzKClcclxuXHRzID1cdGFkZFplcm8gZGF0ZS5nZXRTZWNvbmRzKClcclxuXHRcIiN7eX0tI3ttfS0je2R9ICN7aH06I3tNfToje3N9XCJcclxuXHJcbnVwZGF0ZSA9IChsaXR0ZXJhLGluZGV4PTIpIC0+XHJcblx0Y29udHJvbCA9IGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVxyXG5cdGEgPSBMYXRMb24gY29udHJvbFszXSxjb250cm9sWzRdIFxyXG5cdGIgPSBMYXRMb24gZ3BzTGF0LCBncHNMb24gXHJcblx0W3gseV0gPSBncHMuZ3BzMmJtcCBncHNMYXQsIGdwc0xvblxyXG5cdHByaW50IHgseVxyXG5cdHRha2VzLnB1c2ggXCJbI3t4fSwgI3t5fSwnJywgI3tncHNMYXR9LCAje2dwc0xvbn1dICN7c3RkRGF0ZVRpbWUgbmV3IERhdGUoKX0gI3tjdXJyZW50Q29udHJvbH0gI3tsaXR0ZXJhfSAoI3tNYXRoLnJvdW5kIGEuZGlzdGFuY2VUbyBifSlcIlxyXG5cdGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVtpbmRleF0gPSBsaXR0ZXJhXHJcblx0c2F2ZUNvbnRyb2xzKClcclxuXHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cdGdldEJpa2UoKVxyXG5cclxubWVudTUgPSAobGV0dGVycykgLT4gIyBBQkNERVxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlKCkgXHJcblx0Zm9yIGxldHRlciBpbiBsZXR0ZXJzXHJcblx0XHRkaWFsb2d1ZS5hZGQgbGV0dGVyLCAtPiB1cGRhdGUgQHRpdGxlXHJcblx0ZGlhbG9ndWUuY2xvY2soKVxyXG5cclxuc2hvd0RpYWxvZ3VlID0gLT4gaWYgZGlhbG9ndWVzLmxlbmd0aCA+IDAgdGhlbiAoXy5sYXN0IGRpYWxvZ3Vlcykuc2hvdygpXHJcblxyXG5tb3VzZVJlbGVhc2VkID0gLT5cclxuXHRyZWxlYXNlZCA9IHRydWVcclxuXHRmYWxzZVxyXG5cclxubXlNb3VzZVByZXNzZWQgPSAobXgsbXkpIC0+IFxyXG5cdGlmIG5vdCByZWxlYXNlZCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdHJlbGVhc2VkID0gZmFsc2UgXHJcblxyXG5cdGlmIGRpYWxvZ3Vlcy5sZW5ndGggPT0gMSBhbmQgZGlhbG9ndWVzWzBdLm51bWJlciA9PSAwIHRoZW4gZGlhbG9ndWVzLnBvcCgpICMgZMO2bGogaW5kaWthdG9yZXJcclxuXHJcblx0ZGlhbG9ndWUgPSBfLmxhc3QgZGlhbG9ndWVzXHJcblx0aWYgZGlhbG9ndWVzLmxlbmd0aCA9PSAwIG9yIG5vdCBkaWFsb2d1ZS5leGVjdXRlIG14LG15IFxyXG5cdFx0aWYgZGlhbG9ndWVzLmxlbmd0aCA9PSAwIHRoZW4gbWVudTEoKSBlbHNlIGRpYWxvZ3Vlcy5wb3AoKVxyXG5cdFx0eGRyYXcoKVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdHhkcmF3KClcclxuXHRmYWxzZSBcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+IFxyXG5cdGlmIHBsYXRmb3JtID09ICdXaW4zMicgdGhlbiBteU1vdXNlUHJlc3NlZCBtb3VzZVgsbW91c2VZXHJcblx0ZmFsc2VcclxuIl19
//# sourceURL=c:\github\gpsKarta\coffee\sketch.coffee