// Generated by CoffeeScript 2.4.1
var ANGLE, DELAY, DIST, DISTLIST, LIMIT, NR, SCALE, TRACKED, VERSION, addZero, assert, b2w, clearControls, controls, currentControl, cx, cy, data, draw, drawControl, drawControls, drawTrack, drawTrail, executeMail, getBike, getControls, gps, gpsCount, gpsLat, gpsLon, img, initControls, initSpeaker, jcnindex, lastBearing, lastDistance, locationUpdate, locationUpdateFail, makeTargets, menu1, menu2, menu3, menu4, menu5, menu6, menu7, messages, mousePressed, mouseReleased, myMousePressed, platform, playSound, position, preload, recordingTrail, released, saveControls, say, sayBearing, sayDistance, sendMail, setAngle, setBike, setTarget, setup, showDialogue, soundDown, soundIndicator, soundQueue, soundUp, spara, speaker, state, stdDateTime, targets, timeout, track, trail, trgLat, trgLon, update, voiceQueue, w2b, xdraw,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

VERSION = 17;

DELAY = 100; // ms, delay between sounds

DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike

LIMIT = 20; // meter. Under this, no bearing. Also distance voice every second meter.

ANGLE = 10; // degrees. Bearing resolution.

NR = null; // json file


// http://www.bvsok.se/Kartor/Skolkartor/
// Högupplösta orienteringskartor: https://www.omaps.net
// https://omaps.blob.core.windows.net/map-excerpts/1fdc587ffdea489dbd69e29b10b48395.jpeg Nackareservatet utan kontroller.
DISTLIST = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];

trail = []; // insert bitmap points from mail here

// [840,957], [842,943], [844,931], [855,925], [851,913], [842,903], [834,893], [828,882], [832,870], [833,858], [827,847], [818,839], [807,832], [800,822], [794,811], [787,801], [779,792], [767,787], [767,774], [767,760], [762,747], [754,738], [754,725], [754,711], [757,699], [756,687], [754,674], [754,661], [759,650], [757,638], [753,626], [746,615], [741,604], [741,591], [739,578], [738,566], [737,554], [734,542], [724,533], [714,525], [703,520], [691,516], [684,506], [684,493], [675,485], [672,473], [676,461], [680,449], [683,437], [686,425], [691,413], [692,401], [693,389], # A
// [694,382], [699,371], [706,360], [714,351], [726,347], [737,340], [749,339], [763,339], [775,340], [787,336], [800,336], [812,335], [822,328], [828,317], [836,308], [848,304], [860,303], [867,293], [872,282], [873,270], [883,262], [896,257], [908,253], [920,251], [932,247], [938,236], [947,227], # B
// [946,224], [956,233], [967,238], [978,245], [988,252], [996,262], [1007,268], [1017,276], [1027,283], [1040,286], [1052,284], [1064,285], [1077,285], [1089,288], [1102,289], [1111,297], [1121,290], [1130,282], [1143,283], [1156,280], [1168,274], [1179,269], [1191,268], [1203,266], [1215,268], [1226,273], [1239,273], [1250,279], [1263,280], [1268,291], [1279,286], [1291,283], [1300,275], [1312,271], [1323,266], [1333,273], [1346,273], [1359,269], [1372,272], [1382,279], [1394,281], [1407,280], [1416,288], # C
// [1417,285], [1429,287], [1440,293], [1451,299], [1459,309], [1471,313], [1484,313], [1496,314], [1508,318], [1517,310], [1528,315], [1540,317], [1552,316], [1564,317], [1575,322], [1587,326], [1599,330], [1611,327], [1621,319], [1633,314], [1644,320], [1652,330], [1663,335], [1676,335], [1688,337], [1701,337], [1713,338], [1725,342], [1737,343], [1749,342], [1760,347], [1773,352], [1784,358], [1796,361], [1808,365], [1821,365], [1834,365], [1846,367], [1858,369], [1870,368], [1882,364], [1893,369], [1903,376], [1910,386], [1923,386], [1934,391], [1944,398], [1955,403], [1966,409], [1978,413], [1989,418], [2001,420], [2011,427], [2020,435], [2032,433], [2043,439] , # D
// [2063,437], [2067,449], [2070,462], [2071,474], [2078,484], [2077,496], [2071,508], [2076,519], [2078,532], [2081,544], [2083,556], [2085,568], [2084,580], [2084,594], [2087,606], [2088,618], [2092,630], [2089,642], [2076,643], [2079,655], [2083,667], [2085,679], [2077,688], [2066,693], [2057,701], [2050,711], [2047,723], [2048,736], [2047,748], [2044,760], [2036,769], [2034,781], [2029,792], [2025,804], [2023,816], [2020,829], [2016,841], [2014,853], [2009,865], [1997,870], [1988,878], [1984,890], [1977,901], [1974,914], [1967,925], [1964,938], [1961,950], [1956,962], [1948,971], [1936,976], [1923,980], [1915,989], [1908,999], [1896,1004], [1883,1002], [1870,1003], [1857,1006], [1850,1016], [1851,1028], [1844,1039], [1835,1048], [1836,1060] , # E
// [1845,1072], [1844,1085], [1842,1097], [1830,1103], [1820,1110], [1809,1117], [1798,1123], [1786,1125], [1774,1126], [1762,1125], [1750,1129], [1738,1134], [1726,1133], [1723,1145], [1712,1150], [1702,1158], [1692,1166], [1686,1177], [1675,1183], [1666,1192], [1654,1195], [1665,1201], [1660,1213], [1664,1225], [1668,1237], [1670,1249], [1660,1256], [1647,1256], [1635,1259], [1623,1263], [1611,1267], [1601,1274], [1588,1276], [1576,1273], [1565,1278], [1554,1283], [1542,1281] , # F
// [1533,1269], [1521,1272], [1513,1282], [1508,1294], [1508,1310], [1499,1318], [1488,1323], [1477,1329], [1466,1334], [1456,1342], [1449,1353], [1441,1363], [1429,1365], [1420,1373], [1407,1374], [1395,1377], [1382,1380], [1370,1374], [1361,1382], [1349,1385], [1336,1384], [1324,1389], [1312,1391], [1300,1393], [1288,1394], [1276,1393], [1267,1402], [1255,1398], [1247,1407], [1235,1412], [1229,1423], [1223,1435], [1222,1447], [1216,1458], [1211,1469], [1203,1479], [1205,1491], [1200,1502], [1192,1511], [1182,1519], [1171,1524], [1159,1519], [1149,1511], [1145,1498], [1138,1487], [1126,1483], [1114,1480], [1105,1472], [1094,1477], [1082,1481], [1074,1490] # G
recordingTrail = false;

state = 0; // 0=uninitialized 1=initialized

spara = function(lat, lon, x, y) {
  return {lat, lon, x, y};
};

data = null;

img = null;

b2w = null;

w2b = null;

controls = {};

clearControls = function() {
  var currentControl, trgLat, trgLon;
  controls = data.controls;
  [trgLat, trgLon] = [0, 0];
  currentControl = null;
  initControls();
  return saveControls();
};

targets = []; // [id, littera, distance]

platform = null;

saveControls = function() {
  return localStorage['gpsKarta' + NR] = JSON.stringify(controls);
};

getControls = function() {
  try {
    return controls = JSON.parse(localStorage['gpsKarta' + NR]);
  } catch (error1) {
    return clearControls();
  }
};

initControls = function() {
  var control, gpsLat, gpsLon, key, lat, littera, lon, trgLat, trgLon, x, y, z99;
  for (key in controls) {
    control = controls[key];
    [x, y, littera] = control;
    [lon, lat] = b2w.convert(x, y);
    control[3] = lat;
    control[4] = lon;
  }
  if (currentControl !== null) {
    return [gpsLat, gpsLon, z99, trgLat, trgLon] = controls[currentControl];
  }
};

makeTargets = function() {
  var b, c, control, key, lat, littera, lon, x, y;
  targets = [];
  c = LatLon(gpsLat, gpsLon);
  for (key in controls) {
    control = controls[key];
    [x, y, littera, lat, lon] = control;
    b = LatLon(lat, lon);
    targets.push([key, littera, round(b.distanceTo(c))]);
  }
  return targets;
};

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = null;

gps = null;

TRACKED = 5; // circles shows the player's position

position = null; // gps position (pixels)

track = []; // five latest GPS positions (pixels)

speaker = null;

soundUp = null;

soundDown = null;

soundQueue = 0; // neg=minskat avstånd pos=ökat avstånd

jcnindex = 0;

messages = ['', '', '', '', '', ''];

gpsCount = 0;

[gpsLat, gpsLon] = [0, 0];

[trgLat, trgLon] = [0, 0];

currentControl = null;

timeout = null;

voiceQueue = [];

lastBearing = '';

lastDistance = '';

released = true;

sendMail = function(subject, body) {
  mail.href = encodeURI(`mailto:${data.mail}?subject=${subject}&body=${body}`);
  return mail.click();
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  //m = m.replace 'bäring ', ''
  //m = m.replace 'distans ', ''
  speaker.text = m;
  return speechSynthesis.speak(speaker);
};

preload = function() {
  var params;
  params = getParameters();
  NR = params.nr || 'skarpnäck';
  return loadJSON(`data/${NR}.json`, function(json) {
    var control, key, ref;
    data = json;
    ref = data.controls;
    for (key in ref) {
      control = ref[key];
      control.push("");
      control.push(0);
      control.push(0);
    }
    return img = loadImage("data/" + data.map);
  });
};

sayDistance = function(a, b) { // a is newer
  var d, j, len;
// if a border is crossed, play a sound
  for (j = 0, len = DISTLIST.length; j < len; j++) {
    d = DISTLIST[j];
    if ((a - d) * (b - d) < 0) {
      voiceQueue.push('distans ' + d);
      return;
    }
  }
};

// voiceQueue.push d
sayBearing = function(a, b) { // a is newer
  var c, d, tr;
  // if a border is crossed, tell the new bearing
  a = ANGLE * Math.round(a / ANGLE);
  b = ANGLE * Math.round(b / ANGLE);
  if (a === b) {
    return;
  }
  if (a === 0) {
    a = 360;
  }
  a = Math.round(a / 10);
  tr = 'nolla ett tvåa trea fyra femma sexa sju åtta nia'.split(' ');
  c = tr[Math.floor(a / tr.length)];
  d = tr[modulo(a, tr.length)];
  return voiceQueue.push('bäring ' + c + ' ' + d);
};

//voiceQueue.push c + ' ' + d
soundIndicator = function(p) {
  var a, b, bearinga, bearingb, c, dista, distance, distb;
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  dista = a.distanceTo(c);
  distb = b.distanceTo(c);
  distance = Math.round((dista - distb) / DIST);
  sayDistance(dista, distb);
  bearinga = a.bearingTo(c);
  bearingb = b.bearingTo(c);
  if (dista >= LIMIT) {
    sayBearing(bearinga, bearingb);
  }
  if (distance !== 0) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = p.coords.latitude;
    gpsLon = p.coords.longitude;
  }
  if (abs(distance) < 10) {
    return soundQueue = distance; // ett antal DIST
  }
};

playSound = function() {
  if (soundQueue === 0) {
    return;
  }
  if (soundQueue < 0 && soundDown !== null) {
    soundQueue++;
    soundDown.play();
  } else if (soundQueue > 0 && soundUp !== null) {
    soundQueue--;
    soundUp.play();
  }
  //messages[4]	= soundQueue
  if (soundQueue === 0) {
    return xdraw();
  }
};

locationUpdate = function(p) {
  var arr, msg, x1, x2, y1, y2;
  if (gpsLat !== 0) {
    position = w2b.convert(gpsLon, gpsLat);
    // console.log position
    messages[4] = myRound(gpsLon, 6) + ' ' + myRound(gpsLat, 6);
  }
  soundIndicator(p);
  gpsCount++;
  messages[5] = gpsCount;
  if (currentControl === null) {
    return;
  }
  if (voiceQueue.length > 0) {
    msg = voiceQueue.shift();
    if (0 === msg.indexOf('bäring')) {
      //if 0 == msg.indexOf ' '
      if (msg !== lastBearing) {
        lastBearing = msg;
        say(msg);
      }
    } else {
      arr = msg.split(' ');
      if (LIMIT > parseInt(arr[1])) {
        msg = arr[1];
      }
      if (msg !== lastDistance) {
        lastDistance = msg;
        say(msg);
      }
    }
  }
  if (recordingTrail) {
    if (trail.length === 0) {
      trail.push(position);
    } else {
      [x1, y1] = _.last(trail);
      [x2, y2] = position;
      if (12 < dist(x1, y1, x2, y2)) {
        trail.push(position);
      }
    }
  }
  track.push(position);
  if (track.length > TRACKED) {
    track.shift();
  }
  xdraw();
  return position;
};

locationUpdateFail = function(error) {
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['Check location permissions'];
  }
};

initSpeaker = function(index = 5) {
  var voices;
  soundUp = loadSound('soundUp.wav');
  soundDown = loadSound('soundDown.wav');
  soundUp.setVolume(0.1);
  soundDown.setVolume(0.1);
  clearInterval(timeout);
  timeout = setInterval(playSound, DELAY);
  soundQueue = 0;
  speaker = new SpeechSynthesisUtterance();
  voices = speechSynthesis.getVoices();
  speaker.voice = voices[index];
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 0.8;
  speaker.pitch = 0.8;
  speaker.text = '';
  speaker.lang = 'sv-SE';
  dialogues.clear();
  return say("Välkommen!");
};

setup = function() {
  var canvas;
  canvas = createCanvas(innerWidth - 0.0, innerHeight); //-0.5
  canvas.position(0, 0); // hides text field used for clipboard copy.
  platform = window.navigator.platform;
  angleMode(DEGREES);
  SCALE = data.scale;
  [cx, cy] = [img.width / 2, img.height / 2];
  b2w = new Converter(data.bmp, data.wgs, 6);
  w2b = new Converter(data.wgs, data.bmp, 0);
  getControls();
  position = [img.width / 2, img.height / 2];
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  xdraw();
  return addEventListener('touchstart', function(evt) {
    var mx, my, touch, touches;
    touches = evt.changedTouches;
    touch = touches[touches.length - 1];
    mx = touch.pageX;
    my = touch.pageY;
    return myMousePressed(mx, my);
  });
};

drawTrack = function() {
  var i, j, len, results, x, y;
  fc();
  sw(4);
  sc(0); // BLACK
  results = [];
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    [x, y] = track[i];
    results.push(circle(x - cx, y - cy, 10 * (track.length - i)));
  }
  return results;
};

drawTrail = function() {
  var j, len, results, x, y;
  fc();
  sw(12);
  sc(1, 0, 0, 0.5); // RED
  results = [];
  for (j = 0, len = trail.length; j < len; j++) {
    [x, y] = trail[j];
    results.push(point(x - cx, y - cy));
  }
  return results;
};

drawControls = function() {
  var control, key, ref, results, x, y;
  textAlign(LEFT, TOP);
  textSize(data.radius);
  sw(2);
  ref = data.controls;
  results = [];
  for (key in ref) {
    control = ref[key];
    [x, y] = control;
    sc(0);
    fc();
    circle(x - cx, y - cy, data.radius);
    sc();
    fc(0);
    results.push(text(key, x - cx + 0.7 * data.radius, y - cy + 0.7 * data.radius));
  }
  return results;
};

drawControl = function() {
  var bearing, control, latLon1, latLon2, x, y;
  if (trgLat === 0 && trgLon === 0) {
    return;
  }
  latLon2 = LatLon(trgLat, trgLon);
  latLon1 = LatLon(gpsLat, gpsLon);
  bearing = latLon1.bearingTo(latLon2);
  messages[0] = `${int(bearing)}º`;
  messages[1] = currentControl;
  messages[2] = `${Math.round(latLon1.distanceTo(latLon2))} m`;
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  sc();
  fc(0, 0, 0, 0.25);
  return circle(x - cx, y - cy, data.radius);
};

draw = function() {
  return xdraw();
};

xdraw = function() {
  var i, j, len, margin, message;
  bg(0, 1, 0);
  if (state === 0) {
    textSize(200);
    textAlign(CENTER, CENTER);
    text(VERSION, width / 2, height / 2);
    return;
  }
  //fc()
  push();
  translate(width / 2, height / 2);
  scale(SCALE);
  image(img, -cx, -cy);
  drawTrail();
  drawTrack();
  if (data.drawControls) {
    drawControls();
  }
  drawControl();
  pop();
  fc(0);
  sc(1, 1, 0);
  sw(3);
  margin = 25;
  for (i = j = 0, len = messages.length; j < len; i = ++j) {
    message = messages[i];
    textAlign([LEFT, CENTER, RIGHT][i % 3], [TOP, BOTTOM][Math.floor(i / 3)]);
    textSize([100, 50][Math.floor(i / 3)]);
    text(message, [margin, width / 2, width - margin][i % 3], [margin, height][Math.floor(i / 3)]);
  }
  return showDialogue();
};

setTarget = function(key) {
  var control, x, y;
  if (!(key in controls)) {
    return;
  }
  if (controls[currentControl] === null) {
    return;
  }
  trail = [];
  recordingTrail = true;
  say('target: ' + key);
  soundQueue = 0;
  currentControl = key;
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  [trgLon, trgLat] = b2w.convert(x, y);
  return dialogues.clear();
};

executeMail = function() { // Sends the trail
  var arr, littera, s, x, y;
  littera = controls[currentControl][2];
  arr = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = trail.length; j < len; j++) {
      [x, y] = trail[j];
      results.push(`[${x},${y}]`);
    }
    return results;
  })();
  s = arr.join(",\n");
  return sendMail(`${data.map} ${currentControl} ${littera}`, s);
};

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

getBike = function() {
  return setTarget('bike');
};

setBike = function() {
  var x, y;
  [x, y] = w2b.convert(gpsLon, gpsLat);
  controls.bike = [x, y, '', gpsLat, gpsLon];
  return dialogues.clear();
};

menu1 = function() { // Main Menu
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Pan Zoom', function() {
    return menu2();
  });
  dialogue.add('Goto Bike', function() {
    return setTarget('bike');
  });
  dialogue.add('Take', function() {
    return menu4();
  });
  dialogue.add('More', function() {
    return menu6();
  });
  dialogue.add('Center', function() {
    [cx, cy] = position;
    dialogues.clear();
    return xdraw();
  });
  dialogue.add('Init', function() {
    return initSpeaker(jcnindex++);
  });
  dialogue.add('Target', function() {
    return menu3();
  });
  dialogue.add('Store Bike', function() {
    return setBike();
  });
  dialogue.clock(' ', true);
  return dialogue.textSize *= 1.5;
};

menu2 = function() { // Pan Zoom
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Up', function() {
    return cy -= height / SCALE / 3;
  });
  dialogue.add(' ', function() {}); // Not Used
  dialogue.add('Right', function() {
    return cx += width / SCALE / 3;
  });
  dialogue.add('Out', function() {
    if (SCALE > data.scale) {
      return SCALE /= 1.5;
    }
  });
  dialogue.add('Down', function() {
    return cy += height / SCALE / 3;
  });
  dialogue.add('In', function() {
    return SCALE *= 1.5;
  });
  dialogue.add('Left', function() {
    return cx -= width / SCALE / 3;
  });
  dialogue.add(' ', function() {}); // Not used
  return dialogue.clock();
};

menu3 = function() { // Target
  var dialogue, lst;
  dialogue = new Dialogue(0, 0);
  targets = makeTargets();
  lst = targets.slice();
  lst = lst.sort(function(a, b) {
    return a[2] - b[2];
  });
  return dialogue.list(lst, 8, false, function(arr) {
    if (arr.length > 0) {
      setTarget(arr[0]);
    }
    return dialogues.clear();
  });
};

menu4 = function() { // Take
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('ABCDE', function() {
    return menu5('ABCDE');
  });
  dialogue.add('KLMNO', function() {
    return menu5('KLMNO');
  });
  dialogue.add('UVWXYZ', function() {
    return menu5('UVWXYZ');
  });
  dialogue.add('Clear', function() {
    return update(' ');
  });
  dialogue.add('PQRST', function() {
    return menu5('PQRST');
  });
  dialogue.add('FGHIJ', function() {
    return menu5('FGHIJ');
  });
  return dialogue.clock();
};

menu5 = function(letters) { // ABCDE
  var dialogue, j, len, letter;
  dialogue = new Dialogue();
  for (j = 0, len = letters.length; j < len; j++) {
    letter = letters[j];
    dialogue.add(letter, function() {
      return update(this.title);
    });
  }
  return dialogue.clock();
};

menu6 = function() { // More
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Mail', function() {
    return executeMail();
  });
  dialogue.add('Angle', function() {
    return menu7();
  });
  dialogue.add('Clear', function() {
    clearControls();
    return dialogues.clear();
  });
  return dialogue.clock();
};

menu7 = function() { // Angle
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('10', function() {
    return setAngle(10);
  });
  dialogue.add('20', function() {
    return setAngle(20);
  });
  dialogue.add('30', function() {
    return setAngle(30);
  });
  dialogue.add('45', function() {
    return setAngle(45);
  });
  dialogue.add('60', function() {
    return setAngle(60);
  });
  dialogue.add('90', function() {
    return setAngle(90);
  });
  return dialogue.clock();
};

setAngle = function(angle) {
  ANGLE = angle;
  return dialogues.clear();
};

addZero = function(n) {
  if (n <= 9) {
    return "0" + n;
  } else {
    return n;
  }
};

stdDateTime = function(date) {
  var M, d, h, m, s, y;
  y = date.getFullYear();
  m = addZero(date.getMonth() + 1);
  d = addZero(date.getDate());
  h = addZero(date.getHours());
  M = addZero(date.getMinutes());
  s = addZero(date.getSeconds());
  return `${y}-${m}-${d} ${h}:${M}:${s}`;
};

update = function(littera, index = 2) {
  var control, x, y;
  recordingTrail = false;
  control = controls[currentControl];
  [x, y] = w2b.convert(gpsLon, gpsLat);
  controls[currentControl][index] = littera;
  saveControls();
  dialogues.clear();
  executeMail();
  return getBike();
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

mouseReleased = function() {
  released = true;
  return false;
};

myMousePressed = function(mx, my) {
  var dialogue;
  if (!released) {
    return false;
  }
  released = false;
  if (state === 0) {
    initSpeaker();
    state = 1;
  }
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mx, my)) {
    if (dialogues.length === 0) {
      menu1();
    } else {
      dialogues.pop();
    }
    xdraw();
    return false;
  }
  xdraw();
  return false;
};

mousePressed = function() {
  if (platform === 'Win32') {
    myMousePressed(mouseX, mouseY);
  }
  return false;
};

// mouseMoved = ->
// 	messages[3] = myRound(mouseX/SCALE) + ' ' + myRound(mouseY/SCALE)

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\gpsKarta\coffee\sketch.coffee