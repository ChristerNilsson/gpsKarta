'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.3.2
var A,
    B,
    C,
    D,
    DATA,
    DELAY,
    DIST,
    FILENAME,
    HEIGHT,
    LIMIT,
    MAIL,
    SCALE,
    TRACKED,
    WIDTH,
    assert,
    coarse,
    controls,
    corner,
    currentControl,
    cx,
    cy,
    display,
    drawControl,
    drawTrack,
    gps,
    gpsCount,
    gpsLat,
    gpsLon,
    h,
    hortal,
    img,
    initControls,
    initSpeaker,
    lastBearing,
    lastDistance,
    locationUpdate,
    locationUpdateFail,
    makeCorners,
    makeTargets,
    menu1,
    menu10,
    menu2,
    menu3,
    menu4,
    menu5,
    menu6,
    menu7,
    menu8,
    menu9,
    messages,
    mouseReleased,
    myMousePressed,
    myround,
    playSound,
    position,
    preload,
    released,
    say,
    sayBearing,
    sayDistance,
    sendMail,
    setTarget,
    setup,
    showDialogue,
    soundDown,
    soundIndicator,
    soundQueue,
    soundUp,
    spara,
    speaker,
    targets,
    timeout,
    track,
    trgLat,
    trgLon,
    update,
    vercal,
    w,
    xdraw,
    modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

DELAY = 100; // ms, delay between sounds

DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike

LIMIT = 20; // meter. Under this, no bearing. Also distance voice every meter.

MAIL = 'janchrister.nilsson@gmail.com';

spara = function spara(lat, lon, x, y) {
  return { lat: lat, lon: lon, x: x, y: y };
};

// 2019-SommarN
A = spara(59.2987921, 18.1284073, 472, 617); // kontroll  5

B = spara(59.2985405, 18.1699098, 4361, 503); // kontroll 10

C = spara(59.2851374, 18.1336592, 1090, 3104); // kontroll 31

D = spara(59.2844998, 18.1666946, 4181, 3069); // kontroll 17


// A = spara 59.300716, 18.125680,  197, 278 # Lilla halvön
// B = spara 59.299235, 18.169492, 4306, 367 # Kranglans väg/Östervägen
// C = spara 59.285443, 18.124585,  236,3082 # Ishockeyrink Mitten
// D = spara 59.287806, 18.170784, 4525,2454 # Mittenhus t v
FILENAME = '2019-SommarN.jpg';

controls = { // id: [x,y,littera,lat,lon]
  '1': [1830, 333, '', 0, 0],
  '2': [1506, 521, '', 0, 0],
  '3': [907, 711, '', 0, 0],
  '4': [1193, 873, '', 0, 0],
  '5': [472, 617, '', 0, 0],
  '6': [228, 841, '', 0, 0],
  '7': [672, 1013, '', 0, 0],
  '8': [1125, 1196, '', 0, 0],
  '9': [1430, 1290, '', 0, 0],
  '10': [4361, 503, '', 0, 0],
  '11': [4118, 1106, '', 0, 0],
  '12': [3830, 640, '', 0, 0],
  '13': [3192, 1133, '', 0, 0],
  '14': [2664, 873, '', 0, 0],
  '15': [2322, 1862, '', 0, 0],
  '16': [4120, 2699, '', 0, 0],
  '17': [4181, 3069, '', 0, 0],
  '19': [3340, 2904, '', 0, 0],
  '20': [2691, 2554, '', 0, 0],
  '24': [3366, 3217, '', 0, 0],
  '26': [390, 1935, '', 0, 0],
  '27': [547, 2143, '', 0, 0],
  '28': [1462, 2293, '', 0, 0],
  '29': [1055, 2620, '', 0, 0],
  '30': [371, 2502, '', 0, 0],
  '31': [1090, 3104, '', 0, 0],
  '32': [2250, 2750, '', 0, 0]
};

// 2019-SommarS
// A = spara 59.279157, 18.149313, 2599,676 # Mellanbron
// B = spara 59.275129, 18.169590, 4531,1328 # Ulvsjön Vändplan Huset
// C = spara 59.270072, 18.150229, 2763,2334 # Brotorpsbron
// D = spara 59.267894, 18.167087, 4339,2645 # Älta huset

// FILENAME = '2019-SommarS.jpg' 

// controls = 
// 	21: [4303,255]
// 	22: [4066,407]
// 	23: [3436,158]
// 	25: [3534,485]
// 	34: [1709,65]
// 	35: [1212,151]
// 	36: [2215,1008]
// 	37: [2571,1186]
// 	38: [2894,485]
// 	39: [3245,778]
// 	40: [4317,1003]
// 	41: [4303,685]
// 	42: [3868,1292]
// 	43: [3426,1281]
// 	44: [3536,1650]
// 	45: [4538,1763]
// 	46: [3926,2133]
// 	47: [3104,2025]
// 	48: [4256,2514]
// 	49: [3773,2493]
// 	50: [3231,2757]

//################
targets = []; // [id, littera, distance]

initControls = function initControls() {
  var control, key, lat, littera, lon, results, x, y;
  results = [];
  for (key in controls) {
    control = controls[key];
    var _control = control;

    var _control2 = _slicedToArray(_control, 3);

    x = _control2[0];
    y = _control2[1];
    littera = _control2[2];

    var _gps$bmp2gps = gps.bmp2gps(x, y);

    var _gps$bmp2gps2 = _slicedToArray(_gps$bmp2gps, 2);

    lat = _gps$bmp2gps2[0];
    lon = _gps$bmp2gps2[1];

    control[3] = lat;
    results.push(control[4] = lon);
  }
  return results;
};

makeTargets = function makeTargets() {
  var b, c, control, key, lat, littera, lon, x, y;
  targets = [];
  c = LatLon(gpsLat, gpsLon);
  for (key in controls) {
    control = controls[key];
    var _control3 = control;

    var _control4 = _slicedToArray(_control3, 5);

    x = _control4[0];
    y = _control4[1];
    littera = _control4[2];
    lat = _control4[3];
    lon = _control4[4];

    b = LatLon(lat, lon);
    targets.push([key, littera, round(b.distanceTo(c))]);
  }
  return targets;
};

DATA = "gpsKarta";

WIDTH = null;

HEIGHT = null;

cx = 0;
cy = 0 // center (image coordinates)
;


SCALE = 1;

gps = null;

TRACKED = 5; // circles shows the player's position

position = null; // gps position (pixels)

track = []; // five latest GPS positions (pixels)

// buttons = []
speaker = null;

img = null;

soundUp = null;

soundDown = null;

soundQueue = 0; // neg=minskat avstånd pos=ökat avstånd

messages = [0, 1, 2, 3, 4, 5];

gpsCount = 0;

gpsLat = 0;
gpsLon = 0;
trgLat = 0;
trgLon = 0;


currentControl = "1";

timeout = null;

lastBearing = '';

lastDistance = '';

w = null;

h = null;

released = true;

sendMail = function sendMail(subject, body) {
  mail.href = 'mailto:' + MAIL + '?Subject=' + subject + '&body=' + body;
  return mail.click();
};

say = function say(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  return speechSynthesis.speak(speaker);
};

preload = function preload() {
  return img = loadImage(FILENAME);
};

myround = function myround(x) {
  var dec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;

  x *= Math.pow(10, dec);
  x = Math.round(x);
  return x / Math.pow(10, dec);
};

//show = (prompt,p) -> print prompt,"http://maps.google.com/maps?q=#{p.lat},#{p.lon}"	
vercal = function vercal(a, b, y) {
  var lat, lon, x;
  x = map(y, a.y, b.y, a.x, b.x);
  lat = map(y, a.y, b.y, a.lat, b.lat);
  lon = map(y, a.y, b.y, a.lon, b.lon);
  return { lat: lat, lon: lon, x: x, y: y };
};

hortal = function hortal(a, b, x) {
  var lat, lon, y;
  y = map(x, a.x, b.x, a.y, b.y);
  lat = map(x, a.x, b.x, a.lat, b.lat);
  lon = map(x, a.x, b.x, a.lon, b.lon);
  return { lat: lat, lon: lon, x: x, y: y };
};

corner = function corner(a, b, c, d, x, y) {
  var lat, lon;
  lat = map(y, c.y, d.y, c.lat, d.lat);
  lon = map(x, a.x, b.x, a.lon, b.lon);
  return { lat: lat, lon: lon, x: x, y: y };
};

makeCorners = function makeCorners() {
  var ab0, ab1, ac0, ac1, bd0, bd1, cd0, cd1, ne, nw, se, sw;
  ac0 = vercal(A, C, 0); // beräkna x
  ac1 = vercal(A, C, HEIGHT);
  bd0 = vercal(B, D, 0);
  bd1 = vercal(B, D, HEIGHT);
  ab0 = hortal(A, B, 0); // beräkna y
  ab1 = hortal(A, B, WIDTH);
  cd0 = hortal(C, D, 0);
  cd1 = hortal(C, D, WIDTH);
  nw = corner(ac0, bd0, ab0, cd0, 0, 0); // beräkna hörnen
  ne = corner(ac0, bd0, ab1, cd1, WIDTH, 0);
  se = corner(ac1, bd1, ab1, cd1, WIDTH, HEIGHT);
  sw = corner(ac1, bd1, ab0, cd0, 0, HEIGHT);
  return gps = new GPS(nw, ne, se, sw, WIDTH, HEIGHT);
};

coarse = function coarse(x) {
  var n;
  n = Math.round(x).toString().length;
  return myround(x, 1 - n).toString();
};

assert('4000', coarse(3917.5));

assert('400', coarse(421.2));

assert('40', coarse(36.8));

assert('5', coarse(5.4));

assert('5', coarse(4.6));

sayDistance = function sayDistance(a, b) {
  // anropa say om någon gräns passeras 1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,30,...
  var distance, sa, sb;
  // if a border is crossed, play a sound
  if (a <= LIMIT) {
    if (Math.round(a) !== Math.round(b)) {
      distance = Math.round(a).toString();
      if (distance !== lastDistance) {
        say(distance);
        lastDistance = distance;
      }
      return;
    }
  }
  sa = coarse(a);
  sb = coarse(b);
  if (sa === sb) {
    return;
  }
  distance = a >= LIMIT ? 'distans ' + sa : sa;
  if (distance !== lastDistance) {
    say(distance);
    return lastDistance = distance;
  }
};

// eventuellt kräva tio sekunder sedan föregående bäring sades
sayBearing = function sayBearing(a, b) {
  // a is newer
  var bearing, c, d, lastbearing, tr;
  // if a border is crossed, tell the new bearing
  a = Math.round(a / 10);
  b = Math.round(b / 10);
  if (a !== b) {
    // 0..35
    if (a === 0) {
      a = 36;
    }
    tr = 'nolla ett tvåa trea fyra femma sexa sju åtta nia'.split(' ');
    c = tr[Math.floor(a / 10)];
    d = tr[modulo(a, 10)];
    bearing = 'bäring ' + c + ' ' + d;
    if (bearing !== lastBearing) {
      say(bearing);
      return lastbearing = bearing;
    }
  }
};

//showSpeed = (sp) -> # buttons[0].prompt = myround sp, 1
soundIndicator = function soundIndicator(p) {
  var a, b, bearinga, bearingb, c, dista, distance, distb;
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  dista = a.distanceTo(c);
  distb = b.distanceTo(c);
  distance = Math.round((dista - distb) / DIST);
  sayDistance(dista, distb);
  bearinga = a.bearingTo(c);
  bearingb = b.bearingTo(c);
  if (dista >= LIMIT) {
    sayBearing(bearinga, bearingb);
  }
  if (abs(DIST * distance) < 10) {
    messages[3] = DIST * distance
    // abs dista-distb
    + ' m/s';
  } else {
    messages[3] = '';
  }
  if (distance !== 0) {
    // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = p.coords.latitude;
    gpsLon = p.coords.longitude;
  }
  if (abs(distance) < 10) {
    return soundQueue = distance; // ett antal DIST
  }
};

playSound = function playSound() {
  if (soundQueue === 0) {
    return;
  }
  if (soundQueue < 0 && soundDown !== null) {
    soundQueue++;
    soundDown.play();
  } else if (soundQueue > 0 && soundUp !== null) {
    soundQueue--;
    soundUp.play();
  }
  messages[4] = soundQueue;
  if (soundQueue === 0) {
    return xdraw();
  }
};

locationUpdate = function locationUpdate(p) {
  gpsCount++;
  messages[5] = gpsCount;
  //messages[6] = myround p.coords.latitude
  //messages[7] = myround p.coords.longitude
  soundIndicator(p);
  position = gps.gps2bmp(gpsLat, gpsLon);
  track.push(position);
  if (track.length > TRACKED) {
    track.shift();
  }
  xdraw();
  return position;
};

locationUpdateFail = function locationUpdateFail(error) {
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['Check location permissions'];
  }
};

initSpeaker = function initSpeaker(index) {
  var voices;
  soundUp = loadSound('soundUp.wav');
  soundDown = loadSound('soundDown.wav');
  soundUp.setVolume(0.1);
  soundDown.setVolume(0.1);
  //controls['bike'] = position
  //buttons[2].prompt = 'bike'
  clearInterval(timeout);
  timeout = setInterval(playSound, DELAY);
  soundQueue = 0;
  speaker = new SpeechSynthesisUtterance();
  voices = speechSynthesis.getVoices();
  speaker.voice = voices[index];
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 0.8;
  speaker.pitch = 0.8;
  speaker.text = '';
  speaker.lang = 'sv-SE';
  dialogues.clear();
  return say('speaker ' + index);
};

setup = function setup() {
  var canvas, x, x1, x2, y, y1, y2;
  canvas = createCanvas(innerWidth - 0.5, innerHeight - 0.5);
  canvas.position(0, 0); // hides text field used for clipboard copy.
  w = width / 8;
  h = height / 4;
  angleMode(DEGREES);
  WIDTH = img.width;
  HEIGHT = img.height;
  SCALE = 1;
  cx = width;
  cy = height;

  makeCorners();
  setTarget(_.keys(controls)[0]);
  x = width / 2;
  y = height / 2;
  x1 = 100;
  x2 = width - 100;
  y1 = 100;
  y2 = height - 100;
  initControls();
  position = [WIDTH / 2, HEIGHT / 2];
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  xdraw();
  return addEventListener('touchstart', function (evt) {
    var mx, my, touch, touches;
    touches = evt.changedTouches;
    touch = touches[touches.length - 1];
    mx = touch.pageX;
    my = touch.pageY;
    return myMousePressed(mx, my);
  });
};

drawTrack = function drawTrack() {
  var i, j, len, x, y;
  push();
  fc();
  sw(4);
  sc(0); // BLACK
  translate(width / 2, height / 2);
  scale(SCALE);
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    var _track$i = _slicedToArray(track[i], 2);

    x = _track$i[0];
    y = _track$i[1];

    circle(x - cx, y - cy, 10 * (track.length - i));
  }
  return pop();
};

drawControl = function drawControl() {
  var bearing, control, latLon1, latLon2, x, y;
  latLon2 = LatLon(trgLat, trgLon);
  latLon1 = LatLon(gpsLat, gpsLon);
  bearing = latLon1.bearingTo(latLon2);
  messages[0] = int(bearing) + '\xBA';
  messages[1] = Math.round(latLon1.distanceTo(latLon2)) + ' m';
  messages[2] = currentControl;
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  push();
  sc();
  fc(0, 0, 0, 0.25);
  translate(width / 2, height / 2);
  scale(SCALE);
  circle(x - cx, y - cy, 75);
  return pop();
};

xdraw = function xdraw() {
  var i, j, len, margin, message;
  bg(0, 1, 0);
  fc();
  image(img, 0, 0, width, height, cx - width / SCALE / 2, cy - height / SCALE / 2, width / SCALE, height / SCALE);
  drawTrack();
  drawControl();
  textSize(100);
  fc(0);
  sc(1, 1, 0);
  sw(3);
  margin = 25;
  for (i = j = 0, len = messages.length; j < len; i = ++j) {
    message = messages[i];
    if (i % 2 === 0) {
      textAlign(LEFT, CENTER);
      text(message, margin, 100 * (Math.floor(i / 2) + 1) - margin);
    } else {
      textAlign(RIGHT, CENTER);
      text(message, width - margin, 100 * (Math.floor(i / 2) + 1) - margin);
    }
  }
  return showDialogue();
};

setTarget = function setTarget(key) {
  var _gps$bmp2gps3, _gps$bmp2gps4;

  var control, x, y;
  if (controls[currentControl] === null) {
    return;
  }
  soundQueue = 0;
  currentControl = key;
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  return _gps$bmp2gps3 = gps.bmp2gps(x, y), _gps$bmp2gps4 = _slicedToArray(_gps$bmp2gps3, 2), trgLat = _gps$bmp2gps4[0], trgLon = _gps$bmp2gps4[1], _gps$bmp2gps3;
};

//#########################
Array.prototype.clear = function () {
  return this.length = 0;
};

assert = function assert(a, b) {
  var msg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Assert failure';

  return chai.assert.deepEqual(a, b, msg);
};

menu1 = function menu1() {
  // Main Menu
  var dialogue, r1, r2;
  dialogue = new Dialogue(1, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, true);
  dialogue.buttons[0].info('Target', true, function () {
    return menu3();
  });
  dialogue.buttons[1].info('PanZoom', true, function () {
    return menu2();
  });
  dialogue.buttons[2].info('Center', true, function () {
    var _position = position;

    var _position2 = _slicedToArray(_position, 2);

    cx = _position2[0];
    cy = _position2[1];

    dialogues.clear();
    return xdraw();
  });
  dialogue.buttons[3].info('Speaker', true, function () {
    return menu10();
  });
  return dialogue.buttons[4].info('Take', true, function () {
    return menu4();
  });
};

menu2 = function menu2() {
  // Pan Zoom
  var dialogue, r1, r2;
  dialogue = new Dialogue(2, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.09 * height;
  dialogue.clock(' ', 8, r1, r2, false);
  dialogue.buttons[0].info('Up', true, function () {
    return cy -= 0.33 * height / SCALE;
  });
  dialogue.buttons[1].info('Restore', true, function () {
    setTarget('bike');
    return dialogues.clear();
  });
  dialogue.buttons[2].info('Right', true, function () {
    return cx += 0.33 * width / SCALE;
  });
  dialogue.buttons[3].info('Out', true, function () {
    if (SCALE > 0.5) {
      return SCALE /= 1.5;
    }
  });
  dialogue.buttons[4].info('Down', true, function () {
    return cy += 0.33 * height / SCALE;
  });
  dialogue.buttons[5].info('In', true, function () {
    return SCALE *= 1.5;
  });
  dialogue.buttons[6].info('Left', true, function () {
    return cx -= 0.33 * width / SCALE;
  });
  return dialogue.buttons[7].info('Save', true, function () {
    return dialogues.clear();
  });
};

menu3 = function menu3() {
  // Target
  var dialogue, lst;
  targets = makeTargets();
  lst = targets.slice();
  lst = lst.sort(function (a, b) {
    return a[2] - b[2];
  });
  dialogue = new Dialogue(3, 0, 0, int(0.15 * h));
  return dialogue.list(lst, 8, false, function (arr) {
    if (arr.length > 0) {
      setTarget(arr[0]);
    }
    return dialogues.clear();
  });
};

menu4 = function menu4() {
  // Take
  var dialogue, r1, r2;
  dialogue = new Dialogue(4, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false);
  dialogue.buttons[0].info('ABCDE', true, function () {
    return menu5();
  });
  dialogue.buttons[1].info('FGHIJ', true, function () {
    return menu6();
  });
  dialogue.buttons[2].info('KLMNO', true, function () {
    return menu7();
  });
  dialogue.buttons[3].info('PQRST', true, function () {
    return menu8();
  });
  return dialogue.buttons[4].info('UVWXYZ', true, function () {
    return menu9();
  });
};

update = function update(littera) {
  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var d;
  d = new Date();
  sendMail(currentControl, currentControl + ' ' + littera + ' ' + gpsLat + ' ' + gpsLon + ' ' + d.toISOString());
  controls[currentControl][index] = littera;
  return dialogues.clear();
};

menu5 = function menu5() {
  // ABCDE
  var dialogue, r1, r2;
  dialogue = new Dialogue(5, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false);
  dialogue.buttons[0].info('A', true, function () {
    return update('A');
  });
  dialogue.buttons[1].info('B', true, function () {
    return update('B');
  });
  dialogue.buttons[2].info('C', true, function () {
    return update('C');
  });
  dialogue.buttons[3].info('D', true, function () {
    return update('D');
  });
  return dialogue.buttons[4].info('E', true, function () {
    return update('E');
  });
};

menu6 = function menu6() {
  // FGHIJ
  var dialogue, r1, r2;
  dialogue = new Dialogue(6, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false);
  dialogue.buttons[0].info('F', true, function () {
    return update('F');
  });
  dialogue.buttons[1].info('G', true, function () {
    return update('G');
  });
  dialogue.buttons[2].info('H', true, function () {
    return update('H');
  });
  dialogue.buttons[3].info('I', true, function () {
    return update('I');
  });
  return dialogue.buttons[4].info('J', true, function () {
    return update('J');
  });
};

menu7 = function menu7() {
  // KLMNO
  var dialogue, r1, r2;
  dialogue = new Dialogue(7, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false);
  dialogue.buttons[0].info('K', true, function () {
    return update('K');
  });
  dialogue.buttons[1].info('L', true, function () {
    return update('L');
  });
  dialogue.buttons[2].info('M', true, function () {
    return update('M');
  });
  dialogue.buttons[3].info('N', true, function () {
    return update('N');
  });
  return dialogue.buttons[4].info('O', true, function () {
    return update('O');
  });
};

menu8 = function menu8() {
  // PQRST
  var dialogue, r1, r2;
  dialogue = new Dialogue(8, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false);
  dialogue.buttons[0].info('P', true, function () {
    return update('P');
  });
  dialogue.buttons[1].info('Q', true, function () {
    return update('Q');
  });
  dialogue.buttons[2].info('R', true, function () {
    return update('R');
  });
  dialogue.buttons[3].info('S', true, function () {
    return update('S');
  });
  return dialogue.buttons[4].info('T', true, function () {
    return update('T');
  });
};

menu9 = function menu9() {
  // UVWXYZ
  var dialogue, r1, r2;
  dialogue = new Dialogue(9, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 6, r1, r2, false);
  dialogue.buttons[0].info('U', true, function () {
    return update('U');
  });
  dialogue.buttons[1].info('V', true, function () {
    return update('V');
  });
  dialogue.buttons[2].info('W', true, function () {
    return update('W');
  });
  dialogue.buttons[3].info('X', true, function () {
    return update('X');
  });
  dialogue.buttons[4].info('Y', true, function () {
    return update('Y');
  });
  return dialogue.buttons[5].info('Z', true, function () {
    return update('Z');
  });
};

menu10 = function menu10() {
  // speaker
  var dialogue, r1, r2;
  dialogue = new Dialogue(10, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.27 * height;
  r2 = 0.08 * height;
  dialogue.clock(' ', 10, r1, r2, false);
  dialogue.buttons[0].info('0', true, function () {
    return initSpeaker(0);
  });
  dialogue.buttons[1].info('1', true, function () {
    return initSpeaker(1);
  });
  dialogue.buttons[2].info('2', true, function () {
    return initSpeaker(2);
  });
  dialogue.buttons[3].info('3', true, function () {
    return initSpeaker(3);
  });
  dialogue.buttons[4].info('4', true, function () {
    return initSpeaker(4);
  });
  dialogue.buttons[5].info('5', true, function () {
    return initSpeaker(5);
  });
  dialogue.buttons[6].info('6', true, function () {
    return initSpeaker(6);
  });
  dialogue.buttons[7].info('7', true, function () {
    return initSpeaker(7);
  });
  dialogue.buttons[8].info('8', true, function () {
    return initSpeaker(8);
  });
  return dialogue.buttons[9].info('9', true, function () {
    return initSpeaker(9);
  });
};

display = function display() {
  return xdraw();
};

showDialogue = function showDialogue() {
  if (dialogues.length > 0) {
    return _.last(dialogues).show();
  }
};

mouseReleased = function mouseReleased() {
  released = true;
  return false;
};

myMousePressed = function myMousePressed(mx, my) {
  var dialogue;
  if (!released) {
    return false;
  }
  released = false;
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mx, my)) {
    if (dialogues.length === 0) {
      menu1();
    } else {
      dialogues.pop();
    }
    display();
    return false;
  }
  display();
  return false;
};

//mousePressed = -> myMousePressed mouseX,mouseY
//# sourceMappingURL=sketch.js.map
