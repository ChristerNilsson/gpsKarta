// Generated by CoffeeScript 2.4.1
var BR, DELAY, DIGITS, DIST, DISTLIST, Dump, LIMIT, SCALE, SetSector, Storage, TRACKED, VERSION, aim, assert, b2w, bearingSaid, crossHair, cx, cy, data, decreaseQueue, distanceSaid, draw, drawControl, drawControls, drawCrossHair, drawInfo, drawPois, drawRuler, drawTrack, drawTrail, dump, executeMail, findKey, firstInfo, fraction, general, getMeters, gps, gpsCount, gpsLat, gpsLon, img, increaseQueue, info, initSpeaker, keyPressed, lastTouchEnded, loadGeneral, locationUpdate, locationUpdateFail, mapName, measure, menu1, menu2, menu3, menu4, menu5, menu6, menuButton, messages, params, platform, playSound, pois, position, preload, released, saveGeneral, savePosition, say, sayBearing, sayDistance, sendMail, setTarget, setup, showDialogue, soundDown, soundQueue, soundUp, speaker, speed, start, startX, startY, state, storage, surplus, timeout, touchEnded, touchMoved, touchStarted, track, update, updateTrack, updateTrail, uppdatera, voiceQueue, voices, w2b,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

VERSION = 200;

DELAY = 100; // ms, delay between sounds

DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike

LIMIT = 20; // meter. Under this value is no bearing given.

platform = window.navigator.platform; // Win32|iPad|Linux

DIGITS = 'zero one two three four five six seven eight niner'.split(' ');

BR = platform === 'Win32' || platform === 'iPad' ? "\n" : '<br>';

// http://www.bvsok.se/Kartor/Skolkartor/
// Högupplösta orienteringskartor: https://www.omaps.net
// https://omaps.blob.core.windows.net/map-excerpts/1fdc587ffdea489dbd69e29b10b48395.jpeg Nackareservatet utan kontroller.
DISTLIST = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];

released = true;

mapName = ""; // t ex skarpnäck

params = null;

voices = null;

measure = {};

surplus = 0;

pois = null;

speed = 1;

start = new Date();

state = 0; // 0=uninitialized 1=normal 2=info

data = null;

img = null;

b2w = null;

w2b = null;

startX = 0;

startY = 0;

menuButton = null;

crossHair = null;

lastTouchEnded = new Date(); // to prevent double bounce in menus

fraction = function(x) {
  return x - int(x);
};

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

general = {
  COINS: true,
  DISTANCE: true,
  TRAIL: true,
  SECTOR: 10,
  PANSPEED: true
};

loadGeneral = function() {
  if (localStorage.gpsKarta) {
    return general = _.extend(general, JSON.parse(localStorage.gpsKarta));
  }
};

saveGeneral = function() {
  return localStorage.gpsKarta = JSON.stringify(general);
};

Storage = class Storage {
  constructor(mapName1) {
    var key, obj;
    this.mapName = mapName1;
    key = 'gpsKarta' + this.mapName;
    if (localStorage[key]) {
      try {
        obj = JSON.parse(localStorage[key]);
        this.controls = obj.controls;
        this.trail = obj.trail;
      } catch (error1) {}
    }
    this.clear();
  }

  save() {
    return localStorage['gpsKarta' + this.mapName] = JSON.stringify(this);
  }

  clear() {
    this.controls = data.controls;
    this.trail = [];
    this.init();
    crossHair = null;
    return this.save();
  }

  init() {
    var control, key, lat, littera, lon, ref, results, x, y;
    ref = this.controls;
    results = [];
    for (key in ref) {
      control = ref[key];
      [x, y, littera] = control;
      [lon, lat] = b2w.convert(x, y);
      control[2] = "";
      control[3] = lat;
      results.push(control[4] = lon);
    }
    return results;
  }

  deleteControl() {
    var b, c, control, distbc, key, pLat, pLon, qLat, qLon, ref, z;
    [pLon, pLat] = b2w.convert(cx, cy);
    b = LatLon(pLat, pLon);
    ref = this.controls;
    for (key in ref) {
      control = ref[key];
      [z, z, z, qLat, qLon] = control;
      c = LatLon(qLat, qLon);
      distbc = b.distanceTo(c);
      if (distbc < data.radius && indexOf.call("ABC", key) < 0) {
        delete this.controls[key];
      }
    }
    return this.save();
  }

};

storage = null;

Dump = class Dump {
  constructor() {
    this.data = [];
    this.active = false;
  }

  store(msg) {
    if (this.active) {
      console.log(msg);
      return this.data.push(msg);
    }
  }

  get() {
    var result;
    result = this.data.join(BR);
    this.data = [];
    return result + BR;
  }

};

dump = new Dump();

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = 1;

gps = null;

TRACKED = 5; // circles shows the user position

position = null; // gps position [x,y] # [lon,lat,alt,hhmmss]

track = []; // five latest GPS positions (bitmap coordinates)

speaker = null;

soundUp = null;

soundDown = null;

soundQueue = 0; // integer neg=minskat avstånd pos=ökat avstånd

messages = ['', '', '', '', '', ''];

gpsCount = 0;

[gpsLat, gpsLon] = [
  0,
  0 // avgör om muntlig information ska ges
];

timeout = null;

voiceQueue = [];

bearingSaid = ''; // förhindrar upprepning

distanceSaid = ''; // förhindrar upprepning

sendMail = function(subject, body) {
  mail.href = "mailto:" + data.mail + "?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body); // encodeURI 
  console.log(mail.href);
  return mail.click();
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  dump.store("");
  dump.store(`say ${m} ${JSON.stringify(voiceQueue)}`);
  return speechSynthesis.speak(speaker);
};

preload = function() {
  params = getParameters();
  mapName = params.map || "21A";
  if (params.debug) {
    dump.active = params.debug === '1';
  }
  loadJSON(`data/${mapName}.json`, function(json) {
    var control, key, ref;
    data = json;
    ref = data.controls;
    for (key in ref) {
      control = ref[key];
      control.push("");
      control.push(0);
      control.push(0);
    }
    return img = loadImage("data/" + data.map);
  });
  return loadJSON("data/poi.json", function(json) {
    return pois = json;
  });
};

sayDistance = function(a, b) { // a is newer (meter)
  var d, j, len;
  // if a border is crossed, produce speech
  dump.store(`D ${myRound(a, 1)} ${myRound(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  for (j = 0, len = DISTLIST.length; j < len; j++) {
    d = DISTLIST[j];
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

sayBearing = function(a0, b0) { // a is newer (degrees)
  var a, b, ental, tiotal;
  dump.store(`B ${myRound(a0, 1)} ${myRound(b0, 1)}`);
  // if a sector limit is crossed, tell the new bearing
  a = general.SECTOR * round(a0 / general.SECTOR);
  b = general.SECTOR * round(b0 / general.SECTOR);
  if (a === b && b0 !== -1) {
    return ""; // samma sektor
  }
  a = round(a / 10);
  if (a === 0) {
    a = 36; // 01..36
  }
  tiotal = DIGITS[Math.floor(a / 10)];
  ental = DIGITS[modulo(a, 10)];
  return `${tiotal} ${ental}`;
};

increaseQueue = function(p) {
  var a, b, bearingac, bearingbc, c, distac, distance, distbc, sBearing, sDistance, trgLat, trgLon;
  dump.store(`increaseQueue ${p.coords.latitude} ${p.coords.longitude}`);
  if (crossHair === null) {
    return;
  }
  [trgLon, trgLat] = b2w.convert(crossHair[0], crossHair[1]);
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  distac = a.distanceTo(c); // meters
  distbc = b.distanceTo(c);
  distance = (distac - distbc) / DIST;
  bearingac = a.bearingTo(c);
  bearingbc = b.bearingTo(c);
  sBearing = distac >= LIMIT ? sayBearing(bearingac, bearingbc) : "";
  sDistance = sayDistance(distac, distbc);
  if (sBearing !== "" && sDistance !== "") {
    voiceQueue.push(`both ${sBearing} ${sDistance}`);
  } else if (sBearing !== "") {
    voiceQueue.push(`bearing ${sBearing}`);
  } else if (sDistance !== "") {
    voiceQueue.push(`distance ${sDistance}`);
  }
  if (abs(distance) >= 0.5) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = myRound(p.coords.latitude, 6);
    gpsLon = myRound(p.coords.longitude, 6);
  }
  if (distance < -10) {
    return soundQueue = -10;
  } else if (distance > 10) {
    return soundQueue = 10;
  } else {
    return soundQueue = round(distance);
  }
};

firstInfo = function() {
  var b, bearingb, c, distance, distb, lat, lon, x, y;
  [x, y] = crossHair;
  [lon, lat] = b2w.convert(x, y);
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(lat, lon);
  distb = round(b.distanceTo(c));
  distance = round(distb / DIST);
  bearingb = b.bearingTo(c);
  voiceQueue.push(`target ${key} ${sayBearing(bearingb, -1)} ${sayDistance(distb, -1)}`);
  dump.store("");
  dump.store(`target ${crossHair}`);
  dump.store(`gps ${[gpsLat, gpsLon]}`);
  dump.store(`trg ${[lat, lon]}`);
  dump.store(`voiceQueue ${voiceQueue}`);
  if (distance < 10) {
    return soundQueue = distance;
  } else {
    return soundQueue = 1; // ett antal DIST
  }
};

playSound = function() {
  if (!general.COINS) {
    return;
  }
  if (soundQueue === 0) {
    return;
  }
  dump.store(`playSound ${soundQueue}`);
  if (soundQueue < 0 && soundDown !== null) {
    soundQueue++;
    return soundDown.play();
  } else if (soundQueue > 0 && soundUp !== null) {
    soundQueue--;
    return soundUp.play();
  }
};

decreaseQueue = function() {
  var arr, msg, result;
  if (voiceQueue.length === 0) {
    return;
  }
  msg = voiceQueue.shift();
  arr = msg.split(' ');
  if (arr[0] === 'both') {
    result = "";
    msg = arr[1] + ' ' + arr[2];
    if (bearingSaid !== arr[1] + ' ' + arr[2]) {
      bearingSaid = arr[1] + ' ' + arr[2];
      result += arr[1] + ' ' + arr[2];
    }
    if (distanceSaid !== arr[3]) {
      distanceSaid = arr[3];
      result += '. ' + arr[3];
    }
    if (result !== "") {
      return say(result);
    }
  } else if (arr[0] === 'bearing') {
    msg = arr[1] + ' ' + arr[2];
    if (bearingSaid !== msg) {
      say(msg);
    }
    return bearingSaid = msg;
  } else if (arr[0] === 'distance' && (general.DISTANCE || arr[1] < LIMIT)) {
    msg = arr[1];
    if (distanceSaid !== msg) {
      say(msg);
    }
    return distanceSaid = msg;
  } else if (arr[0] === 'target') {
    bearingSaid = arr[2] + ' ' + arr[3];
    distanceSaid = arr[4];
    msg = `${arr[0]} ${arr[1]}. bearing ${bearingSaid}. distance ${distanceSaid} meters`;
    // Example: 'target 11. bearing zero niner. distance 250 meters'
    return say(msg);
  } else if (arr[0] === 'saved') {
    return say(msg.replace(':', ' and '));
  }
};

locationUpdate = function(p) {
  var pLat, pLon;
  pLat = myRound(p.coords.latitude, 6);
  pLon = myRound(p.coords.longitude, 6);
  if (storage.trail.length === 0) {
    gpsLat = pLat;
    gpsLon = pLon;
  }
  messages[5] = gpsCount++;
  decreaseQueue();
  increaseQueue(p); // meters
  return uppdatera(pLat, pLon);
};

uppdatera = function(pLat, pLon) {
  var x, y;
  dump.store("");
  dump.store(`LU ${pLat} ${pLon}`);
  [x, y] = w2b.convert(pLon, pLat);
  updateTrack(pLat, pLon, x, y);
  return updateTrail(pLat, pLon, x, y);
};

updateTrack = function(pLat, pLon, x, y) { // senaste fem positionerna
  var t;
  track.push([x, y]);
  if (track.length > TRACKED) {
    track.shift();
  }
  t = _.last(track);
  dump.store(`T ${t[0]} ${t[1]}`);
  return messages[4] = pLat + ' ' + pLon;
};

updateTrail = function(pLat, pLon, x, y) {
  var a, b, dist, qLat, qLon, qx, qy;
  position = [x, y];
  if (storage.trail.length === 0) {
    storage.trail.push(position);
    return;
  }
  [qx, qy] = _.last(storage.trail);
  [qLon, qLat] = b2w.convert(qx, qy);
  a = LatLon(pLat, pLon); // newest
  b = LatLon(qLat, qLon); // last
  dist = a.distanceTo(b); // meters
  if (dist > 5 + surplus) {
    dump.store(`updateTrail ${dist}`);
    storage.trail.push(position);
    return surplus += 5 - dist;
  }
};

locationUpdateFail = function(error) {
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['', '', '', '', '', 'Check location permissions'];
  }
};

window.speechSynthesis.onvoiceschanged = function() {
  return voices = window.speechSynthesis.getVoices();
};

initSpeaker = function() {
  var index;
  //dump.store "initSpeaker in #{index}"
  index = int(getParameters().speaker || 5);
  speaker = new SpeechSynthesisUtterance();
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 1.0;
  speaker.pitch = 0;
  speaker.text = '';
  speaker.lang = 'en-GB';
  if (voices && index <= voices.length - 1) {
    speaker.voice = voices[index];
  }
  soundUp = loadSound('soundUp.wav');
  soundDown = loadSound('soundDown.wav');
  soundUp.setVolume(0.1);
  soundDown.setVolume(0.1);
  clearInterval(timeout);
  timeout = setInterval(playSound, DELAY);
  soundQueue = 0;
  dialogues.clear();
  say("Welcome!");
  track = [];
  return dump.store("initSpeaker out");
};

getMeters = function(w, skala) {
  var d, distans, fract, i, j, lat0, lat1, len, lon0, lon1, n, p0, p1, ref;
  [lon0, lat0] = b2w.convert(0, height);
  [lon1, lat1] = b2w.convert(w, height);
  p0 = LatLon(lat0, lon0);
  p1 = LatLon(lat1, lon1);
  distans = p0.distanceTo(p1) / skala;
  d = Math.log10(distans);
  fract = fraction(d);
  ref = [1, 2, 5];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (10 ** fract > i) {
      n = i;
    }
  }
  return [round(distans), n * 10 ** int(d)];
};

// myTest = ->
// 	getMeters 1920,1 # Smäller här
// 	getMeters 1920,1.5 # eller här. Android
// 	getMeters 1920,1.5*1.5
// 	getMeters 1920,1.5*1.5*1.5
// assert [1434,1000], getMeters 1920,1 # Smäller här
// assert [956,500], getMeters 1920,1.5 # eller här. Android
// assert [638,500], getMeters 1920,1.5*1.5
// assert [425,200], getMeters 1920,1.5*1.5*1.5
//console.log "Ready!"
setup = function() {
  var abc, bmp, canvas, dcs, wgs;
  canvas = createCanvas(innerWidth - 0.0, innerHeight); //-0.5
  canvas.position(0, 0); // hides text field used for clipboard copy.
  loadGeneral();
  angleMode(DEGREES);
  SCALE = data.scale;
  dcs = data.controls;
  bmp = [dcs.A[0], dcs.A[1], dcs.B[0], dcs.B[1], dcs.C[0], dcs.C[1]];
  abc = data.ABC;
  wgs = [abc[1], abc[0], abc[3], abc[2], abc[5], abc[4]];
  b2w = new Converter(bmp, wgs, 6);
  w2b = new Converter(wgs, bmp, 0);
  storage = new Storage(mapName);
  storage.trail = [];
  if (params.trail) {
    storage.trail = JSON.parse(params.trail);
  }
  // myTest() Do not execute! Very dependent on .json file.
  [cx, cy] = [img.width / 2, img.height / 2];
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  return menuButton = new MenuButton(width - 160);
};

info = function() {
  return [`Platform: ${platform}`, `Map: ${mapName}`, `Version: ${VERSION}`, `TrailPoints: ${storage.trail.length}`, `GpsPoints: ${gpsCount}`, `PanSpeed: ${general.PANSPEED}`, `Sector: ${general.SECTOR}`, `Hear Coins: ${general.COINS}`, `Hear Distance: ${general.DISTANCE}`, `See Trail: ${general.TRAIL}`, `Scale: ${SCALE}`, `Dump: ${dump.data.length}`];
};

drawCrossHair = function(x, y) {
  var r;
  r = 0.9 * data.radius;
  if (crossHair) {
    sw(1);
    sc(1, 1, 1, 0.5);
    fc(1, 0, 0, 0.5);
  } else {
    sw(1);
    sc(1, 0, 0);
    fc(0, 0, 0, 0.25);
    r *= SCALE;
  }
  circle(x, y, r);
  line(x, y - r, x, y + r);
  return line(x - r, y, x + r, y);
};

drawInfo = function() {
  var i, j, len, m, ref, results;
  textAlign(LEFT, CENTER);
  sc();
  fc(0);
  ref = info();
  results = [];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    m = ref[i];
    results.push(text(m, 20, (i + 0.5) * height / info().length));
  }
  return results;
};

drawTrack = function() {
  var i, j, len, results, x, y;
  fc();
  sw(2 / SCALE);
  sc(0);
  results = [];
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    [x, y] = track[i];
    results.push(circle(x - cx, y - cy, 5 * (track.length - i)));
  }
  return results;
};

drawTrail = function() {
  var j, len, ref, results, x, y;
  if (!general.TRAIL) {
    return;
  }
  fc(1, 1, 0);
  sw(1);
  sc(0);
  ref = storage.trail;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    [x, y] = ref[j];
    results.push(circle(x - cx, y - cy, 2));
  }
  return results;
};

drawControls = function() {
  var control, key, littera, r, ref, results, x, y;
  sw(2);
  ref = storage.controls;
  results = [];
  for (key in ref) {
    control = ref[key];
    if (control === null) {
      continue;
    }
    [x, y, littera] = control;
    r = data.radius;
    if (indexOf.call('ABC', key) >= 0) { // Half Size
      stroke("#0f08");
      fill("#ff08");
      circle(x - cx, y - cy, r / 2);
      sc();
      fc(0);
      textSize(r * 0.75);
      textAlign(CENTER, CENTER);
      text(key, x - cx, y - cy); // Full Size
    } else {
      if (littera === '') {
        stroke(0);
        fc();
        circle(x - cx, y - cy, r);
        sc();
        fc(0);
        textSize(1.5 * data.radius);
        textAlign(CENTER, CENTER);
        text(key, x - cx, y - cy);
      } else {
        sc();
        fc(0);
        textSize(1.5 * data.radius);
        textAlign(CENTER, CENTER);
        text(littera, x - cx, y - cy);
      }
    }
    stroke(0);
    results.push(point(x - cx, y - cy));
  }
  return results;
};

drawControl = function() {
  var bearing, latLon1, latLon2, trgLat, trgLon;
  if (crossHair && gpsLat !== 0 && gpsLon !== 0) {
    [trgLon, trgLat] = b2w.convert(crossHair[0], crossHair[1]);
    latLon2 = LatLon(trgLat, trgLon);
    latLon1 = LatLon(gpsLat, gpsLon);
    bearing = latLon1.bearingTo(latLon2);
    messages[0] = "";
    messages[1] = `${int(bearing)}º`;
    return messages[2] = `${round(latLon1.distanceTo(latLon2))} m`;
  } else {
    messages[0] = "";
    messages[1] = "";
    return messages[2] = "";
  }
};

drawRuler = function() {
  var d, h, w, w0, w1, x, y;
  [w1, w0] = getMeters(width, SCALE);
  d = (w1 - w0) / 2 / w1 * width;
  x = d;
  y = height * 0.9;
  w = w0 / w1 * width;
  h = height * 0.03;
  sc(0);
  sw(1);
  fc();
  rect(x, y, w, h);
  textSize(height / 30);
  textAlign(CENTER, CENTER);
  sc();
  fc(0);
  return text(w0 + "m", width / 2, y + h * 0.6);
};

drawPois = function() {
  var key, lat, lon, poi, results, x, y;
  results = [];
  for (key in pois) {
    poi = pois[key];
    [lat, lon] = poi;
    [x, y] = w2b.convert(lon, lat);
    sw(1);
    stroke("#ff0");
    fill("#000");
    textSize(0.25 * data.radius);
    textAlign(CENTER, CENTER);
    results.push(text(key, x - cx, y - cy));
  }
  return results;
};

draw = function() {
  var i, j, len, margin, message, x, y;
  bg(0, 1, 0);
  if (state === 0) {
    textSize(100);
    textAlign(CENTER, CENTER);
    x = width / 2;
    y = height / 2;
    text(mapName, x, y - 100);
    text('Version: ' + VERSION, x, y);
    if (dump.active) {
      text('debug', x, y + 100);
    }
    text("Click to continue!", x, y + 200);
    return;
  }
  if (state === 1) {
    push();
    translate(width / 2, height / 2);
    scale(SCALE);
    image(img, -cx, -cy);
    drawTrail();
    drawTrack();
    if (data.drawControls) {
      drawControls();
    }
    drawControl();
    if (crossHair) {
      drawCrossHair(crossHair[0] - cx, crossHair[1] - cy); // detached
    }
    drawPois();
    pop();
    if (!crossHair) {
      drawCrossHair(width / 2, height / 2); // attached
    }
    fc(0);
    sc(1, 1, 0);
    sw(3);
    margin = 25;
    for (i = j = 0, len = messages.length; j < len; i = ++j) {
      message = messages[i];
      textAlign([LEFT, CENTER, RIGHT][i % 3], [TOP, BOTTOM][Math.floor(i / 3)]);
      textSize([100, 50][Math.floor(i / 3)]);
      text(message, [margin, width / 2, width - margin][i % 3], [margin, height][Math.floor(i / 3)]);
    }
    drawRuler();
    showDialogue();
    menuButton.draw();
    return;
  }
  if (state === 2) {
    drawInfo();
  }
};

setTarget = function() {
  soundQueue = 0;
  firstInfo();
  storage.save();
  return dialogues.clear();
};

executeMail = function() {
  var key, lat, link, littera, lon, r, t, x, y;
  link = "https://christernilsson.github.io/gpsKarta/index.html?map=" + mapName + "&trail=" + JSON.stringify(storage.trail);
  r = info().join(BR);
  t = ((function() {
    var ref, results;
    ref = storage.controls;
    results = [];
    for (key in ref) {
      [x, y, littera, lat, lon] = ref[key];
      results.push(`${key} ${x} ${y} ${littera} ${lat} ${lon}`);
    }
    return results;
  })()).join(BR);
  sendMail(`${mapName}`, link + BR + BR + r + BR + BR + t + BR + BR + dump.get());
  return storage.clear();
};

findKey = function() {
  var j, key, len, ref;
  ref = 'DEFGHIJKLMNOPQRSTUVWXYZ';
  for (j = 0, len = ref.length; j < len; j++) {
    key = ref[j];
    if (!(key in storage.controls)) {
      return key;
    }
  }
  return false;
};

savePosition = function() {
  var key, x, y;
  [x, y] = w2b.convert(gpsLon, gpsLat);
  key = findKey();
  storage.controls[key] = [x, y, '', gpsLat, gpsLon];
  storage.save();
  voiceQueue.push(`saved ${key}`);
  return dialogues.clear();
};

aim = function() {
  if (crossHair === null) {
    crossHair = [cx, cy];
    setTarget();
  } else {
    crossHair = null;
  }
  return dialogues.clear();
};

menu1 = function() { // Main Menu
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Center', function() {
    [cx, cy] = position;
    return dialogues.clear();
  });
  dialogue.add('Out', function() {
    if (SCALE > data.scale) {
      SCALE /= 1.5;
    }
    return dialogues.clear();
  });
  dialogue.add('Take...', function() {
    return menu4();
  });
  dialogue.add('More...', function() {
    return menu6();
  });
  dialogue.add('Setup...', function() {
    return menu2();
  });
  dialogue.add('Aim', function() {
    return aim();
  });
  dialogue.add('Save', function() {
    return savePosition();
  });
  dialogue.add('In', function() {
    SCALE *= 1.5;
    return dialogues.clear();
  });
  dialogue.clock(' ', true);
  return dialogue.textSize *= 1.5;
};

menu2 = function() { // Setup
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('PanSpeed', function() {
    general.PANSPEED = !general.PANSPEED;
    saveGeneral();
    return dialogues.clear();
  });
  dialogue.add('Coins', function() {
    general.COINS = !general.COINS;
    saveGeneral();
    return dialogues.clear();
  });
  dialogue.add('Distance', function() {
    general.DISTANCE = !general.DISTANCE;
    saveGeneral();
    return dialogues.clear();
  });
  dialogue.add('Trail', function() {
    general.TRAIL = !general.TRAIL;
    saveGeneral();
    return dialogues.clear();
  });
  dialogue.add('Sector...', function() {
    return menu3();
  });
  dialogue.clock();
  return dialogue.textSize *= 1.5;
};

menu3 = function() { // Sector
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('10', function() {
    return SetSector(10); // 36
  });
  dialogue.add('20', function() {
    return SetSector(20); // 18
  });
  dialogue.add('30', function() {
    return SetSector(30); // 12
  });
  dialogue.add('45', function() {
    return SetSector(45); // 8
  });
  dialogue.add('60', function() {
    return SetSector(60); // 6
  });
  dialogue.add('90', function() {
    return SetSector(90); // 4
  });
  return dialogue.clock();
};

menu4 = function() { // Take
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('ABCDE', function() {
    return menu5('ABCDE');
  });
  dialogue.add('KLMNO', function() {
    return menu5('KLMNO');
  });
  dialogue.add('UVWXYZ', function() {
    return menu5('UVWXYZ');
  });
  dialogue.add('Clear', function() {
    return update(' ');
  });
  dialogue.add('PQRST', function() {
    return menu5('PQRST');
  });
  dialogue.add('FGHIJ', function() {
    return menu5('FGHIJ');
  });
  return dialogue.clock();
};

menu5 = function(letters) { // ABCDE
  var dialogue, j, len, letter;
  dialogue = new Dialogue();
  for (j = 0, len = letters.length; j < len; j++) {
    letter = letters[j];
    dialogue.add(letter, function() {
      return update(this.title);
    });
  }
  return dialogue.clock();
};

menu6 = function() { // More
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Init', function() {
    return initSpeaker();
  });
  dialogue.add('Mail...', function() {
    executeMail();
    return dialogues.clear();
  });
  dialogue.add('Delete', function() {
    storage.deleteControl();
    return dialogues.clear();
  });
  dialogue.add('Clear', function() {
    storage.clear();
    return dialogues.clear();
  });
  dialogue.add('Info...', function() {
    state = 2;
    return dialogues.clear();
  });
  dialogue.clock();
  return dialogue.textSize *= 1.5;
};

SetSector = function(sector) {
  general.SECTOR = sector;
  saveGeneral();
  return dialogues.clear();
};

update = function(littera) {
  var key, lat, lon, x, y;
  key = findKey();
  [x, y] = crossHair;
  [lon, lat] = b2w.convert(x, y);
  storage.controls[key] = [x, y, littera, lat, lon];
  storage.save();
  crossHair = null;
  return dialogues.clear();
};

//executeMail()
showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

touchStarted = function(event) {
  var lastTouchStarted;
  lastTouchStarted = new Date();
  //console.log 'touchStarted',released,state
  event.preventDefault();
  if (!released) {
    return;
  }
  speed = 1;
  if (general.PANSPEED) {
    speed = 0.2 + 1.8 * dist(mouseX, mouseY, width / 2, height / 2) / dist(0, 0, width / 2, height / 2);
  }
  dump.store(`touchStarted ${(new Date()) - start} ${JSON.stringify(touches)}`);
  released = false;
  startX = mouseX;
  startY = mouseY;
  return false;
};

touchMoved = function(event) {
  //console.log 'touchMoved',released,state
  dump.store(`touchMoved ${(new Date()) - start} ${JSON.stringify(touches)}`);
  event.preventDefault();
  if (dialogues.length === 0 && state === 1) {
    cx += speed * (startX - mouseX) / SCALE;
    cy += speed * (startY - mouseY) / SCALE;
    startX = mouseX;
    startY = mouseY;
  }
  return false;
};

touchEnded = function(event) {
  var dialogue;
  //console.log 'touchEnded',released,state
  event.preventDefault();
  if ((new Date()) - lastTouchEnded < 500) {
    lastTouchEnded = new Date(); // to prevent double bounce
    return;
  }
  if (released) {
    return;
  }
  dump.store(`touchEnded ${(new Date()) - start} ${JSON.stringify(touches)}`);
  released = true;
  if (state === 0) {
    initSpeaker();
  }
  if (state === 2) {
    dialogues.clear();
  }
  if (state === 0 || state === 2) {
    state = 1;
    return false;
  }
  //console.log 'ADAM',mouseX,mouseY
  if (menuButton.inside(mouseX, mouseY)) {
    //console.log 'BERTIL'
    menuButton.click();
    return false;
  }
  if (dialogues.length > 0) {
    //console.log 'CESAR'
    dialogue = _.last(dialogues);
    //if not dialogue.execute mouseX,mouseY then dialogues.pop()
    dialogue.execute(mouseX, mouseY); // then dialogues.pop()
  }
  return false;
};

keyPressed = function() { // Används för att avläsa ABC bitmapskoordinater
  var letter, x, y;
  if (key === ' ') {
    x = round(cx + (mouseX - width / 2) / SCALE); // image koordinater
    y = round(cy + (mouseY - height / 2) / SCALE);
    letter = "ABC"[_.size(measure)];
    measure[letter] = [x, y];
    if (letter === 'C') {
      return console.log('"controls": ' + JSON.stringify(measure));
    }
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\gpsKarta\coffee\sketch.coffee