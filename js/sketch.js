// Generated by CoffeeScript 2.5.1
var BEARINGLIST, BR, DIGITS, DIST, DISTLIST, Dump, LIMIT, PROG_VERSION, SCALE, SetSector, Storage, TRACKED, aim, assert, b2w, bearingSaid, bearingSounds, crossHair, cx, cy, data, decreaseQueue, distanceSaid, distanceSounds, distbc, draw, drawControl, drawControls, drawCrossHair, drawInfo, drawPois, drawRuler, drawTrack, drawTrail, dump, errors, executeMail, findKey, firstInfo, fraction, general, getMeters, gps, gpsCount, gpsLat, gpsLon, img, increaseQueue, info, initSounds, keyPressed, lastTouchEnded, locationId, locationUpdate, locationUpdateFail, mapName, measure, menu1, menu2, menu3, menu4, menu5, menu6, menuButton, messages, p1, p2, params, platform, pois, position, preload, released, savePosition, sayBear, sayBearing, sayDist, sayDistance, sendMail, setTarget, setup, showDialogue, speaker, speed, start, startX, startY, state, storage, timeout, touchEnded, touchMoved, touchStarted, track, update, updateTrack, updateTrail, uppdatera, voiceQueue, voices, w2b,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

PROG_VERSION = 293;

// DELAY = 100 # ms, delay between sounds
DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike 

LIMIT = 20; // meter. Under this value is no bearing given

platform = window.navigator.platform; // Win32|iPad|Linux|iPhone

DIGITS = '0 1 2 3 4 5 6 7 8 9'.split(' ');

BR = "\n";

// Högupplösta orienteringskartor: https://www.omaps.net
BEARINGLIST = '01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36';

DISTLIST = '2 4 6 8 10 12 14 16 18 20 30 40 50 60 70 80 90 100 120 140 160 180 200 300 400 500 600 700 800 900 1000 1200 1400 1600 1800 2000 3000 4000 5000 6000 7000 8000 9000 10000';

released = true;

mapName = ""; // t ex skarpnäck

params = null;

voices = null;

measure = {};

pois = null;

speed = 1;

distbc = 0;

start = new Date();

state = 0; // 0=uninitialized 1=normal 2=info

data = null;

img = null;

b2w = null;

w2b = null;

startX = 0;

startY = 0;

menuButton = null;

crossHair = null;

lastTouchEnded = new Date(); // to prevent double bounce in menus

distanceSounds = {};

bearingSounds = {};

fraction = function(x) {
  return x - int(x);
};

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

general = {
  DISTANCE: true,
  TRAIL: true,
  SECTOR: 10,
  PANSPEED: true // COINS: true,
};

//loadGeneral = -> if localStorage.gpsKarta then general = _.extend general, JSON.parse localStorage.gpsKarta
//saveGeneral = -> localStorage.gpsKarta = JSON.stringify general
Storage = class Storage {
  constructor(mapName1) {
    var key;
    this.mapName = mapName1;
    key = 'gpsKarta' + this.mapName;
    // if localStorage[key]
    // 	try
    // 		obj = JSON.parse localStorage[key]
    // 		@controls = obj.controls
    // 		@trail = obj.trail
    this.clear();
  }

  save() {
    return localStorage['gpsKarta' + this.mapName] = JSON.stringify(this);
  }

  clear() {
    this.controls = data.controls;
    this.trail = [];
    this.init();
    crossHair = null;
    return this.save();
  }

  init() {
    var control, key, lat, littera, lon, ref, results, x, y;
    ref = this.controls;
    results = [];
    for (key in ref) {
      control = ref[key];
      [x, y, littera] = control;
      [lon, lat] = b2w.convert(x, y);
      control[2] = "";
      control[3] = lat;
      results.push(control[4] = lon);
    }
    return results;
  }

  deleteControl() {
    var b, c, control, dbc, key, pLat, pLon, qLat, qLon, ref, z;
    [pLon, pLat] = b2w.convert(cx, cy);
    b = LatLon(pLat, pLon);
    ref = this.controls;
    for (key in ref) {
      control = ref[key];
      [z, z, z, qLat, qLon] = control;
      c = LatLon(qLat, qLon);
      dbc = b.distanceTo(c);
      if (dbc < data.radius && indexOf.call("ABC", key) < 0) {
        delete this.controls[key];
      }
    }
    return this.save();
  }

};

storage = null;

Dump = class Dump {
  constructor() {
    this.data = [];
    this.active = false;
  }

  store(msg) {
    if (this.active) {
      console.log(msg);
      return this.data.push(msg);
    }
  }

  get() {
    var result;
    result = this.data.join(BR);
    this.data = [];
    return result + BR;
  }

};

dump = new Dump();

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = 1;

gps = null;

TRACKED = 5; // circles shows the user position

position = null; // gps position [x,y] # [lon,lat,alt,hhmmss]

track = []; // five latest GPS positions (bitmap coordinates)

speaker = null;

messages = ['', '', '', '', '', ''];

errors = [];

gpsCount = 0;

[gpsLat, gpsLon] = [
  0,
  0 // avgör om muntlig information ska ges
];

timeout = null;

voiceQueue = [];

bearingSaid = ''; // förhindrar upprepning

distanceSaid = ''; // förhindrar upprepning

locationId = 0;

p1 = new LatLon(52.205, 0.119);

p2 = new LatLon(48.857, 2.351);

assert(404279.1639886792, p1.distanceTo(p2)); //  m

p1 = new LatLon(59.0, 18.0);

p2 = new LatLon(59.0, 18.00001);

assert(0.5726962096664346, p1.distanceTo(p2)); //  m

p2 = new LatLon(59.00001, 18.0);

assert(1.1119492665983002, p1.distanceTo(p2)); //  m

// fem decimaler blir bra 
sendMail = function(subject, body) {
  mail.href = "mailto:" + data.mail + "?subject=" + encodeURIComponent(subject) + "&body=" + encodeURIComponent(body); // encodeURI 
  console.log(mail.href);
  return mail.click();
};

sayBear = function(m) { // m är en bäring i BEARINGLIST
  console.log(`sayBear ${m}`);
  dump.store("");
  dump.store(`sayBearing ${m} ${JSON.stringify(voiceQueue)}`);
  return bearingSounds[m].play();
};

sayDist = function(m) { // m är en distans i DISTLIST
  console.log(`sayDist ${m}`);
  dump.store("");
  dump.store(`sayDistance ${m} ${JSON.stringify(voiceQueue)}`);
  return distanceSounds[m].play();
};

sayDistance = function(a, b) { // a is newer (meter)
  var d, j, len, ref;
  // if a border is crossed, produce a distance
  dump.store(`D ${round(a, 1)} ${round(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  ref = DISTLIST.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    d = ref[j];
    d = parseInt(d);
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

sayBearing = function(a0, b0) { // a is newer (degrees)
  var a, b;
  dump.store(`B ${round(a0, 1)} ${round(b0, 1)}`);
  // if a sector limit is crossed, tell the new bearing
  a = general.SECTOR * round(a0 / general.SECTOR);
  b = general.SECTOR * round(b0 / general.SECTOR);
  if (a === b && b0 !== -1) {
    return ""; // samma sektor
  }
  a = round(a / 10);
  if (a === 0) {
    a = 36; // 01..36
  }
  return str(DIGITS[Math.floor(a / 10)]) + str(DIGITS[modulo(a, 10)]);
};

increaseQueue = function(p) {
  var a, b, bearingac, bearingbc, c, distac, distance, sBearing, trgLat, trgLon;
  // errors.push "increaseQueue #{round p.coords.latitude,6} #{round p.coords.longitude,6}"
  if (crossHair === null) {
    return;
  }
  //errors.push "incQA #{crossHair}"
  [trgLon, trgLat] = b2w.convert(crossHair[0], crossHair[1]);
  //errors.push "incQB #{round trgLon,6} #{round trgLat,6}"
  //errors.push "incQC #{round p.coords.longitude,6} #{round p.coords.latitude,6}"
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  //errors.push "a #{a}" VISAS EJ!
  b = LatLon(gpsLat, gpsLon);
  //errors.push "b #{b}"
  c = LatLon(trgLat, trgLon); // target
  //errors.push "c #{c}"
  distac = a.distanceTo(c); // meters
  distbc = b.distanceTo(c);
  distance = (distac - distbc) / DIST;
  //errors.push "distac #{distac}"
  //errors.push "distbc #{distbc}"
  //errors.push "distance #{distance}"
  bearingac = a.bearingTo(c);
  bearingbc = b.bearingTo(c);
  sBearing = distac >= LIMIT ? sayBearing(bearingac, bearingbc) : "";
  if (sBearing !== "") {
    voiceQueue.push(`bearing ${sBearing}`);
  }
  // sDistance = sayDistance distac,distbc
  // if sDistance != "" then voiceQueue.push "distance #{sDistance}" Vi kan inte säga godtyckligt avstånd numera

  //for voice in voiceQueue
  //	errors.push "vQ #{voice}"
  if (abs(distance) >= 0.5) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = round(p.coords.latitude, 6);
    return gpsLon = round(p.coords.longitude, 6);
  }
};

firstInfo = function() {
  var b, bearingb, c, distance, distb, lat, lon, x, y;
  [x, y] = crossHair;
  [lon, lat] = b2w.convert(x, y);
  //errors.push "firstInfo #{round(x)} #{round(y)}"
  //errors.push "lon #{lon} lat #{lat}"
  //errors.push "gps #{gpsLon} #{gpsLat}"
  b = LatLon(gpsLat, gpsLon); // senaste position
  c = LatLon(lat, lon); // target
  distb = round(b.distanceTo(c));
  distance = round(distb / DIST);
  bearingb = b.bearingTo(c);
  voiceQueue.push(`bearing ${sayBearing(bearingb, -1)}`);
  voiceQueue.push(`distance ${sayDistance(distb, -1)}`);
  //increaseQueue {coords: {latitude:gpsLat, longitude:gpsLon}}
  dump.store("");
  dump.store(`target ${crossHair}`);
  dump.store(`gps ${[gpsLat, gpsLon]}`);
  dump.store(`trg ${[lat, lon]}`);
  return dump.store(`voiceQueue ${voiceQueue}`);
};

// if distance < LIMIT then soundQueue = distance else soundQueue = 0 ett antal DIST
decreaseQueue = function() {
  var arr, bearing, distance, msg;
  if (voiceQueue.length === 0) {
    return;
  }
  msg = voiceQueue.shift();
  arr = msg.split(' ');
  dump.store(`decreaseQueue ${msg}`);
  //errors.push "decreaseQueue #{msg}"
  if (arr[0] === 'bearing') {
    bearing = arr[1];
    if (bearingSaid !== bearing) {
      sayBear(bearing);
    }
    return bearingSaid = bearing;
  } else if (arr[0] === 'distance') {
    //errors.push general.DISTANCE
    if (general.DISTANCE || arr[1] < LIMIT) {
      distance = arr[1];
      //errors.push "#{distanceSaid} #{distance}" 
      if (distanceSaid !== distance) {
        sayDist(distance);
      }
      return distanceSaid = distance;
    }
  }
};

locationUpdate = function(p) {
  var error, pLat, pLon, reason;
  reason = 0;
  try {
    pLat = round(p.coords.latitude, 6);
    pLon = round(p.coords.longitude, 6);
    if (storage.trail.length === 0) {
      gpsLat = pLat;
      gpsLon = pLon;
    }
    messages[5] = gpsCount++;
    decreaseQueue();
    reason = 1;
    increaseQueue(p); // meters
    reason = 2;
    uppdatera(pLat, pLon);
    return reason = 3;
  } catch (error1) {
    error = error1;
    return errors.push(`locationUpdate ${error} ${reason}`);
  }
};

uppdatera = function(pLat, pLon) {
  var x, y;
  [x, y] = w2b.convert(pLon, pLat);
  dump.store(`uppdatera ${pLon} ${pLat} ${x} ${y}`);
  updateTrack(pLat, pLon, x, y);
  return updateTrail(pLat, pLon, x, y);
};

updateTrack = function(pLat, pLon, x, y) { // senaste fem positionerna
  var t;
  track.push([x, y]);
  if (track.length > TRACKED) {
    track.shift();
  }
  t = _.last(track);
  dump.store(`T ${t[0]} ${t[1]}`);
  return messages[TRACKED - 1] = pLat + ' ' + pLon;
};

updateTrail = function(pLat, pLon, x, y) {
  var a, b, dist, qLat, qLon, qx, qy;
  position = [x, y];
  if (storage.trail.length === 0) {
    storage.trail.push(position);
    return;
  }
  [qx, qy] = _.last(storage.trail);
  [qLon, qLat] = b2w.convert(qx, qy);
  a = LatLon(pLat, pLon); // newest
  b = LatLon(qLat, qLon); // last
  dist = a.distanceTo(b); // meters
  if (dist > 5) {
    dump.store(`updateTrail ${dist} ${x} ${y}`);
    return storage.trail.push(position);
  }
};

locationUpdateFail = function(error) {
  return errors.push('locationUpdateFail #{error.code}');
};

initSounds = function() {
  var bearing, distance, j, k, len, len1, ref, ref1, results, sound;
  bearingSounds = {};
  ref = BEARINGLIST.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    bearing = ref[j];
    sound = loadSound(`sounds/bearing/male/${bearing}.mp3`);
    if (sound) {
      console.log(`sounds/bearing/male/${bearing}.mp3`);
    }
    sound.setVolume(0.5);
    bearingSounds[bearing] = sound;
  }
  distanceSounds = {};
  ref1 = DISTLIST.split(' ');
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    distance = ref1[k];
    sound = loadSound(`sounds/distance/female/${distance}.mp3`);
    if (sound) {
      console.log(`sounds/distance/female/${distance}.mp3`);
    }
    sound.setVolume(0.5);
    results.push(distanceSounds[distance] = sound);
  }
  return results;
};

getMeters = function(w, skala) {
  var d, distans, fract, i, j, lat0, lat1, len, lon0, lon1, n, p0, ref;
  [lon0, lat0] = b2w.convert(0, height);
  [lon1, lat1] = b2w.convert(w, height);
  p0 = LatLon(lat0, lon0);
  p1 = LatLon(lat1, lon1);
  distans = p0.distanceTo(p1) / skala;
  d = Math.log10(distans);
  fract = fraction(d);
  ref = [1, 2, 5];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (10 ** fract > i) {
      n = i;
    }
  }
  return [round(distans), n * 10 ** int(d)];
};

preload = function() {
  initSounds();
  params = getParameters();
  mapName = params.map || "2023-SommarS";
  if (params.debug) {
    dump.active = params.debug === '1';
  }
  loadJSON("data/poi.json", function(json) {
    return pois = json;
  });
  return loadJSON(`data/${mapName}.json`, function(json) {
    var control, key, ref;
    data = json;
    ref = data.controls;
    for (key in ref) {
      control = ref[key];
      control.push("");
      control.push(0);
      control.push(0);
    }
    return img = loadImage("data/" + data.map);
  });
};

setup = function() {
  var abc, bmp, canvas, dcs, error, options, wgs;
  try {
    //console.log "PI #{round Math.PI,6}"
    //console.log "setup starts"
    dialogues.clear();
    track = [];
    canvas = createCanvas(innerWidth, innerHeight);
    canvas.position(0, 0); // hides text field used for clipboard copy.
    
    //loadGeneral()
    angleMode(DEGREES);
    SCALE = data.scale;
    dcs = data.controls;
    bmp = [dcs.A[0], dcs.A[1], dcs.B[0], dcs.B[1], dcs.C[0], dcs.C[1]];
    abc = data.ABC;
    wgs = [abc[1], abc[0], abc[3], abc[2], abc[5], abc[4]];
    b2w = new Converter(bmp, wgs, 6);
    w2b = new Converter(wgs, bmp, 0);
    storage = new Storage(mapName);
    storage.trail = [];
    if (params.trail) {
      storage.trail = decodeAll(params.trail);
    }
    [cx, cy] = [img.width / 2, img.height / 2];
    options = {
      enableHighAccuracy: false,
      timeout: 5000,
      maximumAge: 0
    };
    locationId = navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, options);
    // enableHighAccuracy: true
    // maximumAge: 30000
    // timeout: 27000
    errors.push(`watchPosition locationId = ${locationId}`);
    return menuButton = new MenuButton(width - 160);
  } catch (error1) {
    //throw "myerror"
    error = error1;
    return errors.push(`setup failed: ${error}`);
  }
};

info = function() {
  var lat, lon, trgLat, trgLon, x, y;
  if (position) {
    [x, y] = position;
  } else {
    [x, y] = [cx, cy];
  }
  [lon, lat] = b2w.convert(x, y);
  if (crossHair) {
    [trgLon, trgLat] = b2w.convert(crossHair[0], crossHair[1]);
  } else {
    [trgLon, trgLat] = b2w.convert(cx, cy);
  }
  return [`Map: ${mapName}`, `Program Version: ${PROG_VERSION}`, `GpsPosition: ${messages[4]}`, `  GpsPoints: ${gpsCount}`, `Target: ${trgLat} ${trgLon}`, `  Bearing: ${messages[1]}`, `  Distance: ${messages[2]}`, "Setup", `  PanSpeed: ${general.PANSPEED}`, `  Sector: ${general.SECTOR}`, `  Hear Distance: ${general.DISTANCE}`, `  See Trail: ${general.TRAIL}`, `TrailPoints: ${storage.trail.length}`, `Scale: ${SCALE}`, `Dump: ${dump.data.length}`, `Platform: ${platform}`];
};

drawCrossHair = function(x, y) {
  var r;
  r = 0.9 * data.radius;
  if (crossHair) {
    sw(1);
    sc(1, 1, 1, 0.5);
    fc(1, 0, 0, 0.5);
  } else {
    sw(1);
    sc(1, 0, 0);
    fc(0, 0, 0, 0.25);
    r *= SCALE;
  }
  circle(x, y, r);
  line(x, y - r, x, y + r);
  return line(x - r, y, x + r, y);
};

drawInfo = function() {
  var i, j, len, m, ref, results;
  textAlign(LEFT, CENTER);
  sc();
  fc(0);
  ref = info();
  results = [];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    m = ref[i];
    results.push(text(m, 20, (i + 0.5) * height / info().length));
  }
  return results;
};

drawTrack = function() {
  var i, j, len, results, x, y;
  fc();
  sw(2 / SCALE);
  sc(0);
  results = [];
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    [x, y] = track[i];
    dump.store(`drawTrack ${i} ${track.length} ${x} ${y} ${cx} ${cy} ${x - cx} ${y - cy}`);
    results.push(circle(x - cx, y - cy, 5 * (track.length - i)));
  }
  return results;
};

drawTrail = function() {
  var index, j, len, ref, results, x, x0, y, y0;
  if (!general.TRAIL) {
    return;
  }
  textSize(20 / SCALE);
  sw(1 / SCALE);
  if (storage.trail.length < 1) {
    return;
  }
  [x0, y0] = storage.trail[0];
  ref = storage.trail;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    [x, y] = ref[j];
    index = 0;
    if (x < x0) {
      index += 1;
    }
    if (y > y0) {
      index += 2;
    }
    fill('#0ff #0f0 #f00 #ff0'.split(' ')[index]);
    [x0, y0] = [x, y];
    sc(0);
    circle(x - cx, y - cy, 2);
    if (SCALE > 10) {
      fc(0);
      sc();
      text(x, x - cx, y - cy - 1);
      results.push(text(y, x - cx, y - cy + 1));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

drawControls = function() {
  var control, key, littera, r, ref, results, x, y;
  sw(2);
  ref = storage.controls;
  results = [];
  for (key in ref) {
    control = ref[key];
    if (control === null) {
      continue;
    }
    [x, y, littera] = control;
    r = data.radius;
    if (indexOf.call('ABC', key) >= 0) { // Half Size
      stroke("#0f08");
      fill("#ff08");
      circle(x - cx, y - cy, r / 2);
      sc();
      fc(0);
      textSize(r * 0.75);
      textAlign(CENTER, CENTER);
      text(key, x - cx, y - cy); // Full Size
    } else {
      if (littera === '') {
        stroke(0);
        fc();
        circle(x - cx, y - cy, r);
        sc();
        fc(0);
        textSize(1.5 * data.radius);
        textAlign(CENTER, CENTER);
        text(key, x - cx, y - cy);
      } else {
        sc();
        fc(0);
        textSize(1.5 * data.radius);
        textAlign(CENTER, CENTER);
        text(littera, x - cx, y - cy);
      }
    }
    stroke(0);
    results.push(point(x - cx, y - cy));
  }
  return results;
};

drawControl = function() {
  var bearing, latLon1, latLon2, trgLat, trgLon;
  if (gpsLat === 0 || gpsLon === 0) {
    messages[0] = "";
    messages[1] = "";
    messages[2] = "";
    return;
  }
  if (crossHair) {
    [trgLon, trgLat] = b2w.convert(crossHair[0], crossHair[1]);
  } else {
    [trgLon, trgLat] = b2w.convert(cx, cy);
  }
  latLon2 = LatLon(trgLat, trgLon);
  latLon1 = LatLon(gpsLat, gpsLon);
  bearing = latLon1.bearingTo(latLon2);
  messages[0] = "";
  messages[1] = `${int(bearing)}º`;
  return messages[2] = `${round(latLon1.distanceTo(latLon2))} m`;
};

drawRuler = function() {
  var d, h, w, w0, w1, x, y;
  [w1, w0] = getMeters(width, SCALE);
  d = (w1 - w0) / 2 / w1 * width;
  x = d;
  y = height * 0.9;
  w = w0 / w1 * width;
  h = height * 0.03;
  sc(0);
  sw(1);
  fc();
  rect(x, y, w, h);
  textSize(height / 30);
  textAlign(CENTER, CENTER);
  sc();
  fc(0);
  return text(w0 + "m", width / 2, y + h * 0.6);
};

drawPois = function() {
  var key, lat, lon, poi, results, x, y;
  results = [];
  for (key in pois) {
    poi = pois[key];
    [lat, lon] = poi;
    [x, y] = w2b.convert(lon, lat);
    sw(1);
    stroke("#ff0");
    fill("#000");
    textSize(0.25 * data.radius);
    textAlign(CENTER, CENTER);
    results.push(text(key, x - cx, y - cy));
  }
  return results;
};

draw = function() {
  var i, j, k, len, len1, margin, message, ref, x, y;
  bg(0, 1, 0);
  if (state === 0) {
    textSize(100);
    textAlign(CENTER, CENTER);
    x = width / 2;
    y = height / 2;
    text(mapName, x, y - 100);
    text('Version: ' + PROG_VERSION, x, y);
    if (dump.active) {
      text('debug', x, y + 100);
    }
    text("Click to continue!", x, y + 200);
    return;
  }
  if (state === 1) {
    push();
    translate(round(width / 2), round(height / 2));
    scale(SCALE);
    image(img, round(-cx), round(-cy));
    drawTrail();
    drawTrack();
    if (data.drawControls) {
      drawControls();
    }
    drawControl();
    if (crossHair) {
      drawCrossHair(crossHair[0] - cx, crossHair[1] - cy); // detached
    }
    drawPois();
    pop();
    if (!crossHair) {
      drawCrossHair(width / 2, height / 2); // attached
    }
    fc(0);
    sc(1, 1, 0);
    sw(3);
    margin = 25;
    for (i = j = 0, len = messages.length; j < len; i = ++j) {
      message = messages[i];
      textAlign([LEFT, CENTER, RIGHT][i % 3], [TOP, BOTTOM][Math.floor(i / 3)]);
      textSize([100, 50][Math.floor(i / 3)]);
      text(message, [margin, width / 2, width - margin][i % 3], [margin, height][Math.floor(i / 3)]);
    }
    drawRuler();
    showDialogue();
    menuButton.draw();
    //messages[3] = round frameRate()
    push();
    textAlign(LEFT);
    ref = range(errors.length);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      text(errors[i], 10, 50 + 50 * i);
    }
    pop();
    return;
  }
  if (state === 2) {
    drawInfo();
  }
};

setTarget = function() {
  firstInfo();
  storage.save();
  return dialogues.clear();
};

executeMail = function() {
  var key, lat, link, littera, lon, pairs, r, t, x, y;
  pairs = ((function() {
    var j, len, ref, results;
    ref = storage.trail;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      results.push(`[${x},${y}]`);
    }
    return results;
  })()).join(',' + BR);
  link = "https://christernilsson.github.io/gpsKarta/index.html?map=" + mapName + "&trail=" + encodeAll(storage.trail);
  r = info().join(BR);
  t = ((function() {
    var ref, results;
    ref = storage.controls;
    results = [];
    for (key in ref) {
      [x, y, littera, lat, lon] = ref[key];
      results.push(`${key} ${x} ${y} ${littera} ${lat} ${lon}`);
    }
    return results;
  })()).join(BR);
  sendMail(`${mapName}`, link + BR + BR + r + BR + BR + t + BR + BR + dump.get() + pairs);
  return storage.clear();
};

findKey = function() {
  var j, key, len, ref;
  ref = 'DEFGHIJKLMNOPQRSTUVWXYZ';
  for (j = 0, len = ref.length; j < len; j++) {
    key = ref[j];
    if (!(key in storage.controls)) {
      return key;
    }
  }
  return false;
};

savePosition = function() {
  var key, x, y;
  [x, y] = w2b.convert(gpsLon, gpsLat);
  key = findKey();
  storage.controls[key] = [x, y, '', gpsLat, gpsLon];
  storage.save();
  voiceQueue.push(`saved ${key}`);
  return dialogues.clear();
};

aim = function() {
  if (crossHair === null) {
    crossHair = [round(cx), round(cy)];
    setTarget();
  } else {
    crossHair = null;
  }
  return dialogues.clear();
};

menu1 = function() { // Main Menu
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Center', function() {
    [cx, cy] = position;
    dump.store('Center #{cx} #{cy} #{position.coord.} #{}');
    return dialogues.clear();
  });
  dialogue.add('Out', function() {
    return SCALE /= 1.5;
  });
  //if SCALE > data.scale then SCALE /= 1.5
  //dialogues.clear()
  dialogue.add('Take...', function() {
    return menu4();
  });
  dialogue.add('More...', function() {
    return menu6();
  });
  dialogue.add('Setup...', function() {
    return menu2();
  });
  dialogue.add('Aim', function() {
    return aim();
  });
  dialogue.add('Save', function() {
    return savePosition();
  });
  dialogue.add('In', function() {
    return SCALE *= 1.5;
  });
  //dialogues.clear()
  dialogue.clock(' ', true);
  return dialogue.textSize *= 1.5;
};

menu2 = function() { // Setup
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('PanSpeed', function() {
    general.PANSPEED = !general.PANSPEED;
    //saveGeneral()
    return dialogues.clear();
  });
  dialogue.add('Distance', function() {
    general.DISTANCE = !general.DISTANCE;
    //saveGeneral()
    return dialogues.clear();
  });
  dialogue.add('Trail', function() {
    general.TRAIL = !general.TRAIL;
    //saveGeneral()
    return dialogues.clear();
  });
  dialogue.add('Sector...', function() {
    return menu3();
  });
  dialogue.clock();
  return dialogue.textSize *= 1.5;
};

menu3 = function() { // Sector
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('10', function() {
    return SetSector(10); // 36
  });
  dialogue.add('20', function() {
    return SetSector(20); // 18
  });
  dialogue.add('30', function() {
    return SetSector(30); // 12
  });
  dialogue.add('45', function() {
    return SetSector(45); // 8
  });
  dialogue.add('60', function() {
    return SetSector(60); // 6
  });
  dialogue.add('90', function() {
    return SetSector(90); // 4
  });
  return dialogue.clock();
};

menu4 = function() { // Take
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('ABCDE', function() {
    return menu5('ABCDE');
  });
  dialogue.add('KLMNO', function() {
    return menu5('KLMNO');
  });
  dialogue.add('UVWXYZ', function() {
    return menu5('UVWXYZ');
  });
  dialogue.add('Clear', function() {
    return update(' ');
  });
  dialogue.add('PQRST', function() {
    return menu5('PQRST');
  });
  dialogue.add('FGHIJ', function() {
    return menu5('FGHIJ');
  });
  return dialogue.clock();
};

menu5 = function(letters) { // ABCDE
  var dialogue, j, len, letter;
  dialogue = new Dialogue();
  for (j = 0, len = letters.length; j < len; j++) {
    letter = letters[j];
    dialogue.add(letter, function() {
      return update(this.title);
    });
  }
  return dialogue.clock();
};

menu6 = function() { // More
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Exit', function() {
    navigator.geolocation.clearWatch(locationId);
    locationId = 0;
    return dialogues.clear();
  });
  // dialogue.add 'Talk', ->
  // 	console.log 'talk'
  // 	decreaseQueue()
  // 	dialogues.clear()
  dialogue.add('Mail...', function() {
    executeMail();
    return dialogues.clear();
  });
  dialogue.add('Delete', function() {
    storage.deleteControl();
    return dialogues.clear();
  });
  dialogue.add('Clear', function() {
    storage.clear();
    return dialogues.clear();
  });
  dialogue.add('Info...', function() {
    state = 2;
    return dialogues.clear();
  });
  dialogue.clock();
  return dialogue.textSize *= 1.5;
};

SetSector = function(sector) {
  general.SECTOR = sector;
  //saveGeneral()
  return dialogues.clear();
};

update = function(littera) {
  var key, lat, lon, x, y;
  key = findKey();
  [x, y] = crossHair;
  [lon, lat] = b2w.convert(x, y);
  storage.controls[key] = [x, y, littera, lat, lon];
  storage.save();
  crossHair = null;
  return dialogues.clear();
};

//executeMail()
showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

touchStarted = function(event) {
  var lastTouchStarted;
  lastTouchStarted = new Date();
  event.preventDefault();
  if (!released) {
    return;
  }
  speed = 1;
  if (general.PANSPEED) {
    speed = 0.1 + 0.9 * dist(mouseX, mouseY, width / 2, height / 2) / dist(0, 0, width / 2, height / 2);
  }
  dump.store(`touchStarted ${(new Date()) - start} ${JSON.stringify(touches)}`);
  released = false;
  startX = mouseX;
  startY = mouseY;
  return false;
};

touchMoved = function(event) {
  dump.store(`touchMoved ${(new Date()) - start} ${JSON.stringify(touches)}`);
  event.preventDefault();
  if (dialogues.length === 0 && state === 1) {
    cx += speed * (startX - mouseX) / SCALE;
    cy += speed * (startY - mouseY) / SCALE;
    startX = mouseX;
    startY = mouseY;
  }
  return false;
};

touchEnded = function(event) {
  var dialogue;
  //console.log 'touchEnded',released,state
  event.preventDefault();
  console.log('touchEnded', cx, cy);
  if ((new Date()) - lastTouchEnded < 500) {
    lastTouchEnded = new Date(); // to prevent double bounce
    return;
  }
  if (released) {
    return;
  }
  dump.store(`touchEnded ${(new Date()) - start} ${JSON.stringify(touches)}`);
  released = true;
  //if state == 0 then initSounds()
  if (state === 2) {
    dialogues.clear();
  }
  if (state === 0 || state === 2) {
    state = 1;
    return false;
  }
  if (menuButton.inside(mouseX, mouseY)) {
    menuButton.click();
    return false;
  }
  if (dialogues.length > 0) {
    dialogue = _.last(dialogues);
    //if not dialogue.execute mouseX,mouseY then dialogues.pop()
    dialogue.execute(mouseX, mouseY); // then dialogues.pop()
  }
  return false;
};

keyPressed = function() { // Används för att avläsa ABC bitmapskoordinater
  var letter, x, y;
  if (key === ' ') {
    x = round(cx + (mouseX - width / 2) / SCALE); // image koordinater
    y = round(cy + (mouseY - height / 2) / SCALE);
    // [lon,lat] = b2w.convert x,y
    // p = {coords:{longitude:lon,latitude:lat}}
    // console.log 'keyPressed',x,y,p
    // increaseQueue p # meters
    //decreaseQueue()
    letter = "ABC"[_.size(measure)];
    measure[letter] = [x, y];
    if (letter === 'C') {
      return console.log('"controls": ' + JSON.stringify(measure));
    }
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\gpsKarta\coffee\sketch.coffee