// Generated by CoffeeScript 2.4.1
var BR, DELAY, DIGITS, DIST, DISTLIST, Dump, LIMIT, MAP, SCALE, SECTOR, SetSector, TRACKED, VERSION, addZero, assert, b2w, bearingSaid, clearControls, controls, currentControl, cx, cy, data, decreaseQueue, distanceSaid, draw, drawControl, drawControls, drawInfo, drawReferencePoints, drawScale, drawTrack, drawTrail, dump, executeMail, firstInfo, fraction, getBike, getControls, getMeters, gps, gpsCount, gpsLat, gpsLon, img, increaseQueue, info, initControls, initSpeaker, jcnindex, lastLocation, locationUpdate, locationUpdateFail, makeTargets, menu1, menu3, menu4, menu5, menu6, menu7, menuButton, messages, params, platform, playSound, position, preload, recordingTrail, released, saveControls, say, sayBearing, sayDistance, sendMail, setBike, setTarget, setup, showDialogue, soundDown, soundQueue, soundUp, speaker, startX, startY, state, stdDateTime, targets, test, timeout, touchEnded, touchMoved, touchStarted, track, trail, trgLat, trgLon, update, updateTrack, updateTrail, voiceQueue, w2b,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

VERSION = 94;

DELAY = 100; // ms, delay between sounds

DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike

LIMIT = 20; // meter. Under this value is no bearing given.

SECTOR = 10; // Bearing resolution in degrees

MAP = null; // json file

DIGITS = 'nolla ett tvåa trea fyra femma sexa sju åtta nia'.split(' ');

BR = '<br>';


// http://www.bvsok.se/Kartor/Skolkartor/
// Högupplösta orienteringskartor: https://www.omaps.net
// https://omaps.blob.core.windows.net/map-excerpts/1fdc587ffdea489dbd69e29b10b48395.jpeg Nackareservatet utan kontroller.
DISTLIST = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];

trail = []; // insert bitmap points from mail here

// [840,957], [842,943], [844,931], [855,925], [851,913], [842,903], [834,893], [828,882], [832,870], [833,858], [827,847], [818,839], [807,832], [800,822], [794,811], [787,801], [779,792], [767,787], [767,774], [767,760], [762,747], [754,738], [754,725], [754,711], [757,699], [756,687], [754,674], [754,661], [759,650], [757,638], [753,626], [746,615], [741,604], [741,591], [739,578], [738,566], [737,554], [734,542], [724,533], [714,525], [703,520], [691,516], [684,506], [684,493], [675,485], [672,473], [676,461], [680,449], [683,437], [686,425], [691,413], [692,401], [693,389], # A
// [694,382], [699,371], [706,360], [714,351], [726,347], [737,340], [749,339], [763,339], [775,340], [787,336], [800,336], [812,335], [822,328], [828,317], [836,308], [848,304], [860,303], [867,293], [872,282], [873,270], [883,262], [896,257], [908,253], [920,251], [932,247], [938,236], [947,227], # B
// [946,224], [956,233], [967,238], [978,245], [988,252], [996,262], [1007,268], [1017,276], [1027,283], [1040,286], [1052,284], [1064,285], [1077,285], [1089,288], [1102,289], [1111,297], [1121,290], [1130,282], [1143,283], [1156,280], [1168,274], [1179,269], [1191,268], [1203,266], [1215,268], [1226,273], [1239,273], [1250,279], [1263,280], [1268,291], [1279,286], [1291,283], [1300,275], [1312,271], [1323,266], [1333,273], [1346,273], [1359,269], [1372,272], [1382,279], [1394,281], [1407,280], [1416,288], # C
// [1417,285], [1429,287], [1440,293], [1451,299], [1459,309], [1471,313], [1484,313], [1496,314], [1508,318], [1517,310], [1528,315], [1540,317], [1552,316], [1564,317], [1575,322], [1587,326], [1599,330], [1611,327], [1621,319], [1633,314], [1644,320], [1652,330], [1663,335], [1676,335], [1688,337], [1701,337], [1713,338], [1725,342], [1737,343], [1749,342], [1760,347], [1773,352], [1784,358], [1796,361], [1808,365], [1821,365], [1834,365], [1846,367], [1858,369], [1870,368], [1882,364], [1893,369], [1903,376], [1910,386], [1923,386], [1934,391], [1944,398], [1955,403], [1966,409], [1978,413], [1989,418], [2001,420], [2011,427], [2020,435], [2032,433], [2043,439] , # D
// [2063,437], [2067,449], [2070,462], [2071,474], [2078,484], [2077,496], [2071,508], [2076,519], [2078,532], [2081,544], [2083,556], [2085,568], [2084,580], [2084,594], [2087,606], [2088,618], [2092,630], [2089,642], [2076,643], [2079,655], [2083,667], [2085,679], [2077,688], [2066,693], [2057,701], [2050,711], [2047,723], [2048,736], [2047,748], [2044,760], [2036,769], [2034,781], [2029,792], [2025,804], [2023,816], [2020,829], [2016,841], [2014,853], [2009,865], [1997,870], [1988,878], [1984,890], [1977,901], [1974,914], [1967,925], [1964,938], [1961,950], [1956,962], [1948,971], [1936,976], [1923,980], [1915,989], [1908,999], [1896,1004], [1883,1002], [1870,1003], [1857,1006], [1850,1016], [1851,1028], [1844,1039], [1835,1048], [1836,1060] , # E
// [1845,1072], [1844,1085], [1842,1097], [1830,1103], [1820,1110], [1809,1117], [1798,1123], [1786,1125], [1774,1126], [1762,1125], [1750,1129], [1738,1134], [1726,1133], [1723,1145], [1712,1150], [1702,1158], [1692,1166], [1686,1177], [1675,1183], [1666,1192], [1654,1195], [1665,1201], [1660,1213], [1664,1225], [1668,1237], [1670,1249], [1660,1256], [1647,1256], [1635,1259], [1623,1263], [1611,1267], [1601,1274], [1588,1276], [1576,1273], [1565,1278], [1554,1283], [1542,1281] , # F
// [1533,1269], [1521,1272], [1513,1282], [1508,1294], [1508,1310], [1499,1318], [1488,1323], [1477,1329], [1466,1334], [1456,1342], [1449,1353], [1441,1363], [1429,1365], [1420,1373], [1407,1374], [1395,1377], [1382,1380], [1370,1374], [1361,1382], [1349,1385], [1336,1384], [1324,1389], [1312,1391], [1300,1393], [1288,1394], [1276,1393], [1267,1402], [1255,1398], [1247,1407], [1235,1412], [1229,1423], [1223,1435], [1222,1447], [1216,1458], [1211,1469], [1203,1479], [1205,1491], [1200,1502], [1192,1511], [1182,1519], [1171,1524], [1159,1519], [1149,1511], [1145,1498], [1138,1487], [1126,1483], [1114,1480], [1105,1472], [1094,1477], [1082,1481], [1074,1490] # G
params = null;

recordingTrail = false;

state = 0; // 0=uninitialized 1=normal 2=info

data = null;

img = null;

b2w = null;

w2b = null;

startX = 0;

startY = 0;

controls = {};

menuButton = null;

Dump = class Dump {
  constructor() {
    this.data = [];
    this.active = false;
  }

  store(msg) {
    if (this.active) {
      console.log(msg);
      return this.data.push(msg);
    }
  }

  get() {
    var result;
    result = this.data.join(BR);
    this.data = [];
    return result + BR + BR;
  }

};

dump = new Dump();

clearControls = function() {
  var currentControl, trgLat, trgLon;
  controls = data.controls;
  [trgLat, trgLon] = [0, 0];
  currentControl = null;
  initControls();
  return saveControls();
};

targets = []; // [id, littera, distance]

platform = null;

saveControls = function() {
  return localStorage['gpsKarta' + MAP] = JSON.stringify(controls);
};

getControls = function() {
  try {
    return controls = JSON.parse(localStorage['gpsKarta' + MAP]);
  } catch (error1) {
    return clearControls();
  }
};

initControls = function() {
  var control, gpsLat, gpsLon, key, lat, littera, lon, trgLat, trgLon, x, y, z99;
  for (key in controls) {
    control = controls[key];
    [x, y, littera] = control;
    [lon, lat] = b2w.convert(x, y);
    control[3] = lat;
    control[4] = lon;
  }
  if (currentControl !== null) {
    return [gpsLat, gpsLon, z99, trgLat, trgLon] = controls[currentControl];
  }
};

makeTargets = function() {
  var b, c, control, key, lat, littera, lon, x, y;
  targets = [];
  c = LatLon(gpsLat, gpsLon);
  for (key in controls) {
    control = controls[key];
    [x, y, littera, lat, lon] = control;
    b = LatLon(lat, lon);
    targets.push([key, littera, round(b.distanceTo(c))]);
  }
  return targets;
};

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = 1;

gps = null;

TRACKED = 5; // circles shows the player's position

position = null; // gps position (pixels)

track = []; // five latest GPS positions (pixels)

speaker = null;

soundUp = null;

soundDown = null;

soundQueue = 0; // neg=minskat avstånd pos=ökat avstånd

jcnindex = 0;

messages = ['', '', '', '', '', ''];

gpsCount = 0;

[gpsLat, gpsLon] = [
  0,
  0 // avgör om muntlig information ska ges
];

[trgLat, trgLon] = [
  0,
  0 // koordinater för valt target
];

currentControl = null;

lastLocation = ''; // används för att skippa lika koordinater

timeout = null;

voiceQueue = [];

bearingSaid = '';

distanceSaid = '';

released = true;

sendMail = function(subject, body) {
  mail.href = encodeURI(`mailto:${data.mail}?subject=${subject}&body=${body}`);
  //console.log mail.href
  return mail.click();
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  dump.store("");
  dump.store(`say ${m} ${JSON.stringify(voiceQueue)}`);
  return speechSynthesis.speak(speaker);
};

preload = function() {
  params = getParameters();
  if (params.debug) {
    dump.active = params.debug === '1';
  }
  MAP = params.map || 'skarpnäck';
  return loadJSON(`data/${MAP}.json`, function(json) {
    var control, key, ref;
    data = json;
    ref = data.controls;
    for (key in ref) {
      control = ref[key];
      control.push("");
      control.push(0);
      control.push(0);
    }
    return img = loadImage("data/" + data.map);
  });
};

sayDistance = function(a, b) { // a is newer (meter)
  var d, j, len;
  // if a border is crossed, produce speech
  dump.store(`D ${myRound(a, 1)} ${myRound(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  for (j = 0, len = DISTLIST.length; j < len; j++) {
    d = DISTLIST[j];
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

sayBearing = function(a0, b0) { // a is newer (degrees)
  var a, b, ental, tiotal;
  dump.store(`B ${myRound(a0, 1)} ${myRound(b0, 1)}`);
  // if a sector limit is crossed, tell the new bearing
  a = SECTOR * round(a0 / SECTOR);
  b = SECTOR * round(b0 / SECTOR);
  if (a === b && b0 !== -1) {
    return ""; // samma sektor
  }
  a = round(a / 10);
  if (a === 0) {
    a = 36; // 01..36
  }
  tiotal = DIGITS[Math.floor(a / 10)];
  ental = DIGITS[modulo(a, 10)];
  return `${tiotal} ${ental}`;
};

increaseQueue = function(p) {
  var a, b, bearinga, bearingb, c, dista, distance, distb, sBearing, sDistance;
  //dump.store "soundIndicator #{p.coords.latitude} #{p.coords.longitude}"
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  dista = a.distanceTo(c);
  distb = b.distanceTo(c);
  distance = round((dista - distb) / DIST);
  if (trgLat !== 0) {
    bearinga = a.bearingTo(c);
    bearingb = b.bearingTo(c);
    if (dista >= LIMIT) {
      sBearing = sayBearing(bearinga, bearingb);
      if (sBearing !== "") {
        voiceQueue.push(`bäring ${sBearing}`);
      }
    }
    sDistance = sayDistance(dista, distb);
    if (sDistance !== "") {
      voiceQueue.push(`distans ${sDistance}`);
    }
  }
  if (distance !== 0) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = myRound(p.coords.latitude, 6);
    gpsLon = myRound(p.coords.longitude, 6);
  }
  if (abs(distance) < 10) {
    return soundQueue = distance; // ett antal DIST
  }
};

firstInfo = function(key) {
  var b, bearingb, c, distance, distb;
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  distb = round(b.distanceTo(c));
  distance = round(distb / DIST);
  bearingb = b.bearingTo(c);
  voiceQueue.push(`target ${key} ${sayBearing(bearingb, -1)} ${sayDistance(distb, -1)}`);
  dump.store("");
  dump.store(`target ${currentControl}`);
  dump.store(`gps ${[gpsLat, gpsLon]}`);
  dump.store(`trg ${[trgLat, trgLon]}`);
  dump.store(`voiceQueue ${voiceQueue}`);
  if (abs(distance) < 10) {
    return soundQueue = distance; // ett antal DIST
  }
};

playSound = function() {
  if (soundQueue === 0) {
    return;
  }
  if (soundQueue < 0 && soundDown !== null) {
    soundQueue++;
    return soundDown.play();
  } else if (soundQueue > 0 && soundUp !== null) {
    soundQueue--;
    return soundUp.play();
  }
};

decreaseQueue = function() {
  var arr, msg;
  if (voiceQueue.length === 0) {
    return;
  }
  msg = voiceQueue.shift();
  arr = msg.split(' ');
  if (arr[0] === 'bäring') {
    msg = arr[1] + ' ' + arr[2];
    if (bearingSaid !== msg) {
      say(msg);
    }
    return bearingSaid = msg;
  } else if (arr[0] === 'distans') {
    msg = arr[1];
    if (distanceSaid !== msg) {
      say(msg);
    }
    return distanceSaid = msg;
  } else if (arr[0] === 'target') {
    // 'target 11. bäring etta tvåa. distans 250 meter'
    msg = `${arr[0]} ${arr[1]}. bäring ${arr[2]} ${arr[3]}. distans ${arr[4]} meter`;
    bearingSaid = arr[2] + ' ' + arr[3];
    distanceSaid = arr[4];
    return say(msg);
  }
};

locationUpdate = function(p) {
  var nextLocation, pLat, pLon;
  pLat = myRound(p.coords.latitude, 6);
  pLon = myRound(p.coords.longitude, 6);
  nextLocation = `${pLat} ${pLon}`;
  gpsCount++;
  messages[5] = gpsCount;
  decreaseQueue();
  if (nextLocation === lastLocation) {
    return;
  }
  lastLocation = nextLocation;
  updateTrack(p.timestamp, pLat, pLon);
  increaseQueue(p);
  //if currentControl == null then return
  return updateTrail();
};

updateTrack = function(timestamp, pLat, pLon) {
  var d, t;
  d = new Date();
  d.setTime(timestamp);
  dump.store("");
  dump.store(`LU ${d.toLocaleString('SWE')} ${pLat} ${pLon}`);
  if (gpsLat !== 0) {
    position = w2b.convert(pLon, pLat);
    track.push(position);
    if (track.length > TRACKED) {
      track.shift();
    }
    t = _.last(track);
    dump.store(`T ${t[0]} ${t[1]}`);
    return messages[4] = pLat + ' ' + pLon;
  }
};

updateTrail = function() {
  var x1, x2, y1, y2;
  if (recordingTrail) {
    if (trail.length === 0) {
      return trail.push(position);
    } else {
      [x1, y1] = _.last(trail);
      [x2, y2] = position;
      if (12 < dist(x1, y1, x2, y2)) {
        return trail.push(position);
      }
    }
  }
};

locationUpdateFail = function(error) {
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['Check location permissions'];
  }
};

initSpeaker = function(index = 5) {
  var voices;
  dump.store(`initSpeaker in ${index}`);
  soundUp = loadSound('soundUp.wav');
  soundDown = loadSound('soundDown.wav');
  soundUp.setVolume(0.1);
  soundDown.setVolume(0.1);
  clearInterval(timeout);
  timeout = setInterval(playSound, DELAY);
  soundQueue = 0;
  speaker = new SpeechSynthesisUtterance();
  voices = speechSynthesis.getVoices();
  speaker.voice = voices[index];
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 0.8;
  speaker.pitch = 0.8;
  speaker.text = '';
  speaker.lang = 'sv-SE';
  dialogues.clear();
  say("Välkommen!");
  track = [];
  return dump.store("initSpeaker out");
};

fraction = function(x) {
  return x - int(x);
};

getMeters = function(w, skala) {
  var d, distans, fract, i, j, lat0, lat1, len, lon0, lon1, n, p0, p1, ref;
  [lon0, lat0] = b2w.convert(0, height);
  [lon1, lat1] = b2w.convert(w, height);
  p0 = LatLon(lat0, lon0);
  p1 = LatLon(lat1, lon1);
  distans = p0.distanceTo(p1) / skala;
  d = Math.log10(distans);
  fract = fraction(d);
  return [425, 200];
  ref = [1, 2, 5];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (10 ** fract > i) {
      n = i;
    }
  }
  return [round(distans), n * 10 ** int(d)];
};

test = function() {
  assert([1434, 1000], getMeters(1920, 1));
  assert([956, 500], getMeters(1920, 1.5));
  assert([638, 500], getMeters(1920, 1.5 * 1.5));
  assert([425, 200], getMeters(1920, 1.5 * 1.5 * 1.5));
  return console.log("Ready!");
};

setup = function() {
  var canvas;
  canvas = createCanvas(innerWidth - 0.0, innerHeight); //-0.5
  canvas.position(0, 0); // hides text field used for clipboard copy.
  platform = window.navigator.platform;
  angleMode(DEGREES);
  SCALE = data.scale;
  [cx, cy] = [img.width / 2, img.height / 2];
  b2w = new Converter(data.bmp, data.wgs, 6);
  w2b = new Converter(data.wgs, data.bmp, 0);
  //test()
  getControls();
  position = [img.width / 2, img.height / 2];
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  menuButton = new MenuButton(width - 160);
  return addEventListener('touchstart', function(evt) {
    var mx, my, touch, touches;
    touches = evt.changedTouches;
    touch = touches[touches.length - 1];
    mx = touch.pageX;
    my = touch.pageY;
    return myMousePressed(mx, my);
  });
};

info = function() {
  var result;
  result = [];
  result.push(`MAP ${MAP}`);
  result.push(`VERSION ${VERSION}`);
  result.push(`dump.active ${dump.active}`);
  result.push(`dump.data.length ${dump.data.length}`);
  result.push(`trail.length ${trail.length}`);
  result.push(`gpsCount ${gpsCount}`);
  result.push(`SECTOR ${SECTOR}`);
  result.push(`cx ${cx} cy ${cy}`);
  result.push(`SCALE ${SCALE}`);
  return result;
};

drawInfo = function() {
  var i, j, len, m, ref, results;
  textAlign(LEFT, CENTER);
  sc();
  fc(0);
  ref = info();
  results = [];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    m = ref[i];
    results.push(text(m, 20, 100 * (i + 1)));
  }
  return results;
};

drawTrack = function() {
  var i, j, len, results, x, y;
  fc();
  sw(1 / SCALE);
  sc(0);
  results = [];
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    [x, y] = track[i];
    results.push(circle(x - cx, y - cy, 5 * (track.length - i)));
  }
  return results;
};

drawTrail = function() {
  var j, len, results, x, y;
  fc();
  sw(12);
  sc(1, 0, 0, 0.5); // RED
  results = [];
  for (j = 0, len = trail.length; j < len; j++) {
    [x, y] = trail[j];
    results.push(point(x - cx, y - cy));
  }
  return results;
};

drawControls = function() {
  var control, key, ref, results, x, y;
  textAlign(LEFT, TOP);
  textSize(data.radius);
  sw(2);
  ref = data.controls;
  results = [];
  for (key in ref) {
    control = ref[key];
    [x, y] = control;
    sc(0);
    fc();
    circle(x - cx, y - cy, data.radius);
    sc();
    fc(0);
    results.push(text(key, x - cx + 0.7 * data.radius, y - cy + 0.7 * data.radius));
  }
  return results;
};

drawControl = function() {
  var bearing, control, latLon1, latLon2, x, y;
  if (trgLat === 0 && trgLon === 0) {
    return;
  }
  latLon2 = LatLon(trgLat, trgLon);
  latLon1 = LatLon(gpsLat, gpsLon);
  bearing = latLon1.bearingTo(latLon2);
  messages[0] = `${int(bearing)}º`;
  messages[1] = currentControl;
  messages[2] = `${round(latLon1.distanceTo(latLon2))} m`;
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  sc();
  fc(0, 0, 0, 0.25);
  return circle(x - cx, y - cy, data.radius);
};

drawReferencePoints = function() {
  var i, j, len, p, ref;
  push();
  textAlign(CENTER, CENTER);
  textSize(20);
  ref = range(3);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    p = w2b.convert(data.wgs[2 * i], data.wgs[2 * i + 1]);
    sw(1);
    fc();
    sc(0);
    circle(data.bmp[2 * i] - cx, data.bmp[2 * i + 1] - cy, 9);
    circle(p[0] - cx, p[1] - cy, 12);
    sw(2);
    fc(0);
    sc();
    text(i, data.bmp[2 * i] - cx, 1.5 + data.bmp[2 * i + 1] - cy);
  }
  return pop();
};

drawScale = function() {
  var d, h, w, w0, w1, x, y;
  [w1, w0] = getMeters(width, SCALE);
  d = (w1 - w0) / 2 / w1 * width;
  x = d;
  y = height * 0.9;
  w = w0 / w1 * width;
  h = 10;
  sc(0);
  sw(2);
  line(x, y, x + w, y);
  textAlign(CENTER, CENTER);
  sc();
  fc(0);
  text(0, d, y - 20);
  return text(w0, width - d, y - 20);
};

draw = function() {
  var i, j, len, margin, message;
  bg(0, 1, 0);
  if (state === 0) {
    textSize(200);
    textAlign(CENTER, CENTER);
    text(MAP, width / 2, height / 2 - 200);
    text(VERSION, width / 2, height / 2);
    if (dump.active) {
      text('debug', width / 2, height / 2 + 200);
    }
    return;
  }
  if (state === 1) {
    push();
    translate(width / 2, height / 2);
    scale(SCALE);
    image(img, -cx, -cy);
    drawReferencePoints();
    drawTrail();
    drawTrack();
    if (data.drawControls) {
      drawControls();
    }
    drawControl();
    pop();
    fc(0);
    sc(1, 1, 0);
    sw(3);
    margin = 25;
    for (i = j = 0, len = messages.length; j < len; i = ++j) {
      message = messages[i];
      textAlign([LEFT, CENTER, RIGHT][i % 3], [TOP, BOTTOM][Math.floor(i / 3)]);
      textSize([100, 50][Math.floor(i / 3)]);
      text(message, [margin, width / 2, width - margin][i % 3], [margin, height][Math.floor(i / 3)]);
    }
    showDialogue();
    menuButton.draw();
    drawScale();
    return;
  }
  if (state === 2) {
    drawInfo();
  }
};

setTarget = function(key) {
  var control, x, y;
  if (!(key in controls)) {
    return;
  }
  if (controls[currentControl] === null) {
    return;
  }
  trail = [];
  recordingTrail = true;
  soundQueue = 0;
  currentControl = key;
  control = controls[currentControl];
  x = control[0];
  y = control[1];
  [trgLon, trgLat] = b2w.convert(x, y);
  firstInfo(key);
  return dialogues.clear();
};

executeMail = function() { // Sends the trail
  var arr, littera, r, s, x, y;
  r = info().join(BR);
  if (currentControl) {
    littera = controls[currentControl][2];
    arr = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = trail.length; j < len; j++) {
        [x, y] = trail[j];
        results.push(`[${x},${y}]`);
      }
      return results;
    })();
    s = arr.join(",");
  } else {
    s = "";
  }
  return sendMail(`${data.map} ${currentControl} ${littera}`, r + BR + dump.get() + s);
};

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

getBike = function() {
  return setTarget('bike');
};

setBike = function() {
  var x, y;
  [x, y] = w2b.convert(gpsLon, gpsLat);
  controls.bike = [x, y, '', gpsLat, gpsLon];
  return dialogues.clear();
};

menu1 = function() { // Main Menu
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Center', function() {
    [cx, cy] = position;
    return dialogues.clear();
  });
  dialogue.add('Out', function() {
    if (SCALE > data.scale) {
      return SCALE /= 1.5;
    }
  });
  dialogue.add('Take...', function() {
    return menu4();
  });
  dialogue.add('Goto Bike', function() {
    return setTarget('bike');
  });
  dialogue.add('More...', function() {
    return menu6();
  });
  dialogue.add('Store Bike', function() {
    return setBike();
  });
  dialogue.add('Target...', function() {
    return menu3();
  });
  dialogue.add('In', function() {
    return SCALE *= 1.5;
  });
  dialogue.clock(' ', true);
  return dialogue.textSize *= 1.5;
};

menu3 = function() { // Target
  var dialogue, lst;
  dialogue = new Dialogue(0, 0);
  targets = makeTargets();
  lst = targets.slice();
  lst = lst.sort(function(a, b) {
    return a[2] - b[2];
  });
  return dialogue.list(lst, 8, false, function(arr) {
    if (arr.length > 0) {
      setTarget(arr[0]);
    }
    return dialogues.clear();
  });
};

menu4 = function() { // Take
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('ABCDE', function() {
    return menu5('ABCDE');
  });
  dialogue.add('KLMNO', function() {
    return menu5('KLMNO');
  });
  dialogue.add('UVWXYZ', function() {
    return menu5('UVWXYZ');
  });
  dialogue.add('Clear', function() {
    return update(' ');
  });
  dialogue.add('PQRST', function() {
    return menu5('PQRST');
  });
  dialogue.add('FGHIJ', function() {
    return menu5('FGHIJ');
  });
  return dialogue.clock();
};

menu5 = function(letters) { // ABCDE
  var dialogue, j, len, letter;
  dialogue = new Dialogue();
  for (j = 0, len = letters.length; j < len; j++) {
    letter = letters[j];
    dialogue.add(letter, function() {
      return update(this.title);
    });
  }
  return dialogue.clock();
};

menu6 = function() { // More
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Init', function() {
    return initSpeaker(jcnindex++);
  });
  dialogue.add('Mail', function() {
    executeMail();
    return dialogues.clear();
  });
  dialogue.add('Sector', function() {
    return menu7();
  });
  dialogue.add('Clear', function() {
    clearControls();
    return dialogues.clear();
  });
  dialogue.add('Info', function() {
    state = 2;
    return dialogues.clear();
  });
  return dialogue.clock();
};

menu7 = function() { // Sector
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('10', function() {
    return SetSector(10); // 36
  });
  dialogue.add('20', function() {
    return SetSector(20); // 18
  });
  dialogue.add('30', function() {
    return SetSector(30); // 12
  });
  dialogue.add('45', function() {
    return SetSector(45); // 8
  });
  dialogue.add('60', function() {
    return SetSector(60); // 6
  });
  dialogue.add('90', function() {
    return SetSector(90); // 4
  });
  return dialogue.clock();
};

SetSector = function(sector) {
  SECTOR = sector;
  return dialogues.clear();
};

addZero = function(n) {
  if (n <= 9) {
    return "0" + n;
  } else {
    return n;
  }
};

stdDateTime = function(date) {
  var M, d, h, m, s, y;
  y = date.getFullYear();
  m = addZero(date.getMonth() + 1);
  d = addZero(date.getDate());
  h = addZero(date.getHours());
  M = addZero(date.getMinutes());
  s = addZero(date.getSeconds());
  return `${y}-${m}-${d} ${h}:${M}:${s}`;
};

update = function(littera, index = 2) {
  var control, x, y;
  recordingTrail = false;
  control = controls[currentControl];
  [x, y] = w2b.convert(gpsLon, gpsLat);
  controls[currentControl][index] = littera;
  saveControls();
  dialogues.clear();
  executeMail();
  return getBike();
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

touchStarted = function(event) {
  event.preventDefault();
  startX = mouseX;
  startY = mouseY;
  state = 1;
  return false;
};

touchMoved = function(event) {
  event.preventDefault();
  if (dialogues.length === 0 && state === 1) {
    cx += (startX - mouseX) / SCALE;
    cy += (startY - mouseY) / SCALE;
    startX = mouseX;
    startY = mouseY;
  }
  return false;
};

touchEnded = function(event) {
  var dialogue;
  event.preventDefault();
  if (state === 0) {
    initSpeaker();
  }
  if (state === 2) {
    dialogues.clear();
  }
  if (state === 0 || state === 2) {
    return state = 1;
  }
  if (menuButton.inside(mouseX, mouseY)) {
    return menuButton.click();
  }
  if (dialogues.length > 0) {
    dialogue = _.last(dialogues);
    if (!dialogue.execute(mouseX, mouseY)) {
      dialogues.pop();
    }
  }
  return false;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLFdBQUEsRUFBQSxhQUFBLEVBQUEsUUFBQSxFQUFBLGNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxhQUFBLEVBQUEsWUFBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsWUFBQSxFQUFBLFFBQUEsRUFBQSxtQkFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLGFBQUEsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLFdBQUEsRUFBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLGNBQUEsRUFBQSxrQkFBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsY0FBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFB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LENBQUMsS0FBRCxDQUFBO0VBQ1osS0FBSyxDQUFDLGNBQU4sQ0FBQTtFQUNBLElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBcEIsSUFBMEIsS0FBQSxLQUFTLENBQXRDO0lBQ0MsRUFBQSxJQUFNLENBQUMsTUFBQSxHQUFTLE1BQVYsQ0FBQSxHQUFrQjtJQUN4QixFQUFBLElBQU0sQ0FBQyxNQUFBLEdBQVMsTUFBVixDQUFBLEdBQWtCO0lBQ3hCLE1BQUEsR0FBUztJQUNULE1BQUEsR0FBUyxPQUpWOztTQUtBO0FBUFk7O0FBU2IsVUFBQSxHQUFhLFFBQUEsQ0FBQyxLQUFELENBQUE7QUFDWixNQUFBO0VBQUEsS0FBSyxDQUFDLGNBQU4sQ0FBQTtFQUNBLElBQUcsS0FBQSxLQUFTLENBQVo7SUFBbUIsV0FBQSxDQUFBLEVBQW5COztFQUNBLElBQUcsS0FBQSxLQUFTLENBQVo7SUFBbUIsU0FBUyxDQUFDLEtBQVYsQ0FBQSxFQUFuQjs7RUFDQSxJQUFHLEtBQUEsS0FBVSxDQUFWLElBQUEsS0FBQSxLQUFZLENBQWY7QUFBdUIsV0FBTyxLQUFBLEdBQVEsRUFBdEM7O0VBQ0EsSUFBRyxVQUFVLENBQUMsTUFBWCxDQUFrQixNQUFsQixFQUF5QixNQUF6QixDQUFIO0FBQXdDLFdBQU8sVUFBVSxDQUFDLEtBQVgsQ0FBQSxFQUEvQzs7RUFFQSxJQUFHLFNBQVMsQ0FBQyxNQUFWLEdBQW1CLENBQXRCO0lBQ0MsUUFBQSxHQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sU0FBUDtJQUNYLElBQUcsQ0FBSSxRQUFRLENBQUMsT0FBVCxDQUFpQixNQUFqQixFQUF3QixNQUF4QixDQUFQO01BQTJDLFNBQVMsQ0FBQyxHQUFWLENBQUEsRUFBM0M7S0FGRDs7U0FJQTtBQVhZIiwic291cmNlc0NvbnRlbnQiOlsiVkVSU0lPTiA9IDk0XHJcbkRFTEFZID0gMTAwICMgbXMsIGRlbGF5IGJldHdlZW4gc291bmRzXHJcbkRJU1QgPSAxICMgbWV0ZXIuIE1vdmVtZW50IGxlc3MgdGhhbiBESVNUIG1ha2VzIG5vIHNvdW5kIDE9d2Fsay4gNT1iaWtlXHJcbkxJTUlUID0gMjAgIyBtZXRlci4gVW5kZXIgdGhpcyB2YWx1ZSBpcyBubyBiZWFyaW5nIGdpdmVuLlxyXG5TRUNUT1IgPSAxMCAjIEJlYXJpbmcgcmVzb2x1dGlvbiBpbiBkZWdyZWVzXHJcbk1BUCA9IG51bGwgIyBqc29uIGZpbGVcclxuRElHSVRTID0gJ25vbGxhIGV0dCB0dsOlYSB0cmVhIGZ5cmEgZmVtbWEgc2V4YSBzanUgw6V0dGEgbmlhJy5zcGxpdCAnICdcclxuQlIgPSAnPGJyPicgICBcclxuXHJcbiMgaHR0cDovL3d3dy5idnNvay5zZS9LYXJ0b3IvU2tvbGthcnRvci9cclxuIyBIw7ZndXBwbMO2c3RhIG9yaWVudGVyaW5nc2thcnRvcjogaHR0cHM6Ly93d3cub21hcHMubmV0XHJcbiMgaHR0cHM6Ly9vbWFwcy5ibG9iLmNvcmUud2luZG93cy5uZXQvbWFwLWV4Y2VycHRzLzFmZGM1ODdmZmRlYTQ4OWRiZDY5ZTI5YjEwYjQ4Mzk1LmpwZWcgTmFja2FyZXNlcnZhdGV0IHV0YW4ga29udHJvbGxlci5cclxuXHJcbkRJU1RMSVNUID0gWzAsMiw0LDYsOCwxMCwxMiwxNCwxNiwxOCwyMCwzMCw0MCw1MCw2MCw3MCw4MCw5MCwxMDAsIDEyMCwxNDAsMTYwLDE4MCwyMDAsMjUwLDMwMCwzNTAsNDAwLDQ1MCw1MDAsNjAwLDcwMCw4MDAsOTAwLDEwMDAsMjAwMCwzMDAwLDQwMDAsNTAwMCw2MDAwLDcwMDAsODAwMCw5MDAwLDEwMDAwXVxyXG5cclxudHJhaWwgPSBbXHQjIGluc2VydCBiaXRtYXAgcG9pbnRzIGZyb20gbWFpbCBoZXJlXHJcblx0IyBbODQwLDk1N10sIFs4NDIsOTQzXSwgWzg0NCw5MzFdLCBbODU1LDkyNV0sIFs4NTEsOTEzXSwgWzg0Miw5MDNdLCBbODM0LDg5M10sIFs4MjgsODgyXSwgWzgzMiw4NzBdLCBbODMzLDg1OF0sIFs4MjcsODQ3XSwgWzgxOCw4MzldLCBbODA3LDgzMl0sIFs4MDAsODIyXSwgWzc5NCw4MTFdLCBbNzg3LDgwMV0sIFs3NzksNzkyXSwgWzc2Nyw3ODddLCBbNzY3LDc3NF0sIFs3NjcsNzYwXSwgWzc2Miw3NDddLCBbNzU0LDczOF0sIFs3NTQsNzI1XSwgWzc1NCw3MTFdLCBbNzU3LDY5OV0sIFs3NTYsNjg3XSwgWzc1NCw2NzRdLCBbNzU0LDY2MV0sIFs3NTksNjUwXSwgWzc1Nyw2MzhdLCBbNzUzLDYyNl0sIFs3NDYsNjE1XSwgWzc0MSw2MDRdLCBbNzQxLDU5MV0sIFs3MzksNTc4XSwgWzczOCw1NjZdLCBbNzM3LDU1NF0sIFs3MzQsNTQyXSwgWzcyNCw1MzNdLCBbNzE0LDUyNV0sIFs3MDMsNTIwXSwgWzY5MSw1MTZdLCBbNjg0LDUwNl0sIFs2ODQsNDkzXSwgWzY3NSw0ODVdLCBbNjcyLDQ3M10sIFs2NzYsNDYxXSwgWzY4MCw0NDldLCBbNjgzLDQzN10sIFs2ODYsNDI1XSwgWzY5MSw0MTNdLCBbNjkyLDQwMV0sIFs2OTMsMzg5XSwgIyBBXHJcblx0IyBbNjk0LDM4Ml0sIFs2OTksMzcxXSwgWzcwNiwzNjBdLCBbNzE0LDM1MV0sIFs3MjYsMzQ3XSwgWzczNywzNDBdLCBbNzQ5LDMzOV0sIFs3NjMsMzM5XSwgWzc3NSwzNDBdLCBbNzg3LDMzNl0sIFs4MDAsMzM2XSwgWzgxMiwzMzVdLCBbODIyLDMyOF0sIFs4MjgsMzE3XSwgWzgzNiwzMDhdLCBbODQ4LDMwNF0sIFs4NjAsMzAzXSwgWzg2NywyOTNdLCBbODcyLDI4Ml0sIFs4NzMsMjcwXSwgWzg4MywyNjJdLCBbODk2LDI1N10sIFs5MDgsMjUzXSwgWzkyMCwyNTFdLCBbOTMyLDI0N10sIFs5MzgsMjM2XSwgWzk0NywyMjddLCAjIEJcclxuXHQjIFs5NDYsMjI0XSwgWzk1NiwyMzNdLCBbOTY3LDIzOF0sIFs5NzgsMjQ1XSwgWzk4OCwyNTJdLCBbOTk2LDI2Ml0sIFsxMDA3LDI2OF0sIFsxMDE3LDI3Nl0sIFsxMDI3LDI4M10sIFsxMDQwLDI4Nl0sIFsxMDUyLDI4NF0sIFsxMDY0LDI4NV0sIFsxMDc3LDI4NV0sIFsxMDg5LDI4OF0sIFsxMTAyLDI4OV0sIFsxMTExLDI5N10sIFsxMTIxLDI5MF0sIFsxMTMwLDI4Ml0sIFsxMTQzLDI4M10sIFsxMTU2LDI4MF0sIFsxMTY4LDI3NF0sIFsxMTc5LDI2OV0sIFsxMTkxLDI2OF0sIFsxMjAzLDI2Nl0sIFsxMjE1LDI2OF0sIFsxMjI2LDI3M10sIFsxMjM5LDI3M10sIFsxMjUwLDI3OV0sIFsxMjYzLDI4MF0sIFsxMjY4LDI5MV0sIFsxMjc5LDI4Nl0sIFsxMjkxLDI4M10sIFsxMzAwLDI3NV0sIFsxMzEyLDI3MV0sIFsxMzIzLDI2Nl0sIFsxMzMzLDI3M10sIFsxMzQ2LDI3M10sIFsxMzU5LDI2OV0sIFsxMzcyLDI3Ml0sIFsxMzgyLDI3OV0sIFsxMzk0LDI4MV0sIFsxNDA3LDI4MF0sIFsxNDE2LDI4OF0sICMgQ1xyXG5cdCMgWzE0MTcsMjg1XSwgWzE0MjksMjg3XSwgWzE0NDAsMjkzXSwgWzE0NTEsMjk5XSwgWzE0NTksMzA5XSwgWzE0NzEsMzEzXSwgWzE0ODQsMzEzXSwgWzE0OTYsMzE0XSwgWzE1MDgsMzE4XSwgWzE1MTcsMzEwXSwgWzE1MjgsMzE1XSwgWzE1NDAsMzE3XSwgWzE1NTIsMzE2XSwgWzE1NjQsMzE3XSwgWzE1NzUsMzIyXSwgWzE1ODcsMzI2XSwgWzE1OTksMzMwXSwgWzE2MTEsMzI3XSwgWzE2MjEsMzE5XSwgWzE2MzMsMzE0XSwgWzE2NDQsMzIwXSwgWzE2NTIsMzMwXSwgWzE2NjMsMzM1XSwgWzE2NzYsMzM1XSwgWzE2ODgsMzM3XSwgWzE3MDEsMzM3XSwgWzE3MTMsMzM4XSwgWzE3MjUsMzQyXSwgWzE3MzcsMzQzXSwgWzE3NDksMzQyXSwgWzE3NjAsMzQ3XSwgWzE3NzMsMzUyXSwgWzE3ODQsMzU4XSwgWzE3OTYsMzYxXSwgWzE4MDgsMzY1XSwgWzE4MjEsMzY1XSwgWzE4MzQsMzY1XSwgWzE4NDYsMzY3XSwgWzE4NTgsMzY5XSwgWzE4NzAsMzY4XSwgWzE4ODIsMzY0XSwgWzE4OTMsMzY5XSwgWzE5MDMsMzc2XSwgWzE5MTAsMzg2XSwgWzE5MjMsMzg2XSwgWzE5MzQsMzkxXSwgWzE5NDQsMzk4XSwgWzE5NTUsNDAzXSwgWzE5NjYsNDA5XSwgWzE5NzgsNDEzXSwgWzE5ODksNDE4XSwgWzIwMDEsNDIwXSwgWzIwMTEsNDI3XSwgWzIwMjAsNDM1XSwgWzIwMzIsNDMzXSwgWzIwNDMsNDM5XSAsICMgRFxyXG5cdCMgWzIwNjMsNDM3XSwgWzIwNjcsNDQ5XSwgWzIwNzAsNDYyXSwgWzIwNzEsNDc0XSwgWzIwNzgsNDg0XSwgWzIwNzcsNDk2XSwgWzIwNzEsNTA4XSwgWzIwNzYsNTE5XSwgWzIwNzgsNTMyXSwgWzIwODEsNTQ0XSwgWzIwODMsNTU2XSwgWzIwODUsNTY4XSwgWzIwODQsNTgwXSwgWzIwODQsNTk0XSwgWzIwODcsNjA2XSwgWzIwODgsNjE4XSwgWzIwOTIsNjMwXSwgWzIwODksNjQyXSwgWzIwNzYsNjQzXSwgWzIwNzksNjU1XSwgWzIwODMsNjY3XSwgWzIwODUsNjc5XSwgWzIwNzcsNjg4XSwgWzIwNjYsNjkzXSwgWzIwNTcsNzAxXSwgWzIwNTAsNzExXSwgWzIwNDcsNzIzXSwgWzIwNDgsNzM2XSwgWzIwNDcsNzQ4XSwgWzIwNDQsNzYwXSwgWzIwMzYsNzY5XSwgWzIwMzQsNzgxXSwgWzIwMjksNzkyXSwgWzIwMjUsODA0XSwgWzIwMjMsODE2XSwgWzIwMjAsODI5XSwgWzIwMTYsODQxXSwgWzIwMTQsODUzXSwgWzIwMDksODY1XSwgWzE5OTcsODcwXSwgWzE5ODgsODc4XSwgWzE5ODQsODkwXSwgWzE5NzcsOTAxXSwgWzE5NzQsOTE0XSwgWzE5NjcsOTI1XSwgWzE5NjQsOTM4XSwgWzE5NjEsOTUwXSwgWzE5NTYsOTYyXSwgWzE5NDgsOTcxXSwgWzE5MzYsOTc2XSwgWzE5MjMsOTgwXSwgWzE5MTUsOTg5XSwgWzE5MDgsOTk5XSwgWzE4OTYsMTAwNF0sIFsxODgzLDEwMDJdLCBbMTg3MCwxMDAzXSwgWzE4NTcsMTAwNl0sIFsxODUwLDEwMTZdLCBbMTg1MSwxMDI4XSwgWzE4NDQsMTAzOV0sIFsxODM1LDEwNDhdLCBbMTgzNiwxMDYwXSAsICMgRVxyXG5cdCMgWzE4NDUsMTA3Ml0sIFsxODQ0LDEwODVdLCBbMTg0MiwxMDk3XSwgWzE4MzAsMTEwM10sIFsxODIwLDExMTBdLCBbMTgwOSwxMTE3XSwgWzE3OTgsMTEyM10sIFsxNzg2LDExMjVdLCBbMTc3NCwxMTI2XSwgWzE3NjIsMTEyNV0sIFsxNzUwLDExMjldLCBbMTczOCwxMTM0XSwgWzE3MjYsMTEzM10sIFsxNzIzLDExNDVdLCBbMTcxMiwxMTUwXSwgWzE3MDIsMTE1OF0sIFsxNjkyLDExNjZdLCBbMTY4NiwxMTc3XSwgWzE2NzUsMTE4M10sIFsxNjY2LDExOTJdLCBbMTY1NCwxMTk1XSwgWzE2NjUsMTIwMV0sIFsxNjYwLDEyMTNdLCBbMTY2NCwxMjI1XSwgWzE2NjgsMTIzN10sIFsxNjcwLDEyNDldLCBbMTY2MCwxMjU2XSwgWzE2NDcsMTI1Nl0sIFsxNjM1LDEyNTldLCBbMTYyMywxMjYzXSwgWzE2MTEsMTI2N10sIFsxNjAxLDEyNzRdLCBbMTU4OCwxMjc2XSwgWzE1NzYsMTI3M10sIFsxNTY1LDEyNzhdLCBbMTU1NCwxMjgzXSwgWzE1NDIsMTI4MV0gLCAjIEZcclxuXHQjIFsxNTMzLDEyNjldLCBbMTUyMSwxMjcyXSwgWzE1MTMsMTI4Ml0sIFsxNTA4LDEyOTRdLCBbMTUwOCwxMzEwXSwgWzE0OTksMTMxOF0sIFsxNDg4LDEzMjNdLCBbMTQ3NywxMzI5XSwgWzE0NjYsMTMzNF0sIFsxNDU2LDEzNDJdLCBbMTQ0OSwxMzUzXSwgWzE0NDEsMTM2M10sIFsxNDI5LDEzNjVdLCBbMTQyMCwxMzczXSwgWzE0MDcsMTM3NF0sIFsxMzk1LDEzNzddLCBbMTM4MiwxMzgwXSwgWzEzNzAsMTM3NF0sIFsxMzYxLDEzODJdLCBbMTM0OSwxMzg1XSwgWzEzMzYsMTM4NF0sIFsxMzI0LDEzODldLCBbMTMxMiwxMzkxXSwgWzEzMDAsMTM5M10sIFsxMjg4LDEzOTRdLCBbMTI3NiwxMzkzXSwgWzEyNjcsMTQwMl0sIFsxMjU1LDEzOThdLCBbMTI0NywxNDA3XSwgWzEyMzUsMTQxMl0sIFsxMjI5LDE0MjNdLCBbMTIyMywxNDM1XSwgWzEyMjIsMTQ0N10sIFsxMjE2LDE0NThdLCBbMTIxMSwxNDY5XSwgWzEyMDMsMTQ3OV0sIFsxMjA1LDE0OTFdLCBbMTIwMCwxNTAyXSwgWzExOTIsMTUxMV0sIFsxMTgyLDE1MTldLCBbMTE3MSwxNTI0XSwgWzExNTksMTUxOV0sIFsxMTQ5LDE1MTFdLCBbMTE0NSwxNDk4XSwgWzExMzgsMTQ4N10sIFsxMTI2LDE0ODNdLCBbMTExNCwxNDgwXSwgWzExMDUsMTQ3Ml0sIFsxMDk0LDE0NzddLCBbMTA4MiwxNDgxXSwgWzEwNzQsMTQ5MF0gIyBHXHJcbl1cclxucGFyYW1zID0gbnVsbFxyXG5yZWNvcmRpbmdUcmFpbCA9IGZhbHNlXHJcblxyXG5zdGF0ZSA9IDAgIyAwPXVuaW5pdGlhbGl6ZWQgMT1ub3JtYWwgMj1pbmZvXHJcblxyXG5kYXRhID0gbnVsbFxyXG5pbWcgPSBudWxsXHJcblxyXG5iMncgPSBudWxsXHJcbncyYiA9IG51bGxcclxuXHJcbnN0YXJ0WCA9IDBcclxuc3RhcnRZID0gMFxyXG5cclxuY29udHJvbHMgPSB7fVxyXG5cclxubWVudUJ1dHRvbiA9IG51bGwgXHJcblxyXG5jbGFzcyBEdW1wXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdFx0QGRhdGEgPSBbXVxyXG5cdFx0QGFjdGl2ZSA9IGZhbHNlXHJcblx0c3RvcmUgOiAobXNnKSAtPlxyXG5cdFx0aWYgQGFjdGl2ZVxyXG5cdFx0XHRjb25zb2xlLmxvZyBtc2dcclxuXHRcdFx0QGRhdGEucHVzaCBtc2dcclxuXHRnZXQgOiAtPlxyXG5cdFx0cmVzdWx0ID0gQGRhdGEuam9pbiBCUlxyXG5cdFx0QGRhdGEgPSBbXVxyXG5cdFx0cmVzdWx0ICsgQlIgKyBCUlxyXG5kdW1wID0gbmV3IER1bXAoKVxyXG5cclxuY2xlYXJDb250cm9scyA9IC0+XHJcblx0Y29udHJvbHMgPSBkYXRhLmNvbnRyb2xzXHJcblx0W3RyZ0xhdCx0cmdMb25dID0gWzAsMF1cclxuXHRjdXJyZW50Q29udHJvbCA9IG51bGxcclxuXHRpbml0Q29udHJvbHMoKVxyXG5cdHNhdmVDb250cm9scygpXHJcblxyXG50YXJnZXRzID0gW10gIyBbaWQsIGxpdHRlcmEsIGRpc3RhbmNlXVxyXG5wbGF0Zm9ybSA9IG51bGxcclxuXHJcbnNhdmVDb250cm9scyA9IC0+IGxvY2FsU3RvcmFnZVsnZ3BzS2FydGEnK01BUF0gPSBKU09OLnN0cmluZ2lmeSBjb250cm9sc1xyXG5cclxuZ2V0Q29udHJvbHMgPSAtPlxyXG5cdHRyeVxyXG5cdFx0Y29udHJvbHMgPSBKU09OLnBhcnNlIGxvY2FsU3RvcmFnZVsnZ3BzS2FydGEnK01BUF1cclxuXHRjYXRjaFxyXG5cdFx0Y2xlYXJDb250cm9scygpXHJcblxyXG5pbml0Q29udHJvbHMgPSAtPlxyXG5cdGZvciBrZXksY29udHJvbCBvZiBjb250cm9sc1xyXG5cdFx0W3gseSxsaXR0ZXJhXSA9IGNvbnRyb2xcclxuXHRcdFtsb24sbGF0XSA9IGIydy5jb252ZXJ0IHgseVxyXG5cdFx0Y29udHJvbFszXSA9IGxhdFxyXG5cdFx0Y29udHJvbFs0XSA9IGxvblxyXG5cdGlmIGN1cnJlbnRDb250cm9sICE9IG51bGxcclxuXHRcdFtncHNMYXQsZ3BzTG9uLHo5OSx0cmdMYXQsdHJnTG9uXSA9IGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVxyXG5cclxubWFrZVRhcmdldHMgPSAtPlxyXG5cdHRhcmdldHMgPSBbXVxyXG5cdGMgPSBMYXRMb24gZ3BzTGF0LCBncHNMb25cclxuXHRmb3Iga2V5LGNvbnRyb2wgb2YgY29udHJvbHNcclxuXHRcdFt4LHksbGl0dGVyYSxsYXQsbG9uXSA9IGNvbnRyb2xcclxuXHRcdGIgPSBMYXRMb24gbGF0LCBsb25cclxuXHRcdHRhcmdldHMucHVzaCBba2V5LCBsaXR0ZXJhLCByb3VuZCBiLmRpc3RhbmNlVG8oYyldXHJcblx0dGFyZ2V0c1xyXG5cclxuW2N4LGN5XSA9IFswLDBdICMgY2VudGVyIChpbWFnZSBjb29yZGluYXRlcylcclxuU0NBTEUgPSAxXHJcblxyXG5ncHMgPSBudWxsXHJcblRSQUNLRUQgPSA1ICMgY2lyY2xlcyBzaG93cyB0aGUgcGxheWVyJ3MgcG9zaXRpb25cclxucG9zaXRpb24gPSBudWxsICMgZ3BzIHBvc2l0aW9uIChwaXhlbHMpXHJcbnRyYWNrID0gW10gIyBmaXZlIGxhdGVzdCBHUFMgcG9zaXRpb25zIChwaXhlbHMpXHJcblxyXG5zcGVha2VyID0gbnVsbFxyXG5cclxuc291bmRVcCA9IG51bGxcclxuc291bmREb3duID0gbnVsbFxyXG5zb3VuZFF1ZXVlID0gMCAjIG5lZz1taW5za2F0IGF2c3TDpW5kIHBvcz3DtmthdCBhdnN0w6VuZFxyXG5qY25pbmRleCA9IDBcclxuXHJcbm1lc3NhZ2VzID0gWycnLCcnLCcnLCcnLCcnLCcnXVxyXG5ncHNDb3VudCA9IDBcclxuXHJcbltncHNMYXQsZ3BzTG9uXSA9IFswLDBdICMgYXZnw7ZyIG9tIG11bnRsaWcgaW5mb3JtYXRpb24gc2thIGdlc1xyXG5bdHJnTGF0LHRyZ0xvbl0gPSBbMCwwXSAjIGtvb3JkaW5hdGVyIGbDtnIgdmFsdCB0YXJnZXRcclxuXHJcbmN1cnJlbnRDb250cm9sID0gbnVsbFxyXG5sYXN0TG9jYXRpb24gPSAnJyAjIGFudsOkbmRzIGbDtnIgYXR0IHNraXBwYSBsaWthIGtvb3JkaW5hdGVyXHJcblxyXG50aW1lb3V0ID0gbnVsbFxyXG5cclxudm9pY2VRdWV1ZSA9IFtdXHJcbmJlYXJpbmdTYWlkID0gJydcclxuZGlzdGFuY2VTYWlkID0gJydcclxuXHJcbnJlbGVhc2VkID0gdHJ1ZVxyXG5cclxuc2VuZE1haWwgPSAoc3ViamVjdCxib2R5KSAtPlxyXG5cdG1haWwuaHJlZiA9IGVuY29kZVVSSSBcIm1haWx0bzoje2RhdGEubWFpbH0/c3ViamVjdD0je3N1YmplY3R9JmJvZHk9I3tib2R5fVwiXHJcblx0I2NvbnNvbGUubG9nIG1haWwuaHJlZlxyXG5cdG1haWwuY2xpY2soKVxyXG5cclxuc2F5ID0gKG0pIC0+XHJcblx0aWYgc3BlYWtlciA9PSBudWxsIHRoZW4gcmV0dXJuXHJcblx0c3BlZWNoU3ludGhlc2lzLmNhbmNlbCgpXHJcblx0c3BlYWtlci50ZXh0ID0gbVxyXG5cdGR1bXAuc3RvcmUgXCJcIlxyXG5cdGR1bXAuc3RvcmUgXCJzYXkgI3ttfSAje0pTT04uc3RyaW5naWZ5IHZvaWNlUXVldWV9XCJcclxuXHRzcGVlY2hTeW50aGVzaXMuc3BlYWsgc3BlYWtlclxyXG5cclxucHJlbG9hZCA9IC0+XHJcblx0cGFyYW1zID0gZ2V0UGFyYW1ldGVycygpXHJcblx0aWYgcGFyYW1zLmRlYnVnIHRoZW4gZHVtcC5hY3RpdmUgPSBwYXJhbXMuZGVidWcgPT0gJzEnXHJcblx0TUFQID0gcGFyYW1zLm1hcCB8fCAnc2thcnBuw6RjaydcclxuXHRsb2FkSlNPTiBcImRhdGEvI3tNQVB9Lmpzb25cIiwgKGpzb24pIC0+XHJcblx0XHRkYXRhID0ganNvblxyXG5cdFx0Zm9yIGtleSxjb250cm9sIG9mIGRhdGEuY29udHJvbHNcclxuXHRcdFx0Y29udHJvbC5wdXNoIFwiXCJcclxuXHRcdFx0Y29udHJvbC5wdXNoIDBcclxuXHRcdFx0Y29udHJvbC5wdXNoIDBcclxuXHRcdGltZyA9IGxvYWRJbWFnZSBcImRhdGEvXCIgKyBkYXRhLm1hcFxyXG5cclxuc2F5RGlzdGFuY2UgPSAoYSxiKSAtPiAjIGEgaXMgbmV3ZXIgKG1ldGVyKVxyXG5cdCMgaWYgYSBib3JkZXIgaXMgY3Jvc3NlZCwgcHJvZHVjZSBzcGVlY2hcclxuXHRkdW1wLnN0b3JlIFwiRCAje215Um91bmQgYSwxfSAje215Um91bmQgYiwxfVwiXHJcblx0YSA9IHJvdW5kIGFcclxuXHRiID0gcm91bmQgYlxyXG5cdGlmIGIgPT0gLTEgdGhlbiByZXR1cm4gYVxyXG5cdGZvciBkIGluIERJU1RMSVNUXHJcblx0XHRpZiBhID09IGQgYW5kIGIgIT0gZCB0aGVuIHJldHVybiBkXHJcblx0XHRpZiAoYS1kKSAqIChiLWQpIDwgMCB0aGVuIHJldHVybiBkXHJcblx0XCJcIlxyXG5cclxuc2F5QmVhcmluZyA9IChhMCxiMCkgLT4gIyBhIGlzIG5ld2VyIChkZWdyZWVzKVxyXG5cdGR1bXAuc3RvcmUgXCJCICN7bXlSb3VuZCBhMCwxfSAje215Um91bmQgYjAsMX1cIlxyXG5cdCMgaWYgYSBzZWN0b3IgbGltaXQgaXMgY3Jvc3NlZCwgdGVsbCB0aGUgbmV3IGJlYXJpbmdcclxuXHRhID0gU0VDVE9SICogcm91bmQoYTAvU0VDVE9SKVxyXG5cdGIgPSBTRUNUT1IgKiByb3VuZChiMC9TRUNUT1IpXHJcblx0aWYgYSA9PSBiIGFuZCBiMCAhPSAtMSB0aGVuIHJldHVybiBcIlwiICMgc2FtbWEgc2VrdG9yXHJcblx0YSA9IHJvdW5kIGEgLyAxMFxyXG5cdGlmIGEgPT0gMCB0aGVuIGEgPSAzNiAjIDAxLi4zNlxyXG5cdHRpb3RhbCA9IERJR0lUU1thIC8vIDEwXVxyXG5cdGVudGFsID0gRElHSVRTW2EgJSUgMTBdXHJcblx0XCIje3Rpb3RhbH0gI3tlbnRhbH1cIlxyXG5cclxuaW5jcmVhc2VRdWV1ZSA9IChwKSAtPlxyXG5cdCNkdW1wLnN0b3JlIFwic291bmRJbmRpY2F0b3IgI3twLmNvb3Jkcy5sYXRpdHVkZX0gI3twLmNvb3Jkcy5sb25naXR1ZGV9XCJcclxuXHRhID0gTGF0TG9uIHAuY29vcmRzLmxhdGl0dWRlLHAuY29vcmRzLmxvbmdpdHVkZSAjIG5ld2VzdFxyXG5cdGIgPSBMYXRMb24gZ3BzTGF0LCBncHNMb25cclxuXHRjID0gTGF0TG9uIHRyZ0xhdCwgdHJnTG9uICMgdGFyZ2V0XHJcblxyXG5cdGRpc3RhID0gYS5kaXN0YW5jZVRvIGNcclxuXHRkaXN0YiA9IGIuZGlzdGFuY2VUbyBjXHJcblx0ZGlzdGFuY2UgPSByb3VuZCAoZGlzdGEgLSBkaXN0YikvRElTVFxyXG5cclxuXHRpZiB0cmdMYXQgIT0gMFxyXG5cdFx0YmVhcmluZ2EgPSBhLmJlYXJpbmdUbyBjXHJcblx0XHRiZWFyaW5nYiA9IGIuYmVhcmluZ1RvIGNcclxuXHRcdGlmIGRpc3RhID49IExJTUlUXHJcblx0XHRcdHNCZWFyaW5nID0gc2F5QmVhcmluZyBiZWFyaW5nYSxiZWFyaW5nYlxyXG5cdFx0XHRpZiBzQmVhcmluZyAhPSBcIlwiIHRoZW4gdm9pY2VRdWV1ZS5wdXNoIFwiYsOkcmluZyAje3NCZWFyaW5nfVwiXHJcblx0XHRzRGlzdGFuY2UgPSBzYXlEaXN0YW5jZSBkaXN0YSxkaXN0YlxyXG5cdFx0aWYgc0Rpc3RhbmNlICE9IFwiXCIgdGhlbiB2b2ljZVF1ZXVlLnB1c2ggXCJkaXN0YW5zICN7c0Rpc3RhbmNlfVwiXHJcblxyXG5cdGlmIGRpc3RhbmNlICE9IDAgIyB1cGRhdGUgb25seSBpZiBESVNUIGRldGVjdGVkLiBPdGhlcndpc2Ugc29tZSBiZWVwcyB3aWxsIGJlIGxvc3QuXHJcblx0XHRncHNMYXQgPSBteVJvdW5kIHAuY29vcmRzLmxhdGl0dWRlLDZcclxuXHRcdGdwc0xvbiA9IG15Um91bmQgcC5jb29yZHMubG9uZ2l0dWRlLDZcclxuXHJcblx0aWYgYWJzKGRpc3RhbmNlKSA8IDEwIHRoZW4gc291bmRRdWV1ZSA9IGRpc3RhbmNlICMgZXR0IGFudGFsIERJU1RcclxuXHJcbmZpcnN0SW5mbyA9IChrZXkpIC0+XHJcblx0YiA9IExhdExvbiBncHNMYXQsIGdwc0xvblxyXG5cdGMgPSBMYXRMb24gdHJnTGF0LCB0cmdMb24gIyB0YXJnZXRcclxuXHJcblx0ZGlzdGIgPSByb3VuZCBiLmRpc3RhbmNlVG8gY1xyXG5cdGRpc3RhbmNlID0gcm91bmQgKGRpc3RiKS9ESVNUXHJcblxyXG5cdGJlYXJpbmdiID0gYi5iZWFyaW5nVG8gY1xyXG5cdHZvaWNlUXVldWUucHVzaCBcInRhcmdldCAje2tleX0gI3tzYXlCZWFyaW5nIGJlYXJpbmdiLC0xfSAje3NheURpc3RhbmNlIGRpc3RiLC0xfVwiXHJcblx0ZHVtcC5zdG9yZSBcIlwiXHJcblx0ZHVtcC5zdG9yZSBcInRhcmdldCAje2N1cnJlbnRDb250cm9sfVwiXHJcblx0ZHVtcC5zdG9yZSBcImdwcyAje1tncHNMYXQsZ3BzTG9uXX1cIlxyXG5cdGR1bXAuc3RvcmUgXCJ0cmcgI3tbdHJnTGF0LHRyZ0xvbl19XCJcclxuXHRkdW1wLnN0b3JlIFwidm9pY2VRdWV1ZSAje3ZvaWNlUXVldWV9XCJcclxuXHRcclxuXHRpZiBhYnMoZGlzdGFuY2UpIDwgMTAgdGhlbiBzb3VuZFF1ZXVlID0gZGlzdGFuY2UgIyBldHQgYW50YWwgRElTVFxyXG5cclxucGxheVNvdW5kID0gLT5cclxuXHRpZiBzb3VuZFF1ZXVlID09IDAgdGhlbiByZXR1cm5cclxuXHRpZiBzb3VuZFF1ZXVlIDwgMCBhbmQgc291bmREb3duICE9IG51bGxcclxuXHRcdHNvdW5kUXVldWUrK1xyXG5cdFx0c291bmREb3duLnBsYXkoKVxyXG5cdGVsc2UgaWYgc291bmRRdWV1ZSA+IDAgYW5kIHNvdW5kVXAgIT0gbnVsbFxyXG5cdFx0c291bmRRdWV1ZS0tXHJcblx0XHRzb3VuZFVwLnBsYXkoKVxyXG5cclxuZGVjcmVhc2VRdWV1ZSA9IC0+XHJcblx0aWYgdm9pY2VRdWV1ZS5sZW5ndGggPT0gMCB0aGVuIHJldHVyblxyXG5cdG1zZyA9IHZvaWNlUXVldWUuc2hpZnQoKVxyXG5cdGFyciA9IG1zZy5zcGxpdCAnICcgXHJcblxyXG5cdGlmIGFyclswXSA9PSAnYsOkcmluZydcclxuXHRcdG1zZyA9IGFyclsxXSArICcgJyArIGFyclsyXSAjIHNraXBwYSBvcmRldC4gdCBleCAnYsOkcmluZyBldHRhIHR2w6VhJ1xyXG5cdFx0aWYgYmVhcmluZ1NhaWQgIT0gbXNnIHRoZW4gc2F5IG1zZ1xyXG5cdFx0YmVhcmluZ1NhaWQgPSBtc2dcclxuXHRlbHNlIGlmIGFyclswXSA9PSAnZGlzdGFucydcclxuXHRcdG1zZyA9IGFyclsxXSAgICAgICAgICAgICAgICAjIHNraXBwYSBvcmRldC4gdCBleCAnZGlzdGFucyAzMCdcclxuXHRcdGlmIGRpc3RhbmNlU2FpZCAhPSBtc2cgdGhlbiBzYXkgbXNnXHJcblx0XHRkaXN0YW5jZVNhaWQgPSBtc2dcclxuXHRlbHNlIGlmIGFyclswXSA9PSAndGFyZ2V0J1xyXG5cdFx0IyAndGFyZ2V0IDExLiBiw6RyaW5nIGV0dGEgdHbDpWEuIGRpc3RhbnMgMjUwIG1ldGVyJ1xyXG5cdFx0bXNnID0gXCIje2FyclswXX0gI3thcnJbMV19LiBiw6RyaW5nICN7YXJyWzJdfSAje2FyclszXX0uIGRpc3RhbnMgI3thcnJbNF19IG1ldGVyXCJcclxuXHRcdGJlYXJpbmdTYWlkID0gYXJyWzJdICsgJyAnICsgYXJyWzNdXHJcblx0XHRkaXN0YW5jZVNhaWQgPSBhcnJbNF1cclxuXHRcdHNheSBtc2dcclxuXHJcbmxvY2F0aW9uVXBkYXRlID0gKHApIC0+XHJcblx0cExhdCA9IG15Um91bmQgcC5jb29yZHMubGF0aXR1ZGUsNlxyXG5cdHBMb24gPSBteVJvdW5kIHAuY29vcmRzLmxvbmdpdHVkZSw2XHJcblx0bmV4dExvY2F0aW9uID0gXCIje3BMYXR9ICN7cExvbn1cIlxyXG5cdGdwc0NvdW50KytcclxuXHRtZXNzYWdlc1s1XSA9IGdwc0NvdW50XHJcblx0ZGVjcmVhc2VRdWV1ZSgpXHJcblx0aWYgbmV4dExvY2F0aW9uID09IGxhc3RMb2NhdGlvbiB0aGVuIHJldHVyblxyXG5cdGxhc3RMb2NhdGlvbiA9IG5leHRMb2NhdGlvblxyXG5cdHVwZGF0ZVRyYWNrIHAudGltZXN0YW1wLCBwTGF0LCBwTG9uXHJcblx0aW5jcmVhc2VRdWV1ZSBwXHJcblx0I2lmIGN1cnJlbnRDb250cm9sID09IG51bGwgdGhlbiByZXR1cm5cclxuXHR1cGRhdGVUcmFpbCgpXHJcblxyXG51cGRhdGVUcmFjayA9ICh0aW1lc3RhbXAsIHBMYXQsIHBMb24pIC0+XHJcblx0ZCA9IG5ldyBEYXRlKClcclxuXHRkLnNldFRpbWUgdGltZXN0YW1wXHJcblx0ZHVtcC5zdG9yZSBcIlwiXHJcblx0ZHVtcC5zdG9yZSBcIkxVICN7ZC50b0xvY2FsZVN0cmluZyAnU1dFJ30gI3twTGF0fSAje3BMb259XCJcclxuXHRpZiBncHNMYXQgIT0gMFxyXG5cdFx0cG9zaXRpb24gPSB3MmIuY29udmVydCBwTG9uLHBMYXRcclxuXHRcdHRyYWNrLnB1c2ggcG9zaXRpb25cclxuXHRcdGlmIHRyYWNrLmxlbmd0aCA+IFRSQUNLRUQgdGhlbiB0cmFjay5zaGlmdCgpXHJcblx0XHR0ID0gXy5sYXN0IHRyYWNrXHJcblx0XHRkdW1wLnN0b3JlIFwiVCAje3RbMF19ICN7dFsxXX1cIlxyXG5cdFx0bWVzc2FnZXNbNF0gPSBwTGF0ICsgJyAnICsgcExvblxyXG5cclxudXBkYXRlVHJhaWwgPSAtPlxyXG5cdGlmIHJlY29yZGluZ1RyYWlsXHJcblx0XHRpZiB0cmFpbC5sZW5ndGggPT0gMFxyXG5cdFx0XHR0cmFpbC5wdXNoIHBvc2l0aW9uXHJcblx0XHRlbHNlXHJcblx0XHRcdFt4MSx5MV0gPSBfLmxhc3QgdHJhaWxcclxuXHRcdFx0W3gyLHkyXSA9IHBvc2l0aW9uXHJcblx0XHRcdGlmIDEyIDwgZGlzdCB4MSx5MSx4Mix5MiB0aGVuIHRyYWlsLnB1c2ggcG9zaXRpb25cclxuXHJcbmxvY2F0aW9uVXBkYXRlRmFpbCA9IChlcnJvcikgLT5cdGlmIGVycm9yLmNvZGUgPT0gZXJyb3IuUEVSTUlTU0lPTl9ERU5JRUQgdGhlbiBtZXNzYWdlcyA9IFsnQ2hlY2sgbG9jYXRpb24gcGVybWlzc2lvbnMnXVxyXG5cclxuaW5pdFNwZWFrZXIgPSAoaW5kZXg9NSkgLT5cclxuXHRkdW1wLnN0b3JlIFwiaW5pdFNwZWFrZXIgaW4gI3tpbmRleH1cIlxyXG5cdHNvdW5kVXAgPSBsb2FkU291bmQgJ3NvdW5kVXAud2F2J1xyXG5cdHNvdW5kRG93biA9IGxvYWRTb3VuZCAnc291bmREb3duLndhdidcclxuXHRzb3VuZFVwLnNldFZvbHVtZSAwLjFcclxuXHRzb3VuZERvd24uc2V0Vm9sdW1lIDAuMVxyXG5cdGNsZWFySW50ZXJ2YWwgdGltZW91dFxyXG5cdHRpbWVvdXQgPSBzZXRJbnRlcnZhbCBwbGF5U291bmQsIERFTEFZXHJcblx0c291bmRRdWV1ZSA9IDBcclxuXHJcblx0c3BlYWtlciA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UoKVxyXG5cdHZvaWNlcyA9IHNwZWVjaFN5bnRoZXNpcy5nZXRWb2ljZXMoKVxyXG5cdHNwZWFrZXIudm9pY2UgPSB2b2ljZXNbaW5kZXhdXHJcblx0c3BlYWtlci52b2ljZVVSSSA9IFwibmF0aXZlXCJcclxuXHRzcGVha2VyLnZvbHVtZSA9IDFcclxuXHRzcGVha2VyLnJhdGUgPSAwLjhcclxuXHRzcGVha2VyLnBpdGNoID0gMC44XHJcblx0c3BlYWtlci50ZXh0ID0gJydcclxuXHRzcGVha2VyLmxhbmcgPSAnc3YtU0UnXHJcblx0ZGlhbG9ndWVzLmNsZWFyKClcclxuXHRzYXkgXCJWw6Rsa29tbWVuIVwiXHJcblx0dHJhY2sgPSBbXVxyXG5cdGR1bXAuc3RvcmUgXCJpbml0U3BlYWtlciBvdXRcIlxyXG5cclxuZnJhY3Rpb24gPSAoeCkgLT4geCAtIGludCB4IFxyXG5nZXRNZXRlcnMgPSAodyxza2FsYSkgLT5cclxuXHRbbG9uMCxsYXQwXSA9IGIydy5jb252ZXJ0IDAsaGVpZ2h0XHJcblx0W2xvbjEsbGF0MV0gPSBiMncuY29udmVydCB3LGhlaWdodFxyXG5cdHAwID0gTGF0TG9uIGxhdDAsIGxvbjBcclxuXHRwMSA9IExhdExvbiBsYXQxLCBsb24xXHJcblx0ZGlzdGFucyA9IHAwLmRpc3RhbmNlVG8ocDEpIC8gc2thbGFcclxuXHRkID0gTWF0aC5sb2cxMCBkaXN0YW5zXHJcblx0ZnJhY3QgPSBmcmFjdGlvbiBkXHJcblx0cmV0dXJuIFs0MjUsMjAwXVxyXG5cdGZvciBpIGluIFsxLDIsNV1cclxuXHRcdGlmIDEwKipmcmFjdCA+IGkgdGhlbiBuID0gaVxyXG5cdFtyb3VuZChkaXN0YW5zKSwgbiAqIDEwKippbnQgZF1cclxuXHJcbnRlc3QgPSAtPlxyXG5cdGFzc2VydCBbMTQzNCwxMDAwXSwgZ2V0TWV0ZXJzIDE5MjAsMVxyXG5cdGFzc2VydCBbOTU2LDUwMF0sIGdldE1ldGVycyAxOTIwLDEuNVxyXG5cdGFzc2VydCBbNjM4LDUwMF0sIGdldE1ldGVycyAxOTIwLDEuNSoxLjVcclxuXHRhc3NlcnQgWzQyNSwyMDBdLCBnZXRNZXRlcnMgMTkyMCwxLjUqMS41KjEuNVxyXG5cdGNvbnNvbGUubG9nIFwiUmVhZHkhXCJcclxuXHJcbnNldHVwID0gLT5cclxuXHRjYW52YXMgPSBjcmVhdGVDYW52YXMgaW5uZXJXaWR0aC0wLjAsIGlubmVySGVpZ2h0ICMtMC41XHJcblx0Y2FudmFzLnBvc2l0aW9uIDAsMCAjIGhpZGVzIHRleHQgZmllbGQgdXNlZCBmb3IgY2xpcGJvYXJkIGNvcHkuXHJcblxyXG5cdHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybVxyXG5cclxuXHRhbmdsZU1vZGUgREVHUkVFU1xyXG5cclxuXHRTQ0FMRSA9IGRhdGEuc2NhbGVcclxuXHJcblx0W2N4LGN5XSA9IFtpbWcud2lkdGgvMixpbWcuaGVpZ2h0LzJdXHJcblx0XHJcblx0YjJ3ID0gbmV3IENvbnZlcnRlciBkYXRhLmJtcCxkYXRhLndncyw2XHJcblx0dzJiID0gbmV3IENvbnZlcnRlciBkYXRhLndncyxkYXRhLmJtcCwwXHJcblxyXG5cdCN0ZXN0KClcclxuXHJcblx0Z2V0Q29udHJvbHMoKVxyXG5cclxuXHRwb3NpdGlvbiA9IFtpbWcud2lkdGgvMixpbWcuaGVpZ2h0LzJdXHJcblxyXG5cdG5hdmlnYXRvci5nZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uIGxvY2F0aW9uVXBkYXRlLCBsb2NhdGlvblVwZGF0ZUZhaWwsXHJcblx0XHRlbmFibGVIaWdoQWNjdXJhY3k6IHRydWVcclxuXHRcdG1heGltdW1BZ2U6IDMwMDAwXHJcblx0XHR0aW1lb3V0OiAyNzAwMFxyXG5cclxuXHRtZW51QnV0dG9uID0gbmV3IE1lbnVCdXR0b24gd2lkdGgtMTYwXHJcblxyXG5cdGFkZEV2ZW50TGlzdGVuZXIgJ3RvdWNoc3RhcnQnLCAoZXZ0KSAtPlxyXG5cdFx0dG91Y2hlcyA9IGV2dC5jaGFuZ2VkVG91Y2hlc1xyXG5cdFx0dG91Y2ggPSB0b3VjaGVzW3RvdWNoZXMubGVuZ3RoLTFdXHJcblx0XHRteCA9IHRvdWNoLnBhZ2VYXHJcblx0XHRteSA9IHRvdWNoLnBhZ2VZXHJcblx0XHRteU1vdXNlUHJlc3NlZCBteCxteVxyXG5cclxuXHJcbmluZm8gPSAoKSAtPlxyXG5cdHJlc3VsdCA9IFtdXHJcblx0cmVzdWx0LnB1c2ggXCJNQVAgI3tNQVB9XCJcclxuXHRyZXN1bHQucHVzaCBcIlZFUlNJT04gI3tWRVJTSU9OfVwiXHJcblx0cmVzdWx0LnB1c2ggXCJkdW1wLmFjdGl2ZSAje2R1bXAuYWN0aXZlfVwiICBcclxuXHRyZXN1bHQucHVzaCBcImR1bXAuZGF0YS5sZW5ndGggI3tkdW1wLmRhdGEubGVuZ3RofVwiXHJcblx0cmVzdWx0LnB1c2ggXCJ0cmFpbC5sZW5ndGggI3t0cmFpbC5sZW5ndGh9XCJcclxuXHRyZXN1bHQucHVzaCBcImdwc0NvdW50ICN7Z3BzQ291bnR9XCJcclxuXHRyZXN1bHQucHVzaCBcIlNFQ1RPUiAje1NFQ1RPUn1cIlxyXG5cdHJlc3VsdC5wdXNoIFwiY3ggI3tjeH0gY3kgI3tjeX1cIlxyXG5cdHJlc3VsdC5wdXNoIFwiU0NBTEUgI3tTQ0FMRX1cIlxyXG5cdHJlc3VsdFxyXG5cclxuZHJhd0luZm8gPSAtPlxyXG5cdHRleHRBbGlnbiBMRUZULENFTlRFUlxyXG5cdHNjKClcclxuXHRmYyAwXHJcblx0Zm9yIG0saSBpbiBpbmZvKClcclxuXHRcdHRleHQgbSwyMCwxMDAqKGkrMSlcclxuXHJcbmRyYXdUcmFjayA9IC0+XHJcblx0ZmMoKVxyXG5cdHN3IDEvU0NBTEVcclxuXHRzYyAwXHJcblx0Zm9yIFt4LHldLGkgaW4gdHJhY2tcclxuXHRcdGNpcmNsZSB4LWN4LCB5LWN5LCA1ICogKHRyYWNrLmxlbmd0aC1pKVxyXG5cclxuZHJhd1RyYWlsID0gLT5cclxuXHRmYygpXHJcblx0c3cgMTJcclxuXHRzYyAxLDAsMCwwLjUgIyBSRURcclxuXHRmb3IgW3gseV0gaW4gdHJhaWxcclxuXHRcdHBvaW50IHgtY3gsIHktY3lcclxuXHJcbmRyYXdDb250cm9scyA9IC0+XHJcblx0dGV4dEFsaWduIExFRlQsVE9QXHJcblx0dGV4dFNpemUgZGF0YS5yYWRpdXNcclxuXHRzdyAyXHJcblx0Zm9yIGtleSxjb250cm9sIG9mIGRhdGEuY29udHJvbHNcclxuXHRcdFt4LHldID0gY29udHJvbFxyXG5cdFx0c2MgMFxyXG5cdFx0ZmMoKVxyXG5cdFx0Y2lyY2xlIHgtY3gseS1jeSxkYXRhLnJhZGl1c1xyXG5cdFx0c2MoKVxyXG5cdFx0ZmMgMFxyXG5cdFx0dGV4dCBrZXkseC1jeCswLjcqZGF0YS5yYWRpdXMseS1jeSswLjcqZGF0YS5yYWRpdXNcclxuXHJcbmRyYXdDb250cm9sID0gLT5cclxuXHJcblx0aWYgdHJnTGF0ID09IDAgYW5kIHRyZ0xvbiA9PSAwIHRoZW4gcmV0dXJuXHJcblxyXG5cdGxhdExvbjIgPSBMYXRMb24gdHJnTGF0LHRyZ0xvblxyXG5cdGxhdExvbjEgPSBMYXRMb24gZ3BzTGF0LGdwc0xvblxyXG5cclxuXHRiZWFyaW5nID0gbGF0TG9uMS5iZWFyaW5nVG8gbGF0TG9uMlxyXG5cdG1lc3NhZ2VzWzBdID0gXCIje2ludCBiZWFyaW5nfcK6XCJcclxuXHRtZXNzYWdlc1sxXSA9IGN1cnJlbnRDb250cm9sXHJcblx0bWVzc2FnZXNbMl0gPSBcIiN7cm91bmQobGF0TG9uMS5kaXN0YW5jZVRvIGxhdExvbjIpfSBtXCJcclxuXHJcblx0Y29udHJvbCA9IGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVxyXG5cdHggPSBjb250cm9sWzBdXHJcblx0eSA9IGNvbnRyb2xbMV1cclxuXHJcblx0c2MoKVxyXG5cdGZjIDAsMCwwLDAuMjVcclxuXHRjaXJjbGUgeC1jeCwgeS1jeSwgZGF0YS5yYWRpdXNcclxuXHJcbmRyYXdSZWZlcmVuY2VQb2ludHMgPSAtPlxyXG5cdHB1c2goKVxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0dGV4dFNpemUgMjBcclxuXHRmb3IgaSBpbiByYW5nZSAzXHJcblx0XHRwID0gdzJiLmNvbnZlcnQgZGF0YS53Z3NbMippXSwgZGF0YS53Z3NbMippKzFdXHJcblx0XHRzdyAxXHJcblx0XHRmYygpXHJcblx0XHRzYyAwXHJcblx0XHRjaXJjbGUgZGF0YS5ibXBbMippXS1jeCxkYXRhLmJtcFsyKmkrMV0tY3ksOVxyXG5cdFx0Y2lyY2xlIHBbMF0tY3gsIHBbMV0tY3ksIDEyXHJcblx0XHRzdyAyXHJcblx0XHRmYyAwXHJcblx0XHRzYygpXHJcblx0XHR0ZXh0IGksIGRhdGEuYm1wWzIqaV0tY3gsMS41K2RhdGEuYm1wWzIqaSsxXS1jeVxyXG5cdHBvcCgpXHJcblxyXG5kcmF3U2NhbGUgPSAtPlxyXG5cdFt3MSx3MF0gPSBnZXRNZXRlcnMgd2lkdGgsIFNDQUxFXHJcblx0ZCA9ICh3MS13MCkvMi93MSAqIHdpZHRoXHJcblx0eCA9IGRcclxuXHR5ID0gaGVpZ2h0ICogMC45XHJcblx0dyA9IHcwL3cxICogd2lkdGhcclxuXHRoID0gMTBcclxuXHRzYyAwXHJcblx0c3cgMlxyXG5cdGxpbmUgeCx5LHgrdyx5XHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRzYygpXHJcblx0ZmMgMFxyXG5cdHRleHQgMCxkLHktMjBcclxuXHR0ZXh0IHcwLHdpZHRoLWQseS0yMFxyXG5cclxuZHJhdyA9IC0+XHJcblx0YmcgMCwxLDBcclxuXHRpZiBzdGF0ZSA9PSAwIFxyXG5cdFx0dGV4dFNpemUgMjAwXHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0dGV4dCBNQVAsIHdpZHRoLzIsaGVpZ2h0LzItMjAwXHJcblx0XHR0ZXh0IFZFUlNJT04sIHdpZHRoLzIsaGVpZ2h0LzJcclxuXHRcdGlmIGR1bXAuYWN0aXZlIHRoZW4gdGV4dCAnZGVidWcnLHdpZHRoLzIsaGVpZ2h0LzIrMjAwXHJcblx0XHRyZXR1cm5cclxuXHJcblx0aWYgc3RhdGUgPT0gMVxyXG5cdFx0cHVzaCgpXHJcblx0XHR0cmFuc2xhdGUgd2lkdGgvMiwgaGVpZ2h0LzJcclxuXHRcdHNjYWxlIFNDQUxFXHJcblx0XHRpbWFnZSBpbWcsIC1jeCwtY3lcclxuXHRcdGRyYXdSZWZlcmVuY2VQb2ludHMoKVxyXG5cdFx0ZHJhd1RyYWlsKClcclxuXHRcdGRyYXdUcmFjaygpXHJcblx0XHRpZiBkYXRhLmRyYXdDb250cm9scyB0aGVuIGRyYXdDb250cm9scygpXHJcblx0XHRkcmF3Q29udHJvbCgpXHJcblx0XHRwb3AoKVxyXG5cdFxyXG5cdFx0ZmMgMFxyXG5cdFx0c2MgMSwxLDBcclxuXHRcdHN3IDNcclxuXHRcdG1hcmdpbiA9IDI1XHJcblx0XHRmb3IgbWVzc2FnZSxpIGluIG1lc3NhZ2VzXHJcblx0XHRcdHRleHRBbGlnbiBbTEVGVCxDRU5URVIsUklHSFRdW2klM10sIFtUT1AsQk9UVE9NXVtpLy8zXVxyXG5cdFx0XHR0ZXh0U2l6ZSBbMTAwLDUwXVtpLy8zXVxyXG5cdFx0XHR0ZXh0IG1lc3NhZ2UsIFttYXJnaW4sd2lkdGgvMix3aWR0aC1tYXJnaW5dW2klM10sIFttYXJnaW4saGVpZ2h0XVtpLy8zXSBcclxuXHRcdHNob3dEaWFsb2d1ZSgpXHJcblx0XHRtZW51QnV0dG9uLmRyYXcoKVxyXG5cdFx0ZHJhd1NjYWxlKClcclxuXHRcdHJldHVyblxyXG5cclxuXHRpZiBzdGF0ZSA9PSAyXHJcblx0XHRkcmF3SW5mbygpXHJcblx0XHRyZXR1cm5cclxuXHJcbnNldFRhcmdldCA9IChrZXkpIC0+XHJcblx0aWYga2V5IG5vdCBvZiBjb250cm9scyB0aGVuIHJldHVyblxyXG5cdGlmIGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXSA9PSBudWxsIHRoZW4gcmV0dXJuXHJcblx0dHJhaWwgPSBbXVxyXG5cdHJlY29yZGluZ1RyYWlsID0gdHJ1ZVxyXG5cdHNvdW5kUXVldWUgPSAwXHJcblx0Y3VycmVudENvbnRyb2wgPSBrZXlcclxuXHRjb250cm9sID0gY29udHJvbHNbY3VycmVudENvbnRyb2xdXHJcblx0eCA9IGNvbnRyb2xbMF1cclxuXHR5ID0gY29udHJvbFsxXVxyXG5cdFt0cmdMb24sdHJnTGF0XSA9IGIydy5jb252ZXJ0IHgseVxyXG5cdGZpcnN0SW5mbyBrZXlcclxuXHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cclxuZXhlY3V0ZU1haWwgPSAtPiAjIFNlbmRzIHRoZSB0cmFpbFxyXG5cdHIgPSBpbmZvKCkuam9pbiBCUlxyXG5cdGlmIGN1cnJlbnRDb250cm9sIFxyXG5cdFx0bGl0dGVyYSA9IGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVsyXVxyXG5cdFx0YXJyID0gKFwiWyN7eH0sI3t5fV1cIiBmb3IgW3gseV0gaW4gdHJhaWwpXHJcblx0XHRzID0gYXJyLmpvaW4gXCIsXCJcclxuXHRlbHNlXHJcblx0XHRzID0gXCJcIlxyXG5cdHNlbmRNYWlsIFwiI3tkYXRhLm1hcH0gI3tjdXJyZW50Q29udHJvbH0gI3tsaXR0ZXJhfVwiLCByICsgQlIgKyBkdW1wLmdldCgpICsgc1xyXG5cclxuQXJyYXkucHJvdG90eXBlLmNsZWFyID0gLT4gQGxlbmd0aCA9IDBcclxuYXNzZXJ0ID0gKGEsIGIsIG1zZz0nQXNzZXJ0IGZhaWx1cmUnKSAtPiBjaGFpLmFzc2VydC5kZWVwRXF1YWwgYSwgYiwgbXNnXHJcblxyXG5nZXRCaWtlID0gLT4gc2V0VGFyZ2V0ICdiaWtlJ1xyXG5cclxuc2V0QmlrZSA9IC0+XHJcblx0W3gseV0gPSB3MmIuY29udmVydCBncHNMb24sZ3BzTGF0XHJcblx0Y29udHJvbHMuYmlrZSA9IFt4LHksJycsZ3BzTGF0LGdwc0xvbl1cclxuXHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cclxubWVudTEgPSAtPiAjIE1haW4gTWVudVxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlKClcclxuXHRkaWFsb2d1ZS5hZGQgJ0NlbnRlcicsIC0+XHJcblx0XHRbY3gsY3ldID0gcG9zaXRpb25cclxuXHRcdGRpYWxvZ3Vlcy5jbGVhcigpXHJcblx0ZGlhbG9ndWUuYWRkICdPdXQnLCAtPiBpZiBTQ0FMRSA+IGRhdGEuc2NhbGUgdGhlbiBTQ0FMRSAvPSAxLjVcclxuXHRkaWFsb2d1ZS5hZGQgJ1Rha2UuLi4nLCAtPiBtZW51NCgpXHJcblx0ZGlhbG9ndWUuYWRkICdHb3RvIEJpa2UnLCAtPiBzZXRUYXJnZXQgJ2Jpa2UnXHJcblx0ZGlhbG9ndWUuYWRkICdNb3JlLi4uJywgLT4gbWVudTYoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnU3RvcmUgQmlrZScsIC0+IHNldEJpa2UoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnVGFyZ2V0Li4uJywgLT4gbWVudTMoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnSW4nLCAtPiBTQ0FMRSAqPSAxLjVcclxuXHRkaWFsb2d1ZS5jbG9jayAnICcsdHJ1ZVxyXG5cdGRpYWxvZ3VlLnRleHRTaXplICo9IDEuNVxyXG5cclxubWVudTMgPSAtPiAjIFRhcmdldFxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlIDAsMFxyXG5cdHRhcmdldHMgPSBtYWtlVGFyZ2V0cygpXHJcblx0bHN0ID0gdGFyZ2V0cy5zbGljZSgpXHJcblx0bHN0ID0gbHN0LnNvcnQgKGEsYikgLT4gYVsyXSAtIGJbMl1cclxuXHRkaWFsb2d1ZS5saXN0IGxzdCwgOCwgZmFsc2UsIChhcnIpIC0+XHJcblx0XHRpZiBhcnIubGVuZ3RoID4gMCB0aGVuIHNldFRhcmdldCBhcnJbMF1cclxuXHRcdGRpYWxvZ3Vlcy5jbGVhcigpXHJcblxyXG5tZW51NCA9IC0+ICMgVGFrZVxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlKClcclxuXHRkaWFsb2d1ZS5hZGQgJ0FCQ0RFJywgLT4gbWVudTUgJ0FCQ0RFJ1xyXG5cdGRpYWxvZ3VlLmFkZCAnS0xNTk8nLCAtPiBtZW51NSAnS0xNTk8nXHJcblx0ZGlhbG9ndWUuYWRkICdVVldYWVonLCAtPiBtZW51NSAnVVZXWFlaJ1xyXG5cdGRpYWxvZ3VlLmFkZCAnQ2xlYXInLCAtPiB1cGRhdGUgJyAnXHJcblx0ZGlhbG9ndWUuYWRkICdQUVJTVCcsIC0+IG1lbnU1ICdQUVJTVCdcclxuXHRkaWFsb2d1ZS5hZGQgJ0ZHSElKJywgLT4gbWVudTUgJ0ZHSElKJ1xyXG5cdGRpYWxvZ3VlLmNsb2NrKClcclxuXHJcbm1lbnU1ID0gKGxldHRlcnMpIC0+ICMgQUJDREVcclxuXHRkaWFsb2d1ZSA9IG5ldyBEaWFsb2d1ZSgpXHJcblx0Zm9yIGxldHRlciBpbiBsZXR0ZXJzXHJcblx0XHRkaWFsb2d1ZS5hZGQgbGV0dGVyLCAtPiB1cGRhdGUgQHRpdGxlXHJcblx0ZGlhbG9ndWUuY2xvY2soKVxyXG5cclxubWVudTYgPSAtPiAjIE1vcmVcclxuXHRkaWFsb2d1ZSA9IG5ldyBEaWFsb2d1ZSgpXHJcblx0ZGlhbG9ndWUuYWRkICdJbml0JywgLT4gaW5pdFNwZWFrZXIgamNuaW5kZXgrK1xyXG5cdGRpYWxvZ3VlLmFkZCAnTWFpbCcsIC0+XHJcblx0XHRleGVjdXRlTWFpbCgpXHJcblx0XHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnU2VjdG9yJywgLT4gbWVudTcoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnQ2xlYXInLCAtPlxyXG5cdFx0Y2xlYXJDb250cm9scygpXHJcblx0XHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cdGRpYWxvZ3VlLmFkZCAnSW5mbycsIC0+IFxyXG5cdFx0c3RhdGUgPSAyXHJcblx0XHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cdGRpYWxvZ3VlLmNsb2NrKClcclxuXHJcbm1lbnU3ID0gLT4gIyBTZWN0b3JcclxuXHRkaWFsb2d1ZSA9IG5ldyBEaWFsb2d1ZSgpXHJcblx0ZGlhbG9ndWUuYWRkICcxMCcsIC0+IFNldFNlY3RvciAxMCAjIDM2XHJcblx0ZGlhbG9ndWUuYWRkICcyMCcsIC0+IFNldFNlY3RvciAyMCAjIDE4XHJcblx0ZGlhbG9ndWUuYWRkICczMCcsIC0+IFNldFNlY3RvciAzMCAjIDEyXHJcblx0ZGlhbG9ndWUuYWRkICc0NScsIC0+IFNldFNlY3RvciA0NSAjIDhcclxuXHRkaWFsb2d1ZS5hZGQgJzYwJywgLT4gU2V0U2VjdG9yIDYwICMgNlxyXG5cdGRpYWxvZ3VlLmFkZCAnOTAnLCAtPiBTZXRTZWN0b3IgOTAgIyA0XHJcblx0ZGlhbG9ndWUuY2xvY2soKVxyXG5cclxuU2V0U2VjdG9yID0gKHNlY3RvcikgLT5cclxuXHRTRUNUT1IgPSBzZWN0b3JcclxuXHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cclxuYWRkWmVybyA9IChuKSAtPiBpZiBuIDw9IDkgdGhlbiBcIjBcIiArIG4gZWxzZSBuXHJcblxyXG5zdGREYXRlVGltZSA9IChkYXRlKSAtPlxyXG5cdHkgPSBkYXRlLmdldEZ1bGxZZWFyKClcclxuXHRtID0gYWRkWmVybyBkYXRlLmdldE1vbnRoKCkgKyAxXHJcblx0ZCA9IGFkZFplcm8gZGF0ZS5nZXREYXRlKClcclxuXHRoID0gYWRkWmVybyBkYXRlLmdldEhvdXJzKClcclxuXHRNID0gYWRkWmVybyBkYXRlLmdldE1pbnV0ZXMoKVxyXG5cdHMgPVx0YWRkWmVybyBkYXRlLmdldFNlY29uZHMoKVxyXG5cdFwiI3t5fS0je219LSN7ZH0gI3tofToje019OiN7c31cIlxyXG5cclxudXBkYXRlID0gKGxpdHRlcmEsaW5kZXg9MikgLT5cclxuXHRyZWNvcmRpbmdUcmFpbCA9IGZhbHNlXHJcblx0Y29udHJvbCA9IGNvbnRyb2xzW2N1cnJlbnRDb250cm9sXVxyXG5cdFt4LHldID0gdzJiLmNvbnZlcnQgZ3BzTG9uLCBncHNMYXRcclxuXHRjb250cm9sc1tjdXJyZW50Q29udHJvbF1baW5kZXhdID0gbGl0dGVyYVxyXG5cdHNhdmVDb250cm9scygpXHJcblx0ZGlhbG9ndWVzLmNsZWFyKClcclxuXHRleGVjdXRlTWFpbCgpXHJcblx0Z2V0QmlrZSgpXHJcblxyXG5zaG93RGlhbG9ndWUgPSAtPiBpZiBkaWFsb2d1ZXMubGVuZ3RoID4gMCB0aGVuIChfLmxhc3QgZGlhbG9ndWVzKS5zaG93KClcclxuXHJcbnRvdWNoU3RhcnRlZCA9IChldmVudCkgLT5cclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblx0c3RhcnRYID0gbW91c2VYXHJcblx0c3RhcnRZID0gbW91c2VZXHJcblx0c3RhdGUgPSAxXHJcblx0ZmFsc2VcclxuXHJcbnRvdWNoTW92ZWQgPSAoZXZlbnQpIC0+XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdGlmIGRpYWxvZ3Vlcy5sZW5ndGggPT0gMCBhbmQgc3RhdGUgPT0gMVxyXG5cdFx0Y3ggKz0gKHN0YXJ0WCAtIG1vdXNlWCkvU0NBTEVcclxuXHRcdGN5ICs9IChzdGFydFkgLSBtb3VzZVkpL1NDQUxFXHJcblx0XHRzdGFydFggPSBtb3VzZVhcclxuXHRcdHN0YXJ0WSA9IG1vdXNlWVxyXG5cdGZhbHNlXHJcblxyXG50b3VjaEVuZGVkID0gKGV2ZW50KSAtPlxyXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRpZiBzdGF0ZSA9PSAwIHRoZW4gaW5pdFNwZWFrZXIoKVxyXG5cdGlmIHN0YXRlID09IDIgdGhlbiBkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cdGlmIHN0YXRlIGluIFswLDJdIHRoZW4gcmV0dXJuIHN0YXRlID0gMVxyXG5cdGlmIG1lbnVCdXR0b24uaW5zaWRlIG1vdXNlWCxtb3VzZVkgdGhlbiByZXR1cm4gbWVudUJ1dHRvbi5jbGljaygpXHJcblxyXG5cdGlmIGRpYWxvZ3Vlcy5sZW5ndGggPiAwXHJcblx0XHRkaWFsb2d1ZSA9IF8ubGFzdCBkaWFsb2d1ZXNcclxuXHRcdGlmIG5vdCBkaWFsb2d1ZS5leGVjdXRlIG1vdXNlWCxtb3VzZVkgdGhlbiBkaWFsb2d1ZXMucG9wKClcclxuXHJcblx0ZmFsc2VcclxuXHJcbiJdfQ==
//# sourceURL=c:\github\gpsKarta\coffee\sketch.coffee