// Generated by CoffeeScript 2.4.1
var BR, DELAY, DIGITS, DIST, DISTLIST, Dump, LIMIT, SCALE, SECTOR, SetSector, Storage, TRACKED, VERSION, addZero, assert, b2w, bearingSaid, currentControl, cx, cy, data, decreaseQueue, distanceSaid, draw, drawControl, drawControls, drawInfo, drawRuler, drawTrack, drawTrail, dump, executeMail, firstInfo, fraction, getMeters, gps, gpsCount, gpsLat, gpsLon, img, increaseQueue, info, initSpeaker, keyPressed, locationUpdate, locationUpdateFail, mapName, menu1, menu4, menu5, menu6, menu7, menuButton, messages, params, platform, playSound, position, positionClicked, preload, radius, savePosition, say, sayBearing, sayDistance, sendMail, setTarget, setup, showDialogue, soundDown, soundQueue, soundUp, speaker, startX, startY, state, stdDateTime, storage, timeout, touchEnded, touchMoved, touchStarted, track, trgLat, trgLon, update, updateTrack, updateTrail, uppdatera, voiceQueue, voices, w2b,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

VERSION = 151;

DELAY = 100; // ms, delay between sounds

DIST = 1; // meter. Movement less than DIST makes no sound 1=walk. 5=bike

LIMIT = 20; // meter. Under this value is no bearing given.

SECTOR = 10; // Bearing resolution in degrees

DIGITS = 'zero one two three four five six seven eight niner'.split(' ');

BR = '<br>';

// http://www.bvsok.se/Kartor/Skolkartor/
// Högupplösta orienteringskartor: https://www.omaps.net
// https://omaps.blob.core.windows.net/map-excerpts/1fdc587ffdea489dbd69e29b10b48395.jpeg Nackareservatet utan kontroller.
DISTLIST = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];

mapName = ""; // t ex skarpnäck

params = null;

voices = null;

state = 0; // 0=uninitialized 1=normal 2=info

data = null;

img = null;

b2w = null;

w2b = null;

startX = 0;

startY = 0;

menuButton = null;

currentControl = null;

Storage = class Storage {
  constructor(mapName1) {
    var key, obj;
    this.mapName = mapName1;
    key = 'gpsKarta' + this.mapName;
    if (localStorage[key]) {
      try {
        obj = JSON.parse(localStorage[key]);
        this.controls = obj.controls;
        this.trail = obj.trail;
      } catch (error1) {}
    }
    //@tickSound = obj.tickSound
    this.clear();
  }

  save() {
    return localStorage['gpsKarta' + this.mapName] = JSON.stringify(this);
  }

  clear() {
    var trgLat, trgLon;
    this.controls = data.controls;
    this.trail = [];
    this.init();
    [trgLat, trgLon] = [0, 0];
    currentControl = null;
    return this.save();
  }

  init() {
    var control, key, lat, littera, lon, ref, results, trgLat, trgLon, x, y, z99;
    ref = this.controls;
    results = [];
    for (key in ref) {
      control = ref[key];
      [x, y, littera] = control;
      [lon, lat] = b2w.convert(x, y);
      control[2] = "";
      control[3] = lat;
      control[4] = lon;
      if (currentControl !== null) {
        results.push([z99, z99, z99, trgLat, trgLon] = this.controls[currentControl]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  deleteControl() {
    if (indexOf.call(currentControl, ':') >= 0) {
      delete this.controls[currentControl];
      this.save();
      return currentControl = null;
    } else {
      return voiceQueue.push("computer says no");
    }
  }

};

storage = null;

Dump = class Dump {
  constructor() {
    this.data = [];
    this.active = false;
  }

  store(msg) {
    if (this.active) {
      console.log(msg);
      return this.data.push(msg);
    }
  }

  get() {
    var result;
    result = this.data.join(BR);
    this.data = [];
    return result + BR + BR;
  }

};

dump = new Dump();

platform = null;

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = 1;

gps = null;

TRACKED = 5; // circles shows the user position

position = null; // gps position [lon,lat,alt,hhmmss]

track = []; // five latest GPS positions (bitmap coordinates)

speaker = null;

soundUp = null;

soundDown = null;

soundQueue = 0; // integer neg=minskat avstånd pos=ökat avstånd

messages = ['', '', '', '', '', ''];

gpsCount = 0;

[gpsLat, gpsLon] = [
  0,
  0 // avgör om muntlig information ska ges
];

[trgLat, trgLon] = [
  0,
  0 // koordinater för vald target
];


//lastLocation = '' # används för att skippa lika koordinater
timeout = null;

voiceQueue = [];

bearingSaid = ''; // förhindrar upprepning

distanceSaid = ''; // förhindrar upprepning

sendMail = function(subject, body) {
  mail.href = encodeURI(`mailto:${data.mail}?subject=${subject}&body=${body}`);
  //console.log mail.href
  return mail.click();
};

say = function(m) {
  if (speaker === null) {
    return;
  }
  speechSynthesis.cancel();
  speaker.text = m;
  dump.store("");
  dump.store(`say ${m} ${JSON.stringify(voiceQueue)}`);
  return speechSynthesis.speak(speaker);
};

preload = function() {
  params = getParameters();
  if (params.debug) {
    dump.active = params.debug === '1';
  }
  mapName = params.map || 'skarpnäck';
  return loadJSON(`data/${mapName}.json`, function(json) {
    var control, key, ref;
    data = json;
    ref = data.controls;
    for (key in ref) {
      control = ref[key];
      control.push("");
      control.push(0);
      control.push(0);
    }
    return img = loadImage("data/" + data.map);
  });
};

sayDistance = function(a, b) { // a is newer (meter)
  var d, j, len;
  // if a border is crossed, produce speech
  dump.store(`D ${myRound(a, 1)} ${myRound(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  for (j = 0, len = DISTLIST.length; j < len; j++) {
    d = DISTLIST[j];
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

sayBearing = function(a0, b0) { // a is newer (degrees)
  var a, b, ental, tiotal;
  dump.store(`B ${myRound(a0, 1)} ${myRound(b0, 1)}`);
  // if a sector limit is crossed, tell the new bearing
  a = SECTOR * round(a0 / SECTOR);
  b = SECTOR * round(b0 / SECTOR);
  if (a === b && b0 !== -1) {
    return ""; // samma sektor
  }
  a = round(a / 10);
  if (a === 0) {
    a = 36; // 01..36
  }
  tiotal = DIGITS[Math.floor(a / 10)];
  ental = DIGITS[modulo(a, 10)];
  return `${tiotal} ${ental}`;
};

increaseQueue = function(p) {
  var a, b, bearinga, bearingb, c, dista, distance, distb, sBearing, sDistance;
  dump.store(`increaseQueue ${p.coords.latitude} ${p.coords.longitude}`);
  if (currentControl === null) {
    return;
  }
  a = LatLon(p.coords.latitude, p.coords.longitude); // newest
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  dista = a.distanceTo(c); // meters
  distb = b.distanceTo(c);
  distance = (dista - distb) / DIST;
  if (trgLat !== 0) {
    bearinga = a.bearingTo(c);
    bearingb = b.bearingTo(c);
    if (dista >= LIMIT) {
      sBearing = sayBearing(bearinga, bearingb);
      if (sBearing !== "") {
        voiceQueue.push(`bearing ${sBearing}`);
      }
    }
    sDistance = sayDistance(dista, distb);
    if (sDistance !== "") {
      voiceQueue.push(`distance ${sDistance}`);
    }
  }
  if (abs(distance) >= 0.5) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = myRound(p.coords.latitude, 6);
    gpsLon = myRound(p.coords.longitude, 6);
  }
  if (abs(distance) <= 10) {
    return soundQueue = round(distance);
  } else if (distance < -10) {
    return soundQueue = -10;
  } else if (distance > 10) {
    return soundQueue = 10;
  }
};

firstInfo = function(key) {
  var b, bearingb, c, distance, distb;
  b = LatLon(gpsLat, gpsLon);
  c = LatLon(trgLat, trgLon); // target
  distb = round(b.distanceTo(c));
  distance = round(distb / DIST);
  bearingb = b.bearingTo(c);
  voiceQueue.push(`target ${key} ${sayBearing(bearingb, -1)} ${sayDistance(distb, -1)}`);
  dump.store("");
  dump.store(`target ${currentControl}`);
  dump.store(`gps ${[gpsLat, gpsLon]}`);
  dump.store(`trg ${[trgLat, trgLon]}`);
  dump.store(`voiceQueue ${voiceQueue}`);
  if (distance < 10) {
    return soundQueue = distance;
  } else {
    return soundQueue = 10; // ett antal DIST
  }
};

playSound = function() {
  if (soundQueue === 0) {
    return;
  }
  dump.store(`playSound ${soundQueue}`);
  //if not storage.tickSound then return
  if (soundQueue < 0 && soundDown !== null) {
    soundQueue++;
    return soundDown.play();
  } else if (soundQueue > 0 && soundUp !== null) {
    soundQueue--;
    return soundUp.play();
  }
};

decreaseQueue = function() {
  var arr, msg;
  if (voiceQueue.length === 0) {
    return;
  }
  msg = voiceQueue.shift();
  arr = msg.split(' ');
  if (arr[0] === 'bearing') {
    msg = arr[1] + ' ' + arr[2];
    if (bearingSaid !== msg) {
      say(msg);
    }
    return bearingSaid = msg;
  } else if (arr[0] === 'distance') {
    msg = arr[1];
    if (distanceSaid !== msg) {
      say(msg);
    }
    return distanceSaid = msg;
  } else if (arr[0] === 'target') {
    bearingSaid = arr[2] + ' ' + arr[3];
    distanceSaid = arr[4];
    msg = `${arr[0]} ${arr[1]}. bearing ${bearingSaid}. distance ${distanceSaid} meters`;
    // Example: 'target 11. bearing zero niner. distance 250 meters'
    return say(msg);
  } else if (arr[0] === 'saved') {
    return say(msg.replace(':', ' and '));
  }
};

locationUpdate = function(p) {
  var altitude, pLat, pLon;
  pLat = myRound(p.coords.latitude, 6);
  pLon = myRound(p.coords.longitude, 6);
  altitude = int(p.coords.altitude);
  if (storage.trail.length === 0) {
    gpsLat = pLat;
    gpsLon = pLon;
  }
  messages[5] = gpsCount++;
  decreaseQueue();
  increaseQueue(p); // meters
  return uppdatera(pLat, pLon, altitude, p.timestamp);
};

uppdatera = function(pLat, pLon, altitude, timestamp) { // senaste fem positionerna
  var M, date, h, hms, s;
  date = new Date();
  date.setTime(timestamp);
  h = addZero(date.getHours());
  M = addZero(date.getMinutes());
  s = addZero(date.getSeconds());
  hms = `${h}:${M}:${s}`;
  dump.store("");
  dump.store(`LU ${hms} ${pLat} ${pLon}`);
  position = [pLon, pLat, altitude, hms];
  updateTrack(pLat, pLon, altitude);
  return updateTrail(pLat, pLon, position);
};

updateTrack = function(pLat, pLon, altitude) {
  var t;
  track.push(w2b.convert(pLon, pLat));
  if (track.length > TRACKED) {
    track.shift();
  }
  t = _.last(track);
  dump.store(`T ${t[0]} ${t[1]}`);
  if (altitude) {
    messages[3] = altitude;
  }
  return messages[4] = pLat + ' ' + pLon;
};

updateTrail = function(pLat, pLon, position) {
  var a, b, dist, qLat, qLon;
  if (storage.trail.length === 0) {
    storage.trail.push(position);
    return;
  }
  [qLon, qLat] = _.last(storage.trail);
  a = LatLon(pLat, pLon); // newest
  b = LatLon(qLat, qLon); // last
  dist = a.distanceTo(b); // meters
  if (dist > 5) {
    dump.store(`updateTrail ${dist}`);
    return storage.trail.push(position);
  }
};

locationUpdateFail = function(error) {
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['', '', '', '', '', 'Check location permissions'];
  }
};

window.speechSynthesis.onvoiceschanged = function() {
  return voices = window.speechSynthesis.getVoices();
};

initSpeaker = function() {
  var index;
  //dump.store "initSpeaker in #{index}"
  index = int(getParameters().speaker || 5);
  speaker = new SpeechSynthesisUtterance();
  speaker.voiceURI = "native";
  speaker.volume = 1;
  speaker.rate = 1.0;
  speaker.pitch = 0;
  speaker.text = '';
  speaker.lang = 'en-GB';
  if (voices && index <= voices.length - 1) {
    speaker.voice = voices[index];
  }
  soundUp = loadSound('soundUp.wav');
  soundDown = loadSound('soundDown.wav');
  soundUp.setVolume(0.1);
  soundDown.setVolume(0.1);
  clearInterval(timeout);
  timeout = setInterval(playSound, DELAY);
  soundQueue = 0;
  dialogues.clear();
  say("Welcome!");
  track = [];
  return dump.store("initSpeaker out");
};

fraction = function(x) {
  return x - int(x);
};

getMeters = function(w, skala) {
  var d, distans, fract, i, j, lat0, lat1, len, lon0, lon1, n, p0, p1, ref;
  [lon0, lat0] = b2w.convert(0, height);
  [lon1, lat1] = b2w.convert(w, height);
  p0 = LatLon(lat0, lon0);
  p1 = LatLon(lat1, lon1);
  distans = p0.distanceTo(p1) / skala;
  d = Math.log10(distans);
  fract = fraction(d);
  ref = [1, 2, 5];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (10 ** fract > i) {
      n = i;
    }
  }
  return [round(distans), n * 10 ** int(d)];
};

// myTest = ->
// 	getMeters 1920,1 # Smäller här
// 	getMeters 1920,1.5 # eller här. Android
// 	getMeters 1920,1.5*1.5
// 	getMeters 1920,1.5*1.5*1.5
// assert [1434,1000], getMeters 1920,1 # Smäller här
// assert [956,500], getMeters 1920,1.5 # eller här. Android
// assert [638,500], getMeters 1920,1.5*1.5
// assert [425,200], getMeters 1920,1.5*1.5*1.5
//console.log "Ready!"
setup = function() {
  var abc, bmp, canvas, dcs, wgs;
  canvas = createCanvas(innerWidth - 0.0, innerHeight); //-0.5
  canvas.position(0, 0); // hides text field used for clipboard copy.
  platform = window.navigator.platform;
  angleMode(DEGREES);
  SCALE = data.scale;
  dcs = data.controls;
  bmp = [dcs.A[0], dcs.A[1], dcs.B[0], dcs.B[1], dcs.C[0], dcs.C[1]];
  abc = data.ABC;
  wgs = [abc[1], abc[0], abc[3], abc[2], abc[5], abc[4]];
  b2w = new Converter(bmp, wgs, 6);
  w2b = new Converter(wgs, bmp, 0);
  // myTest() Do not execute! Very dependent on .json file.
  storage = new Storage(mapName);
  [cx, cy] = [img.width / 2, img.height / 2];
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  menuButton = new MenuButton(width - 160);
  return addEventListener('touchstart', function(evt) {
    var mx, my, touch, touches;
    touches = evt.changedTouches;
    touch = touches[touches.length - 1];
    mx = touch.pageX;
    my = touch.pageY;
    return myMousePressed(mx, my);
  });
};

info = function() {
  var result;
  result = [];
  result.push(`MAP: ${mapName}`);
  result.push(`VERSION: ${VERSION}`);
  result.push(`dump.active: ${dump.active}`);
  result.push(`dump.data.length: ${dump.data.length}`);
  result.push(`trail.length: ${storage.trail.length}`);
  result.push(`gpsCount: ${gpsCount}`);
  result.push(`SECTOR: ${SECTOR}`);
  result.push(`cx cy: ${round(cx)} ${round(cy)}`);
  result.push(`SCALE: ${SCALE}`);
  return result;
};

drawInfo = function() {
  var i, j, len, m, ref, results;
  textAlign(LEFT, CENTER);
  sc();
  fc(0);
  ref = info();
  results = [];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    m = ref[i];
    results.push(text(m, 20, 100 * (i + 1)));
  }
  return results;
};

drawTrack = function() {
  var i, j, len, results, x, y;
  fc();
  sw(2 / SCALE);
  sc(0);
  results = [];
  for (i = j = 0, len = track.length; j < len; i = ++j) {
    [x, y] = track[i];
    results.push(circle(x - cx, y - cy, 5 * (track.length - i)));
  }
  return results;
};

drawTrail = function() {
  var j, lat, len, lon, ref, results, x, y;
  fc(1, 1, 0);
  sw(1);
  sc(0);
  ref = storage.trail;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    [lon, lat] = ref[j];
    [x, y] = w2b.convert(lon, lat);
    results.push(circle(x - cx, y - cy, 2));
  }
  return results;
};

drawControls = function() {
  var col, control, key, littera, r, ref, results, x, y;
  sw(2);
  ref = storage.controls;
  results = [];
  for (key in ref) {
    control = ref[key];
    if (control === null) {
      continue;
    }
    [x, y, littera] = control;
    col = "#0008";
    if (indexOf.call("ABC", key) >= 0) {
      col = "#0f08";
    }
    if (indexOf.call("DEFGHIJKLMNOPQRSTUVWXYZ", key) >= 0) {
      col = "#00f8";
    }
    if (indexOf.call(key, ":") >= 0) {
      col = "#f008";
    }
    r = radius(key);
    stroke(col);
    fc();
    circle(x - cx, y - cy, r);
    sc();
    fill(col);
    if (r === data.radius) { // Full Size
      textSize(r);
      textAlign(LEFT, TOP);
      text(key, x - cx + 0.7 * r, y - cy + 0.7 * r);
      textAlign(CENTER, CENTER);
      text(littera, x - cx, y - cy); // Half Size
    } else {
      textSize(r * 1.5);
      textAlign(CENTER, CENTER);
      text(key, x - cx, y - cy);
    }
    stroke(col);
    sw(2);
    results.push(point(x - cx, y - cy));
  }
  return results;
};

radius = function(key) {
  if (indexOf.call('ABCDEFGHIJKLMNOPQRSTUVWXYZ', key) >= 0 || indexOf.call(key, ':') >= 0) {
    return data.radius / 2;
  } else {
    return data.radius;
  }
};

drawControl = function() {
  var bearing, latLon1, latLon2, x, y;
  if (trgLat === 0 && trgLon === 0) {
    return;
  }
  if (gpsLat !== 0 && gpsLon !== 0) {
    latLon2 = LatLon(trgLat, trgLon);
    latLon1 = LatLon(gpsLat, gpsLon);
    bearing = latLon1.bearingTo(latLon2);
    messages[0] = currentControl || "";
    messages[1] = `${int(bearing)}º`;
    messages[2] = `${round(latLon1.distanceTo(latLon2))} m`;
  }
  if (currentControl) {
    [x, y] = storage.controls[currentControl];
    sc();
    fc(0, 0, 0, 0.25);
    return circle(x - cx, y - cy, radius(currentControl));
  }
};

drawRuler = function() {
  var d, h, w, w0, w1, x, y;
  [w1, w0] = getMeters(width, SCALE);
  d = (w1 - w0) / 2 / w1 * width;
  x = d;
  y = height * 0.9;
  w = w0 / w1 * width;
  h = height * 0.03;
  sc(0);
  sw(1);
  fc();
  rect(x, y, w, h);
  textSize(height / 30);
  textAlign(CENTER, CENTER);
  sc();
  fc(0);
  return text(w0 + "m", width / 2, y + h * 0.6);
};

draw = function() {
  var i, j, len, margin, message, x, y;
  bg(0, 1, 0);
  if (state === 0) {
    textSize(100);
    textAlign(CENTER, CENTER);
    x = width / 2;
    y = height / 2;
    text(mapName, x, y - 100);
    text('Version: ' + VERSION, x, y);
    if (dump.active) {
      text('debug', x, y + 100);
    }
    text("Click to continue!", x, y + 200);
    return;
  }
  if (state === 1) {
    push();
    translate(width / 2, height / 2);
    scale(SCALE);
    image(img, -cx, -cy);
    drawTrail();
    drawTrack();
    if (data.drawControls) {
      drawControls();
    }
    drawControl();
    pop();
    fc(0);
    sc(1, 1, 0);
    sw(3);
    margin = 25;
    for (i = j = 0, len = messages.length; j < len; i = ++j) {
      message = messages[i];
      textAlign([LEFT, CENTER, RIGHT][i % 3], [TOP, BOTTOM][Math.floor(i / 3)]);
      textSize([100, 50][Math.floor(i / 3)]);
      text(message, [margin, width / 2, width - margin][i % 3], [margin, height][Math.floor(i / 3)]);
    }
    showDialogue();
    menuButton.draw();
    drawRuler();
    return;
  }
  if (state === 2) {
    drawInfo();
  }
};

setTarget = function(key) {
  var x, y;
  soundQueue = 0;
  if (key === currentControl) {
    currentControl = null;
    messages[0] = "";
    messages[1] = "";
    messages[2] = "";
    [trgLon, trgLat] = [0, 0];
  } else {
    if (!(key in storage.controls)) {
      return;
    }
    if (storage.controls[currentControl] === null) {
      return;
    }
    // soundQueue = 0
    currentControl = key;
    [x, y] = storage.controls[currentControl];
    [trgLon, trgLat] = b2w.convert(x, y);
    firstInfo(key);
  }
  storage.save();
  return dialogues.clear();
};

executeMail = function() {
  var altitude, content, key, lat, latitude, littera, lon, longitude, r, s, t, timestamp, x, y;
  r = info().join(BR);
  s = ((function() {
    var j, len, ref, results;
    ref = storage.trail;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      [longitude, latitude, altitude, timestamp] = ref[j];
      results.push(`${timestamp} ${latitude} ${longitude} ${altitude}`);
    }
    return results;
  })()).join(BR);
  t = ((function() {
    var ref, results;
    ref = storage.controls;
    results = [];
    for (key in ref) {
      [x, y, littera, lat, lon] = ref[key];
      results.push(`${key} ${x} ${y} ${littera} ${lat} ${lon}`);
    }
    return results;
  })()).join(BR);
  content = r + BR + dump.get() + t + BR + BR + s;
  if (currentControl) {
    littera = storage.controls[currentControl][2];
    return sendMail(`${mapName} ${currentControl} ${littera}`, content);
  } else {
    return sendMail(`${mapName}`, content);
  }
};

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

savePosition = function() {
  var M, date, h, key, x, y;
  [x, y] = w2b.convert(gpsLon, gpsLat);
  date = new Date();
  h = addZero(date.getHours());
  M = addZero(date.getMinutes());
  key = `${h}:${M}`;
  storage.controls[key] = [x, y, '', gpsLat, gpsLon];
  storage.save();
  console.log(key, storage.controls[key]);
  voiceQueue.push(`saved ${key}`);
  return dialogues.clear();
};

menu1 = function() { // Main Menu
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Center', function() {
    [cx, cy] = w2b.convert(position[0], position[1]);
    return dialogues.clear();
  });
  dialogue.add('Out', function() {
    if (SCALE > data.scale) {
      return SCALE /= 1.5;
    }
  });
  dialogue.add('Take...', function() {
    return menu4();
  });
  dialogue.add('More...', function() {
    return menu6();
  });
  dialogue.add('Save', function() {
    return savePosition();
  });
  dialogue.add('In', function() {
    return SCALE *= 1.5;
  });
  dialogue.clock(' ', true);
  return dialogue.textSize *= 1.5;
};

menu4 = function() { // Take
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('ABCDE', function() {
    return menu5('ABCDE');
  });
  dialogue.add('KLMNO', function() {
    return menu5('KLMNO');
  });
  dialogue.add('UVWXYZ', function() {
    return menu5('UVWXYZ');
  });
  dialogue.add('Clear', function() {
    return update(' ');
  });
  dialogue.add('PQRST', function() {
    return menu5('PQRST');
  });
  dialogue.add('FGHIJ', function() {
    return menu5('FGHIJ');
  });
  return dialogue.clock();
};

menu5 = function(letters) { // ABCDE
  var dialogue, j, len, letter;
  dialogue = new Dialogue();
  for (j = 0, len = letters.length; j < len; j++) {
    letter = letters[j];
    dialogue.add(letter, function() {
      return update(this.title);
    });
  }
  return dialogue.clock();
};

menu6 = function() { // More
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('Init', function() {
    return initSpeaker();
  });
  dialogue.add('Mail...', function() {
    executeMail();
    return dialogues.clear();
  });
  dialogue.add('Sector...', function() {
    return menu7();
  });
  dialogue.add('Delete', function() {
    storage.deleteControl();
    return dialogues.clear();
  });
  dialogue.add('Clear', function() {
    storage.clear();
    return dialogues.clear();
  });
  dialogue.add('Info...', function() {
    state = 2;
    return dialogues.clear();
  });
  dialogue.clock();
  return dialogue.textSize *= 1.5;
};

menu7 = function() { // Sector
  var dialogue;
  dialogue = new Dialogue();
  dialogue.add('10', function() {
    return SetSector(10); // 36
  });
  dialogue.add('20', function() {
    return SetSector(20); // 18
  });
  dialogue.add('30', function() {
    return SetSector(30); // 12
  });
  dialogue.add('45', function() {
    return SetSector(45); // 8
  });
  dialogue.add('60', function() {
    return SetSector(60); // 6
  });
  dialogue.add('90', function() {
    return SetSector(90); // 4
  });
  return dialogue.clock();
};

SetSector = function(sector) {
  SECTOR = sector;
  return dialogues.clear();
};

addZero = function(n) {
  if (n <= 9) {
    return "0" + n;
  } else {
    return n;
  }
};

stdDateTime = function(date) {
  var M, d, h, m, s, y;
  y = date.getFullYear();
  m = addZero(date.getMonth() + 1);
  d = addZero(date.getDate());
  h = addZero(date.getHours());
  M = addZero(date.getMinutes());
  s = addZero(date.getSeconds());
  return `${y}-${m}-${d} ${h}:${M}:${s}`;
};

update = function(littera, index = 2) {
  var control;
  control = storage.controls[currentControl];
  //[x,y] = w2b.convert gpsLon, gpsLat
  control[index] = littera;
  storage.save();
  dialogues.clear();
  return executeMail();
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

positionClicked = function(xc, yc) { // canvas koordinater
  var control, key, ref, x, xi, y, yi, z99;
  xi = cx + (xc - width / 2) / SCALE; // image koordinater
  yi = cy + (yc - height / 2) / SCALE;
  ref = storage.controls;
  for (key in ref) {
    control = ref[key];
    if (control === null) {
      continue;
    }
    [x, y, z99, z99, z99] = control;
    if (radius(key) > dist(xi, yi, x, y)) {
      setTarget(key);
      return true;
    }
  }
  return false;
};

touchStarted = function(event) {
  event.preventDefault();
  startX = mouseX;
  startY = mouseY;
  return false;
};

touchMoved = function(event) {
  event.preventDefault();
  if (dialogues.length === 0 && state === 1) {
    cx += (startX - mouseX) / SCALE;
    cy += (startY - mouseY) / SCALE;
    startX = mouseX;
    startY = mouseY;
  }
  return false;
};

touchEnded = function(event) {
  var dialogue;
  event.preventDefault();
  if (state === 0) {
    initSpeaker();
  }
  if (state === 2) {
    dialogues.clear();
  }
  if (state === 0 || state === 2) {
    state = 1;
    return false;
  }
  if (menuButton.inside(mouseX, mouseY)) {
    menuButton.click();
    return false;
  }
  if (dialogues.length > 0) {
    dialogue = _.last(dialogues);
    if (!dialogue.execute(mouseX, mouseY)) {
      dialogues.pop();
    }
  } else if (state === 1 && startX === mouseX && startY === mouseY) {
    positionClicked(mouseX, mouseY);
  }
  return false;
};

keyPressed = function() {
  var xi, yi;
  if (key === ' ') {
    xi = round(cx + (mouseX - width / 2) / SCALE); // image koordinater
    yi = round(cy + (mouseY - height / 2) / SCALE);
    return console.log(xi, yi);
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\gpsKarta\coffee\sketch.coffee