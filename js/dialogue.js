'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Button, Dialogue, RectButton, calcr1r2, dialogues;

dialogues = [];

calcr1r2 = function calcr1r2(n, w, h) {
  var r1, r2, s;
  s = Math.min(w, h);
  r2 = s / 7;
  r1 = s / 3;
  if (n > 6) {
    r2 *= 7 / n;
  }
  return [Math.round(r1), Math.round(r2)];
};

assert([200, 86], calcr1r2(4, 600, 800));

assert([200, 75], calcr1r2(8, 600, 800));

Dialogue = function () {
  function Dialogue() {
    var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : width / 2;
    var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : height / 2;

    _classCallCheck(this, Dialogue);

    this.x = x1;
    this.y = y1;
    this.col = '#ff06';
    this.buttons = [];
    dialogues.push(this);
  }

  _createClass(Dialogue, [{
    key: 'add',
    value: function add(prompt, event) {
      return this.buttons.push(new Button(this, prompt, event));
    }
  }, {
    key: 'clock',
    value: function clock() {
      var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ' ';
      var backPop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var turn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var button, chars, i, j, len, n, r1, r2, ref, v;
      this.backPop = backPop;
      n = this.buttons.length;

      var _calcr1r = calcr1r2(n, width, height);

      var _calcr1r2 = _slicedToArray(_calcr1r, 2);

      r1 = _calcr1r2[0];
      r2 = _calcr1r2[1];

      ref = this.buttons;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        button = ref[i];
        v = i * 360 / n + turn - 90;
        button.x = r1 * cos(v);
        button.y = r1 * sin(v);
        button.r = r2;
      }
      button = new Button(this, title, function () {
        if (this.dlg.backPop) {
          return dialogues.pop();
        } else {
          return dialogues.clear();
        }
      });
      button.x = 0;
      button.y = 0;
      button.r = r2;
      this.buttons.push(button);
      chars = _.max(function () {
        var k, len1, ref1, results;
        ref1 = this.buttons;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          button = ref1[k];
          results.push(button.title.length);
        }
        return results;
      }.call(this));
      return this.textSize = chars === 1 ? 0.75 * r2 : 2.5 * r2 / chars;
    }
  }, {
    key: 'update',
    value: function update(delta) {
      // -1 eller +1
      var i, j, len, ref, ref1, results;
      if (0 <= (ref = this.pageStart + delta * this.pageSize) && ref < this.lst.length) {
        this.pageStart += delta * this.pageSize;
        ref1 = range(this.pageSize);
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          i = ref1[j];
          if (this.pageStart + i < this.lst.length) {
            results.push(this.buttons[i].arr = this.lst[this.pageStart + i]);
          } else {
            results.push(this.buttons[i].arr = []);
          }
        }
        return results;
      }
    }
  }, {
    key: 'list',
    value: function list(lst) {
      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

      var _this = this;

      var backPop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var click = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (arr) {
        return print(arr[0]);
      };

      var h, i, item, j, len, n, ref, w, x, y;
      this.lst = lst;
      this.pageSize = pageSize;
      this.backPop = backPop;
      this.pageStart = 0;
      n = this.pageSize;
      x = 0;
      w = width;
      h = height / (this.pageSize + 1);
      this.buttons.clear();
      ref = range(this.pageStart, this.pageStart + n);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i < this.lst.length) {
          item = this.lst[i];
          y = i * h;
          (function (item) {
            return _this.buttons.push(new RectButton(_this, item, x, y, w, h, function () {
              return click(this.arr);
            }));
          })(item);
        }
      }
      this.buttons.push(new RectButton(this, ['Prev'], 0 * w / 3, h * n, w / 3, h, function () {
        return this.dlg.update(-1);
      }));
      this.buttons.push(new RectButton(this, ['Cancel'], 1 * w / 3, h * n, w / 3, h, function () {
        if (this.dlg.backPop) {
          return dialogues.pop();
        } else {
          return dialogues.clear();
        }
      }));
      return this.buttons.push(new RectButton(this, ['Next'], 2 * w / 3, h * n, w / 3, h, function () {
        return this.dlg.update(+1);
      }));
    }
  }, {
    key: 'show',
    value: function show() {
      var button, j, len, ref;
      push();
      translate(this.x, this.y);
      textSize(this.textSize);
      ref = this.buttons;
      for (j = 0, len = ref.length; j < len; j++) {
        button = ref[j];
        button.show(this);
      }
      return pop();
    }
  }, {
    key: 'execute',
    value: function execute(mx, my) {
      var button, j, len, ref;
      ref = this.buttons;
      for (j = 0, len = ref.length; j < len; j++) {
        button = ref[j];
        if (button.inside(mx, my, this)) {
          button.execute();
          return true;
        }
      }
      return false;
    }
  }]);

  return Dialogue;
}();

Button = function () {
  function Button(dlg, title1) {
    var event1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
      return print(this.txt);
    };

    _classCallCheck(this, Button);

    this.dlg = dlg;
    this.title = title1;
    this.event = event1;
    this.active = true;
  }

  _createClass(Button, [{
    key: 'info',
    value: function info(title1, event1) {
      this.title = title1;
      this.event = event1;
      return this.active = true;
    }
  }, {
    key: 'show',
    value: function show() {
      var arr;
      if (this.active) {
        fill(this.dlg.col);
      } else {
        fill("#fff8");
      }
      stroke(0);
      ellipse(this.x, this.y, 2 * this.r, 2 * this.r);
      push();
      if (this.active) {
        fill(0);
      } else {
        fill("#888");
      }
      noStroke();
      textAlign(CENTER, CENTER);
      textSize(this.dlg.textSize);
      arr = this.title.split(' ');
      if (arr.length === 1) {
        text(arr[0], this.x, this.y);
      } else {
        text(arr[0], this.x, this.y - 0.3 * this.r);
        text(arr[1], this.x, this.y + 0.3 * this.r);
      }
      return pop();
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.r > dist(mx, my, this.dlg.x + this.x, this.dlg.y + this.y);
    }
  }, {
    key: 'execute',
    value: function execute() {
      if (this.active) {
        return this.event();
      }
    }
  }]);

  return Button;
}();

RectButton = function () {
  function RectButton(dlg, arr1, x1, y1, w1, h1) {
    var event1 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {
      return print(this.item);
    };

    _classCallCheck(this, RectButton);

    this.dlg = dlg;
    this.arr = arr1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.event = event1;
    this.active = true;
  }

  _createClass(RectButton, [{
    key: 'info',
    value: function info(arr1, event1) {
      this.arr = arr1;
      this.event = event1;
      return this.active = true;
    }
  }, {
    key: 'show',
    value: function show() {
      if (this.active) {
        fill(this.dlg.col);
      } else {
        fill("#fff8");
      }
      stroke(0);
      rect(this.x, this.y, this.w, this.h);
      push();
      if (this.active) {
        fill(0);
      } else {
        fill("#888");
      }
      noStroke();
      textSize(this.dlg.textSize);
      if (this.arr.length === 1) {
        textAlign(CENTER, CENTER);
        text(this.arr[0], this.x + this.w / 2, this.y + this.h / 2);
      }
      if (this.arr.length === 2) {
        textAlign(LEFT, CENTER);
        text(this.arr[0], this.x + 10, this.y + this.h / 2);
        textAlign(RIGHT, CENTER);
        text(this.arr[1], this.x + this.w - 10, this.y + this.h / 2);
      }
      if (this.arr.length === 3) {
        textAlign(LEFT, CENTER);
        text(this.arr[0], this.x + 10, this.y + this.h / 2);
        textAlign(CENTER, CENTER);
        text(this.arr[1], this.x + this.w / 2, this.y + this.h / 2);
        textAlign(RIGHT, CENTER);
        text(this.arr[2], this.x + this.w - 10, this.y + this.h / 2);
      } else {}
      return pop();
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.x < mx && mx < this.x + this.w && this.y < my && my < this.y + this.h;
    }
  }, {
    key: 'execute',
    value: function execute() {
      if (this.active) {
        return this.event();
      }
    }
  }]);

  return RectButton;
}();
//# sourceMappingURL=dialogue.js.map
